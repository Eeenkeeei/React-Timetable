{"version":3,"sources":["Theme.ts","pages/HelpPage.tsx","pages/StartPage.tsx","serverApi/dataStorage.ts","serverApi/localStorage.ts","AppConstants.tsx","serverApi/http.ts","components/UniversalComponents.tsx","pages/AccountPage.tsx","pages/AppPagesList.ts","components/Dialogs/DialogLoginForm.tsx","components/Dialogs/DialogRegisterForm.tsx","components/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","palette","common","black","white","background","paper","default","primary","light","main","dark","contrastText","secondary","error","text","disabled","hint","HelpPage","document","title","react","React","StartPage","style","flexGrow","Grid","container","spacing","textAlign","item","xs","sm","Card","CardContent","Typography","variant","color","id","subtitle","textBody","img","map","cardBody","key","length","CardMedia","component","alt","height","image","DataStorage","storage","Object","classCallCheck","this","createClass","value","data","add","logOut","get","LocalStorage","JSON","parse","localStorage","getItem","save","removeItem","setItem","stringify","serverApi","Http","url","path","fetch","method","headers","Content-Type","body","token","Authorization","concat","LoadingComponent","react_default","a","createElement","MuiThemeProvider","CircularProgress","AccountPage","state","isDataConfirmed","tabValue","email","registrationDate","password","admin","lastLoginDate","handleChangeTab","event","newValue","_this","setState","handleChangeIndexTab","index","_this2","http","getUserData","loginWithToken","then","res","json","result","undefined","console","log","_this3","stylesForTab","textTransform","minWidth","tabsArray","label","icon","Person","ListAlt","Security","Dashboard","Fingerprint","mobileMenu","AppBar","position","className","Tabs","onChange","indicatorColor","textColor","tabData","Tab","fullMenu","accountDataComponent","marginTop","overflow","accountPageBody","lib_default","axis","direction","onChangeIndex","dir","waitingComponent","pagesForMenus","pages","buttonText","DialogLoginForm","_React$Component","_getPrototypeOf2","_len","arguments","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","openDialogWindow","isLoading","loginState","handleOpenLoginDialog","handleClose","login","loginForToken","props","isLoginSuccess","handleEmailChange","target","handlePasswordChange","inherits","mobile","onClick","width","Button","Dialog","open","onClose","aria-labelledby","DialogTitle","marginLeft","marginRight","DialogContent","DialogContentText","TextField","autoFocus","margin","type","fullWidth","DialogActions","Component","DialogRegisterForm","confirmPassword","registrationState","handleConfirmPasswordChange","Main","menuEl","mobileOpenDialogLoginForm","handleClick","evt","currentTarget","handleExitButton","changePage","isDataConfirmedMobileMenu","Toolbar","aria-controls","aria-haspopup","Menu_default","Menu","anchorEl","keepMounted","Boolean","dataPage","react_router_dom","to","activeStyle","fontWeight","MenuItem","Input","isDataNotConfirmedMobileMenu","DialogLoginForm_DialogLoginForm","DialogRegisterForm_DialogRegisterForm","isLoadingComponent","react_router","Container","exact","StartPage_StartPage","isDataNotConfrimed","App","Main_Main","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d9efb98b.chunk.js","sourcesContent":["import {createMuiTheme} from \"@material-ui/core\";\n\nexport const theme = createMuiTheme({\n    \"palette\": {\n        \"common\": {\n            \"black\": \"#000\",\n            \"white\": \"#fff\"\n        },\n        \"background\": {\n            \"paper\": \"rgba(255, 255, 255, 1)\",\n            \"default\": \"#fafafa\"\n        },\n        \"primary\": {\n            \"light\": \"#40c4ff\",\n            \"main\": \"#039be5\",\n            \"dark\": \"rgba(74, 144, 226, 1)\",\n            \"contrastText\": \"#fff\"\n        },\n        \"secondary\": {\n            \"light\": \"#4ffcff\",\n            \"main\": \"#fff\",\n            \"dark\": \"#22c5bb\",\n            \"contrastText\": \"#fff\"\n        },\n        \"error\": {\n            \"light\": \"#2327e5\",\n            \"main\": \"#001df4\",\n            \"dark\": \"#0b18d3\",\n            \"contrastText\": \"#fff\"\n        },\n        \"text\": {\n            \"primary\": \"rgba(0, 0, 0, 0.87)\",\n            \"secondary\": \"rgba(0, 0, 0, 0.54)\",\n            \"disabled\": \"rgba(0, 0, 0, 0.38)\",\n            \"hint\": \"rgba(0, 0, 0, 0.38)\"\n        }\n    }\n});\n","import * as React from \"react\";\nimport {DataStorage} from \"../serverApi/dataStorage\";\nimport {LocalStorage} from \"../serverApi/localStorage\";\nimport Http from \"../serverApi/http\";\n\nexport default class HelpPage extends React.Component {\n\n\n\n    public render() {\n        document.title = 'Помощь';\n\n        return (\n            <div>\n               HelpPage\n\n            </div>\n        )\n    }\n}\n","import * as React from \"react\";\nimport {Card, CardContent, CardMedia, Grid, Typography} from \"@material-ui/core\";\n\nexport default class StartPage extends React.Component {\n\n\n    public render() {\n        document.title = 'Стартовая страница';\n\n        const cardTextArray = [\n            {\n                id: '0',\n                title: 'Задание на дом',\n                subtitle: '',\n                textBody: 'Добавь домашнее задание на любую дату',\n                img: 'https://psv4.userapi.com/c848216/u27991797/docs/d11/90fe7dac2e3c/Screen-Shot-2017-04-27-at-9_32_54-AM.jpg?extra=cbXeM8kTA7ZV7p8uO3Hw8nSvxC4aw97-aCvsm0134kAJ38Qv6uxyrSMK4154aNWwBlzbJajxolkr7K2ZRWPcRG1vpzzdSE-BUEcm_TPvBfjl_O7rvI2gIl74Wd0CO5D_Qs1V_V_n57J0bIY-Kb3pRSY7'\n            },\n            {\n                id: '1',\n                title: 'Новости',\n                subtitle: '',\n                textBody: 'Получай всегда актуальные новости КАИ и не только',\n                img: 'https://psv4.userapi.com/c848216/u27991797/docs/d17/0913e7b2c895/laptop-header.jpg?extra=QjBepeem_sHiXRAaPXBzn_kRQBnKN-766UGhj6vuYxlkBYfCPp4g8VZeLXdM2bIbXA9MjKRBzpB6QmHVr051ekx64X5sy3DgAawW9o1hAnGONW1I26tbpt0jyCV5dUozWHHJkShlAa7L57tlbXHUCWGZ'\n            },\n            {\n                id: '2',\n                title: 'Уведомления',\n                subtitle: 'Псс... хочешь немного уведомлений?',\n                textBody: 'Отклоняй надоедливые уведомления каждый раз, когда они почему-то приходят',\n                img: 'https://psv4.userapi.com/c848420/u27991797/docs/d4/02e06819a0f8/3922152297274a839d5a7d14e0db3e44.jpg?extra=GmBB6qppUF1BxdE88LXbVZE7NBw2Pk-jf5w7xTC8CdHwSg9UWaNzqzGwNCbrllB9aYnrDkrUIH5KCG54zsoztrKAThK11Fj9gjwteLQVC-cs6mWaDZQY6sJkBACMOtU4h-s0gJSF5lET3zhoUpeqf6kI'\n            },\n            {\n                id: '3',\n                title: 'Внеси собственное расписание',\n                subtitle: '',\n                textBody: 'Сервис позволяет тебе внести свое расписание, записывать задания на каждый отдельный предмет и отмечать, если оно было уже выполнено!',\n                img: 'https://psv4.userapi.com/c848216/u27991797/docs/d11/f7c767e1e755/gramotnoe-motivatsionnoe-pismo.jpg?extra=Tq3QBjFGN3R8-BNut6Rh72XDW03LKVoUf8htMiFgUI_AokvJDqj7338GNQSPaTCWkEoRt-7VPw01DF12dRgUWeis1uVpIybMuxzKxU5To7o5Xel72A_IJMPj8CxV-W3_qRfeDmzzr8GNB5lOtn_ju5J6'\n            },\n            {\n                id: '4',\n                title: 'Следи за своими задачами',\n                subtitle: '',\n                textBody: 'Внеси свои задачи, чтобы не забыть, что нужно сделать. Редактируй их, отмечай выполненные и просматривай их в отдельном хранилище!',\n                img: 'https://psv4.userapi.com/c848136/u27991797/docs/d15/ac7d6911831c/CoXSx9QWcAAHEZj.jpg?extra=i_D31o0d3zO2vXaiyH0MPE0xhhfPSyVu95LtugPiTorg32h3KVJl9JdZlGxFzkcEPVpL4uPcymMzEXGmv0KTctDdKyO8mps5ylapd4jR3Jmnhmhbi1NkP4709wB3Nk7CReX7Ud3w1cPAh0y_BEU9PRZs'\n            },\n            {\n                id: '5',\n                title: 'Сохрани все важные ссылки',\n                subtitle: '',\n                textBody: 'Сохрани важные ссылки, чтобы не забыть прочитать их позже! Редактируй, добавляй теги, используй поиск по названиям и тегам!',\n                img: 'https://psv4.userapi.com/c848216/u27991797/docs/d11/f7c767e1e755/gramotnoe-motivatsionnoe-pismo.jpg?extra=Tq3QBjFGN3R8-BNut6Rh72XDW03LKVoUf8htMiFgUI_AokvJDqj7338GNQSPaTCWkEoRt-7VPw01DF12dRgUWeis1uVpIybMuxzKxU5To7o5Xel72A_IJMPj8CxV-W3_qRfeDmzzr8GNB5lOtn_ju5J6'\n            },\n\n        ];\n        return (\n            <div>\n                <div style={{flexGrow: 1}}>\n                    <Grid container spacing={3}>\n                        <Grid style={{textAlign: 'center'}} item xs={12} sm={12} >\n                            <Card>\n\n                                <CardContent>\n                                    <Typography variant=\"h5\">\n                                        ЗДЕСЬ БУДЕТ БЛОК С НОВОСТЯМИ\n                                    </Typography>\n                                    <Typography color=\"textSecondary\">\n                                        КОГДА-НИБУДЬ\n                                    </Typography>\n                                </CardContent>\n                            </Card>\n                        </Grid>\n                        {cardTextArray.map((cardBody) => {\n                            return (\n                                <Grid style={{textAlign: 'center'}} item xs={12} sm={4} key={cardBody.id}>\n                                    <Card>\n                                        {cardBody.img.length > 0 ? <CardMedia\n                                            component=\"img\"\n                                            alt=\"Contemplative Reptile\"\n                                            height=\"140\"\n                                            image={cardBody.img}\n                                            title=\"Contemplative Reptile\"\n                                        /> : null}\n\n                                        <CardContent style={{height: '130px'}}>\n                                            <Typography variant=\"h5\">\n                                                {cardBody.title}\n                                            </Typography>\n                                            <Typography color=\"textSecondary\">\n                                                {cardBody.subtitle}\n                                            </Typography>\n                                            <Typography variant=\"body1\" component=\"p\">\n                                                {cardBody.textBody}\n                                            </Typography>\n                                        </CardContent>\n                                    </Card>\n                                </Grid>\n                            )\n                        })}\n                    </Grid>\n                </div>\n            </div>\n        )\n    }\n}\n","export class Link {\n    public data:string;\n    constructor(data:string) {\n        this.data = data\n    }\n}\n\nexport class DataStorage {\n    public storage:any;\n\n    constructor(storage:any) {\n        this.storage = storage;\n    }\n\n    get getUserData() {\n        return this.storage.data;\n    }\n\n    add(data:string) {\n        this.storage.add(data);\n    }\n\n    logOut () {\n        this.storage.logOut();\n    }\n\n}\n","export class LocalStorage {\n    public data:string;\n    constructor() {\n        // @ts-ignore\n        this.data = JSON.parse(localStorage.getItem('data'));\n\n    }\n\n    add(data:any) {\n        this.data = data;\n        this.save();\n    }\n\n    logOut() {\n        localStorage.removeItem('data');\n    }\n\n    save() {\n        localStorage.setItem('data', JSON.stringify(this.data)); // stringify - преобразование объекта в строку\n    }\n\n\n}\n\n","export const serverApi = 'https://react-timetable-server.herokuapp.com';\n// https://react-timetable-server.herokuapp.com\n","import {serverApi} from \"../AppConstants\";\n\ninterface loginData {\n    email: string;\n    password: string\n}\n\n\nexport default class Http {\n\n    public url = serverApi;\n\n    public loginForToken (data: loginData, path: string) {\n        return fetch(this.url + path, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        });\n    }\n\n    public loginWithToken (token: string, path: string) {\n        return fetch(this.url + path, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n\n        });\n    }\n}\n","import {theme} from \"../Theme\";\nimport {CircularProgress, Typography} from \"@material-ui/core\";\nimport {MuiThemeProvider} from \"@material-ui/core/styles\";\nimport React from \"react\";\nimport {DataStorage} from \"../serverApi/dataStorage\";\nimport {LocalStorage} from \"../serverApi/localStorage\";\nimport Http from \"../serverApi/http\";\n\nexport const LoadingComponent = (\n    <MuiThemeProvider theme={theme}>\n        <CircularProgress/>\n        <div>\n            <Typography variant={\"h6\"}>Пожалуйста, подождите. Данные обновляются.</Typography>\n        </div>\n    </MuiThemeProvider>\n)\n\nexport function checkUserData () {\n    let flag: boolean;\n    const storage = new DataStorage(new LocalStorage());\n    const http = new Http();\n    if (storage.getUserData !== null) {\n        http.loginWithToken(storage.getUserData, '/user')\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    console.log(result)\n                    if (result.email !== undefined) {\n                        console.log('true')\n                        flag = true\n                        return (flag)\n\n                    } else {\n                        console.log(false)\n                        storage.logOut()\n                        flag = false\n                        return (flag)\n\n                    }\n                }, (error) => {\n                    console.log(error)\n                }\n            );\n    } else {\n        flag = false\n        return (flag)\n    }\n}\n","import * as React from \"react\";\nimport {DataStorage} from \"../serverApi/dataStorage\";\nimport {LocalStorage} from \"../serverApi/localStorage\";\nimport Http from \"../serverApi/http\";\nimport {LoadingComponent} from \"../components/UniversalComponents\";\nimport {AppBar, Card, CardContent, Grid, Tab, Tabs, Toolbar, Typography} from \"@material-ui/core\";\nimport SwipeableViews from 'react-swipeable-views';\nimport {theme} from \"../Theme\";\nimport {Dashboard, Fingerprint, ListAlt, Person, Security} from \"@material-ui/icons\";\n\ninterface AccountPageState {\n    isDataConfirmed: boolean | null,\n    data: AccountData,\n    tabValue: number\n}\n\ninterface AccountData {\n    email: string,\n    registrationDate: string,\n    password: string,\n    admin: boolean,\n    lastLoginDate: string\n}\n\nexport default class AccountPage extends React.Component<AccountPageState> {\n\n    state = {\n        isDataConfirmed: null,\n        tabValue: 0,\n        data: {email: '', registrationDate: '', password: '', admin: false, lastLoginDate: ''}\n    };\n\n    public theme: any;\n\n    componentDidMount(): void {\n        document.title = 'Аккаунт';\n        const storage = new DataStorage(new LocalStorage());\n        const http = new Http();\n        if (storage.getUserData !== null) {\n            http.loginWithToken(storage.getUserData, '/user')\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        if (result.email !== undefined) {\n                            this.setState({\n                                data: result\n                            }, () => {\n                                this.setState({\n                                    isDataConfirmed: true\n                                })\n                            })\n                        } else {\n                            this.setState({\n                                isDataConfirmed: false\n                            }, () => {\n                                storage.logOut()\n                            })\n                        }\n                    }, (error) => {\n                        console.log(error)\n                    }\n                );\n        } else {\n            this.setState({\n                isDataConfirmed: false\n            })\n        }\n    }\n\n    public handleChangeTab = (event: React.ChangeEvent<{}>, newValue: number) => {\n        this.setState({\n            tabValue: newValue\n        })\n    };\n\n    public handleChangeIndexTab = (index: number) => {\n        this.setState({\n            tabValue: index\n        })\n    }\n\n    componentWillUnmount(): void {\n    }\n\n    public render() {\n\n        const stylesForTab = {\n            textTransform: 'none',\n            minWidth: 72,\n        } as React.CSSProperties;\n\n        const tabsArray = [\n            {label: 'Учетная запись', icon: <Person/>},\n            {label: 'Мое расписание', icon: <ListAlt/>},\n            {label: 'Безопасность', icon: <Security/>},\n            {label: 'Сервисы', icon: <Dashboard/>},\n            {label: 'Админ', icon: <Fingerprint/>, admin: true}\n        ];\n\n        const mobileMenu = (\n            <AppBar position=\"static\" color=\"default\" className=\"topBarMin top\">\n                <Tabs\n                    value={this.state.tabValue}\n                    onChange={this.handleChangeTab}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    variant=\"fullWidth\"\n                >\n                    {tabsArray.map((tabData: any) => {\n                        if (this.state.data.admin === true && tabData.label === 'Админ') {\n                            return (\n                                <Tab icon={tabData.icon} style={stylesForTab}\n                                     key={tabData.label}/>\n                            )\n                        } else {\n                            if (tabData.admin === undefined) {\n                                return (\n                                    <Tab icon={tabData.icon} style={stylesForTab}\n                                         key={tabData.label}/>\n                                )\n                            }\n                        }\n                    })}\n                </Tabs>\n            </AppBar>\n        );\n\n        const fullMenu = (\n            <AppBar position=\"static\" color=\"default\" className=\"topBarMax\">\n                <Tabs\n                    value={this.state.tabValue}\n                    onChange={this.handleChangeTab}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    variant=\"fullWidth\"\n                >\n                    {tabsArray.map((tabData: any) => {\n                        if (this.state.data.admin === true && tabData.label === 'Админ') {\n                            return (\n                                <Tab label={tabData.label} icon={tabData.icon} style={stylesForTab}\n                                     key={tabData.label}/>\n                            )\n                        } else {\n                            if (tabData.admin === undefined) {\n                                return (\n                                    <Tab label={tabData.label} icon={tabData.icon} style={stylesForTab}\n                                         key={tabData.label}/>\n                                )\n                            }\n                        }\n                    })}\n                </Tabs>\n            </AppBar>\n        );\n\n        const accountDataComponent = (\n            <div style={{marginTop: '1rem', overflow: 'hidden'}}>\n                <Grid container spacing={3}>\n                    <Grid style={{textAlign: 'center'}} item xs={6} sm={6}>\n\n                        <Typography variant=\"body1\">\n                            Email:\n                        </Typography>\n\n                    </Grid>\n                    <Grid style={{textAlign: 'center'}} item xs={6} sm={6}>\n\n                        <Typography variant=\"body1\">\n                            {this.state.data.email}\n                        </Typography>\n\n                    </Grid>\n                </Grid>\n            </div>\n        )\n\n        const accountPageBody = (\n            <div>\n                {mobileMenu}\n                {fullMenu}\n                <SwipeableViews axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'} index={this.state.tabValue}\n                                onChangeIndex={this.handleChangeIndexTab}>\n                    {this.state.isDataConfirmed ? <div dir={theme.direction}>{accountDataComponent}</div> : <div></div>}\n                    <div dir={theme.direction}>text2</div>\n                    <div dir={theme.direction}>text3</div>\n                    <div dir={theme.direction}>text4</div>\n                    <div dir={theme.direction}>admin</div>\n                </SwipeableViews>\n            </div>\n        );\n\n        const waitingComponent = (\n            <div>\n                <Typography variant={\"h6\"}>Пожалуйста, подождите. Данные обновляются.</Typography>\n            </div>\n        );\n\n\n        return (\n            <div>\n                {this.state.isDataConfirmed === null ? LoadingComponent : null}\n                {this.state.data !== undefined ? accountPageBody : waitingComponent}\n            </div>\n        )\n    }\n}\n","import HelpPage from \"./HelpPage\";\nimport StartPage from \"./StartPage\";\nimport AccountPage from \"./AccountPage\";\n\nexport const pagesForMenus =  {\n    pages:\n        [\n            {path: '/', buttonText: 'Главная', isDataConfirmed: false,  component: StartPage},\n            {path: '/help', buttonText: 'Помощь', isDataConfirmed: false, component: HelpPage},\n            {path: '/account', buttonText: 'Аккаунт', isDataConfirmed: true, component: AccountPage},\n        ]\n};\n","import React from 'react'\nimport {\n    Button, CircularProgress,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle, Fade,\n    TextField, Typography\n} from \"@material-ui/core\";\nimport Http from \"../../serverApi/http\";\nimport {DataStorage} from \"../../serverApi/dataStorage\";\nimport {LocalStorage} from \"../../serverApi/localStorage\";\n\ninterface DialogLoginFormProps {\n    mobile: boolean\n    isLoginSuccess: any;\n}\n\ninterface DialogLoginFormState {\n    openDialogWindow: boolean,\n    email: string,\n    password: string,\n    isLoading: boolean\n    loginState: string\n}\n\nexport class DialogLoginForm extends React.Component<DialogLoginFormProps, DialogLoginFormState> {\n\n    state = {\n        openDialogWindow: false,\n        email: '',\n        password: '',\n        isLoading: false,\n        loginState: ''\n    };\n\n    public handleOpenLoginDialog = () => {\n        this.setState({\n            openDialogWindow: true\n        })\n    };\n\n    public handleClose = () => {\n        this.setState({\n            openDialogWindow: false,\n\n        })\n    };\n\n    public login = () => {\n        this.setState({\n            isLoading: true\n        });\n        const http = new Http();\n        const data = {\n            email: this.state.email,\n            password: this.state.password,\n        };\n        http.loginForToken(data, '/auth')\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    if (result.token === undefined){\n                        this.setState({\n                            loginState: 'Email или пароль введены неверно'\n                        })\n                    } else {\n                        this.setState({\n                            loginState: 'Вы успешно авторизованы. Сейчас Вы будете перенаправлены'\n                        }, ()=>{\n                            const storage = new DataStorage(new LocalStorage());\n                            storage.add(result.token);\n                            http.loginWithToken(result.token, '/user')\n                                .then(res => res.json())\n                                .then (\n                                    (result)=>{\n                                        // КОНЕЧНЫЕ ДАННЫЕ\n                                        this.setState({\n                                            openDialogWindow: false\n                                        });\n                                        this.props.isLoginSuccess(result)\n\n                                    }, (error) => {\n                                        console.log(error)\n                                    }\n                                )\n                        })\n                    }\n                    this.setState({\n                        isLoading: false\n                    })\n                },\n                (error) => {\n                    console.log(error)\n                }\n            );\n    };\n\n    public handleEmailChange = (event: any) => {\n        this.setState({\n            email: event.target.value\n        })\n    };\n\n    public handlePasswordChange = (event: any) => {\n        this.setState({\n            password: event.target.value\n        })\n    };\n\n    public render() {\n        return (\n            <div>\n\n                {this.props.mobile === true ?\n                    <div onClick={this.handleOpenLoginDialog} style={{height: '2rem', width: '7rem'}}>\n                        <Typography variant=\"button\">Вход</Typography>\n                    </div>\n                    :\n                    <Button color=\"secondary\" onClick={this.handleOpenLoginDialog}>\n                        Вход\n                    </Button>}\n\n                <Dialog open={this.state.openDialogWindow} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\">\n                    <DialogTitle id=\"form-dialog-title\">Вход</DialogTitle>\n                    <div style={{marginLeft: 'auto', marginRight: 'auto'}}>\n                        {this.state.isLoading ? <CircularProgress/> : null}\n                    </div>\n                    <DialogContent>\n                        <DialogContentText>\n                            Введите Email и пароль\n                        </DialogContentText>\n\n                        <Typography variant=\"button\">{this.state.loginState}</Typography>\n\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"login\"\n                            label={<Typography>Email <span style={{color: 'red'}}>*</span></Typography>}\n                            type=\"email\"\n                            fullWidth\n                            onChange={this.handleEmailChange}\n                        />\n                        <TextField\n                            margin=\"dense\"\n                            id=\"pass\"\n                            label={<Typography>Пароль <span style={{color: 'red'}}>*</span></Typography>}\n                            type=\"password\"\n                            fullWidth\n                            onChange={this.handlePasswordChange}\n                        />\n                    </DialogContent>\n\n                    <DialogActions>\n\n                        <Button onClick={this.login} color=\"primary\">\n                            Войти\n                        </Button>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            Отмена\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport {\n    Button, CircularProgress,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle, Fade,\n    TextField, Typography\n} from \"@material-ui/core\";\nimport Http from \"../../serverApi/http\";\nimport {DataStorage} from \"../../serverApi/dataStorage\";\nimport {LocalStorage} from \"../../serverApi/localStorage\";\nimport CustomizedSnackbars from \"./SnackBar\";\n\ninterface DialogRegisterFormProps {\n    mobile: boolean\n    isLoginSuccess: any;\n}\n\ninterface DialogRegisterFormState {\n    openDialogWindow: boolean,\n    email: string,\n    password: string,\n    confirmPassword: string,\n    isLoading: boolean,\n    registrationState: string\n}\n\nexport class DialogRegisterForm extends React.Component<DialogRegisterFormProps, DialogRegisterFormState> {\n\n    state = {\n        openDialogWindow: false,\n        email: '',\n        password: '',\n        confirmPassword: '',\n        isLoading: false,\n        registrationState: ''\n    };\n\n    public handleOpenLoginDialog = () => {\n        this.setState({\n            openDialogWindow: true\n        })\n    };\n\n\n    public handleClose = () => {\n\n        this.setState({\n            openDialogWindow: false,\n\n        })\n    };\n\n    public login = () => {\n        this.setState({\n            isLoading: true\n        });\n        const http = new Http();\n        const data = {\n            email: this.state.email,\n            password: this.state.password,\n            confirmPassword: this.state.confirmPassword\n        };\n        http.loginForToken(data, '/registration')\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isLoading: false\n                    });\n                    if (result === 'Passwords Not Confirmed') {\n                        console.log(result);\n                        this.setState({\n                            registrationState: 'Введенные пароли не совпадают'\n                        })\n                    }\n\n                    if (result.token !== undefined) {\n                        this.setState({\n                            registrationState: 'Вы успешно зарегистрированы. Сейчас Вы будете перенаправлены'\n                        }, () => {\n                            const storage = new DataStorage(new LocalStorage());\n                            storage.add(result.token);\n                            http.loginWithToken(result.token, '/user')\n                                .then(res => res.json())\n                                .then(\n                                    (result) => {\n                                        // КОНЕЧНЫЕ ДАННЫЕ\n                                        this.setState({\n                                            openDialogWindow: false\n                                        });\n                                        this.props.isLoginSuccess(result)\n\n                                    }, (error) => {\n                                        console.log(error)\n                                    }\n                                )\n                        })\n                    }\n\n                    if (result === 'This email already registered') {\n                        this.setState({\n                            registrationState: 'Этот Email уже занят'\n                        })\n                    }\n\n                    if (result === '8 symbols') {\n                        this.setState({\n                            registrationState: 'Длина пароля должна быть не менее 8 символов'\n                        })\n                    }\n                },\n                (error) => {\n                    console.log(error)\n                }\n            );\n    };\n\n    public handleEmailChange = (event: any) => {\n        this.setState({\n            email: event.target.value\n        })\n    };\n\n    public handlePasswordChange = (event: any) => {\n        this.setState({\n            password: event.target.value\n        })\n    };\n\n    public handleConfirmPasswordChange = (event: any) => {\n        this.setState({\n            confirmPassword: event.target.value\n        })\n    };\n\n    public render() {\n        return (\n            <div>\n\n                {this.props.mobile === true ?\n                    <div onClick={this.handleOpenLoginDialog} style={{height: '2rem', width: '7rem'}}>\n                        <Typography variant=\"button\">Регистрация</Typography>\n                    </div>\n                    :\n                    <Button color=\"secondary\" onClick={this.handleOpenLoginDialog}>\n                        Регистрация\n                    </Button>}\n\n                <Dialog open={this.state.openDialogWindow} onClose={this.handleClose}\n                        aria-labelledby=\"form-dialog-title\">\n                    <DialogTitle id=\"form-dialog-title\">Регистрация</DialogTitle>\n                    <div style={{marginLeft: 'auto', marginRight: 'auto'}}>\n                        {this.state.isLoading ? <CircularProgress/> : null}\n                    </div>\n                    <DialogContent>\n                        <DialogContentText>\n                            Для регистрации необходимо ввести свой email и пароль. Введенные пароли должны совпадать\n                        </DialogContentText>\n\n                        <Typography variant=\"button\">{this.state.registrationState}</Typography>\n\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"login\"\n                            label={<Typography>Email <span style={{color: 'red'}}>*</span></Typography>}\n                            type=\"email\"\n                            fullWidth\n                            onChange={this.handleEmailChange}\n                        />\n                        <TextField\n                            margin=\"dense\"\n                            id=\"pass\"\n                            label={<Typography>Пароль <span style={{color: 'red'}}>*</span></Typography>}\n                            type=\"password\"\n                            fullWidth\n                            onChange={this.handlePasswordChange}\n                        />\n                        <TextField\n                            margin=\"dense\"\n                            id=\"confirmPass\"\n                            label={<Typography>Повторите пароль <span style={{color: 'red'}}>*</span></Typography>}\n                            type=\"password\"\n                            fullWidth\n                            onChange={this.handleConfirmPasswordChange}\n                        />\n                    </DialogContent>\n\n                    <DialogActions>\n                        <Button onClick={this.login} color=\"primary\">\n                            Зарегистрироваться\n                        </Button>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            Отмена\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        )\n    }\n}\n","import {Switch, Route, Link, NavLink, Redirect} from 'react-router-dom'\nimport React from 'react'\nimport {AppBar, Button, CircularProgress, Container, Menu, Toolbar, Typography} from \"@material-ui/core\";\nimport {MuiThemeProvider} from '@material-ui/core/styles';\nimport {theme} from \"../Theme\";\nimport MenuIcon from '@material-ui/icons/Menu';\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport {pagesForMenus} from \"../pages/AppPagesList\";\nimport {DialogLoginForm} from \"./Dialogs/DialogLoginForm\";\nimport {DialogRegisterForm} from \"./Dialogs/DialogRegisterForm\";\nimport {DataStorage} from \"../serverApi/dataStorage\";\nimport {LocalStorage} from \"../serverApi/localStorage\";\nimport Http from \"../serverApi/http\";\nimport {Input, Star} from \"@material-ui/icons\";\nimport CustomizedSnackbars from \"./Dialogs/SnackBar\";\nimport StartPage from \"../pages/StartPage\";\nimport HelpPage from \"../pages/HelpPage\";\n\n\ninterface pageData {\n    path: string;\n    buttonText: string;\n    isDataConfirmed: boolean;\n    component: any\n}\n\ninterface MainState {\n    menuEl: any,\n    mobileOpenDialogLoginForm: any,\n    isDataConfirmed: any,\n    data: any\n}\n\nexport default class Main extends React.Component {\n\n    public storage = new DataStorage(new LocalStorage());\n\n    public state: MainState = {\n        menuEl: null,\n        mobileOpenDialogLoginForm: false,\n        isDataConfirmed: null, // флаг становится true только в том случае, если пришли данные по токену. Флаг прокидывается в детей и внутри проходят запросы\n        data: null\n    };\n\n    // вспомогательное для меню\n    public handleClick = (evt: React.MouseEvent<HTMLButtonElement>) => {\n        this.setState({\n            menuEl: evt.currentTarget\n        })\n    };\n\n    // открытие - закрытие меню на мобильной версии\n    public handleClose = () => {\n        this.setState({\n            menuEl: null\n        })\n    };\n\n    // поднимается через пропсы с форм регистрации и логина\n    public isLoginSuccess = (data: any) => {\n        this.setState({\n            data: data\n        }, () => {\n            this.setState({\n                isDataConfirmed: true\n            })\n        })\n    };\n\n    // обработчик кнопки выхода\n    public handleExitButton = () => {\n        this.storage.logOut();\n        this.setState({\n            isDataConfirmed: false,\n            data: null\n        })\n    };\n\n    // событие изменения страницы - проверка данных\n    public changePage = () => {\n        const storage = new DataStorage(new LocalStorage());\n        const http = new Http();\n        if (storage.getUserData !== null) {\n            http.loginWithToken(storage.getUserData, '/user')\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        if (result.email !== undefined) {\n                            this.setState({\n                                data: result\n                            }, () => {\n                                this.setState({\n                                    isDataConfirmed: true\n                                })\n                            })\n                        } else {\n                            this.setState({\n                                isDataConfirmed: false\n                            }, () => {\n                                storage.logOut()\n                            })\n                        }\n                    }, (error) => {\n                        console.log(error)\n                    }\n                );\n        } else {\n            this.setState({\n                isDataConfirmed: false\n            })\n        }\n    }\n\n    componentDidMount(): void {\n        const storage = new DataStorage(new LocalStorage());\n        const http = new Http();\n        if (storage.getUserData !== null) {\n            http.loginWithToken(storage.getUserData, '/user')\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        if (result.email !== undefined) {\n                            this.setState({\n                                data: result\n                            }, () => {\n                                this.setState({\n                                    isDataConfirmed: true\n                                })\n                            })\n                        } else {\n                            this.setState({\n                                isDataConfirmed: false\n                            }, () => {\n                                storage.logOut()\n                            })\n                        }\n                    }, (error) => {\n                        console.log(error)\n                    }\n                );\n        } else {\n            this.setState({\n                isDataConfirmed: false\n            })\n        }\n    }\n\n    public render() {\n\n        const isDataConfirmedMobileMenu = (\n            <AppBar>\n                <Toolbar className=\"topBarMin\">\n                    <Button color=\"secondary\" aria-controls=\"customized-menu\" aria-haspopup=\"true\"\n                            onClick={this.handleClick}>\n                        <MenuIcon/>\n                    </Button>\n                    <Menu\n                        id=\"customized-menu\" anchorEl={this.state.menuEl} keepMounted\n                        open={Boolean(this.state.menuEl)} onClose={this.handleClose}\n                        style={{marginTop: '2rem'}}>\n                        {/* ОТДЕЛЬНО ВОЗВРАЩАЕТСЯ КНОПКА ВХОДА */}\n                        <div>\n                            {pagesForMenus.pages.map((dataPage: pageData) => {\n                                    return (\n                                        <div key={dataPage.buttonText + 'logged'}  onClick={this.changePage}>\n                                            <NavLink to={dataPage.path} style={{color: \"black\"}}\n                                                     activeStyle={{color: \"black\", fontWeight: \"bold\"}}>\n                                                <MenuItem onClick={this.handleClose}>\n                                                    <Typography\n                                                        variant=\"button\">{dataPage.buttonText}</Typography>\n                                                </MenuItem>\n                                            </NavLink>\n                                        </div>\n                                    )\n\n                                }\n                            )}\n                            <MenuItem onClick={this.handleExitButton}>\n                                <Input/>&nbsp;&nbsp;Выйти\n                            </MenuItem>\n                        </div>\n                    </Menu>\n                    {this.state.data === null ? null :\n                        <Typography style={{marginLeft: 'auto'}}\n                                    variant=\"subtitle2\">Привет, {this.state.data.email}</Typography>}\n                </Toolbar>\n            </AppBar>\n        )\n\n        const isDataNotConfirmedMobileMenu = (\n            <AppBar>\n                <Toolbar className=\"topBarMin\">\n                    <Button color=\"secondary\" aria-controls=\"customized-menu\" aria-haspopup=\"true\"\n                            onClick={this.handleClick}>\n                        <MenuIcon/>\n                    </Button>\n                    <Menu\n                        id=\"customized-menu\" anchorEl={this.state.menuEl} keepMounted\n                        open={Boolean(this.state.menuEl)} onClose={this.handleClose}\n                        style={{marginTop: '2rem'}}>\n                        {pagesForMenus.pages.map((dataPage: pageData) => {\n                            if (dataPage.isDataConfirmed === false){\n                                return (\n                                    <div key={dataPage.buttonText}  onClick={this.changePage}>\n                                        <NavLink to={dataPage.path} style={{color: \"black\"}}\n                                                 activeStyle={{color: \"black\", fontWeight: \"bold\"}}>\n                                            <MenuItem onClick={this.handleClose}>\n                                                <Typography\n                                                    variant=\"button\">{dataPage.buttonText}</Typography>\n                                            </MenuItem>\n                                        </NavLink>\n                                    </div>\n                                )\n                            }\n\n                            }\n                        )}\n                        {/* ОТДЕЛЬНО ВОЗВРАЩАЕТСЯ КНОПКА ВХОДА */}\n\n                        <div>\n                            <MenuItem>\n                                <DialogLoginForm mobile={true} isLoginSuccess={this.isLoginSuccess}/>\n                            </MenuItem>\n                        </div>\n                        <div>\n                            <MenuItem>\n                                <DialogRegisterForm mobile={true} isLoginSuccess={this.isLoginSuccess}/>\n                            </MenuItem>\n                        </div>\n\n                    </Menu>\n                </Toolbar>\n            </AppBar>\n        );\n\n\n        const isLoadingComponent = (\n            <MuiThemeProvider theme={theme}>\n                <AppBar>\n                    <Toolbar style={{textAlign: 'right'}}>\n                        <CircularProgress color=\"inherit\"/>\n                    </Toolbar>\n                </AppBar>\n            </MuiThemeProvider>\n        );\n\n        const isDataConfirmed = (\n            <Switch>\n                <MuiThemeProvider theme={theme}>\n                    {/* МЕНЮ В МОБИЛЬНОЙ ВЕРСИИ */}\n\n                    {isDataConfirmedMobileMenu}\n\n                    {/* МЕНЮ В ПОЛНОЙ ВЕРСИИ */}\n                    <AppBar>\n                        <Toolbar className=\"topBarMax\" style={{textAlign: 'right'}}>\n                            {/* ОТДЕЛЬНО ВОЗВРАЩАЕТСЯ КНОПКА ВХОДА */}\n\n                            {pagesForMenus.pages.map((dataPage: pageData) => {\n                                return (\n                                    <div key={dataPage.buttonText + 'logged'}>\n                                        <Link to={dataPage.path}>\n                                            <Button color=\"secondary\"  onClick={this.changePage}>\n                                                {dataPage.buttonText}\n                                            </Button>\n                                        </Link>\n                                    </div>\n                                )\n                            })}\n                            <Button onClick={this.handleExitButton} color=\"secondary\">\n                                <Input/>&nbsp;&nbsp;ВЫХОД\n                            </Button>\n                            &nbsp;\n                            {this.state.data === null ? null :\n                                <Typography style={{marginLeft: 'auto'}}\n                                            variant=\"subtitle2\">Привет, {this.state.data.email}</Typography>}\n                        </Toolbar>\n                    </AppBar>\n\n                    {/*{ ТЕЛО ВСЕЙ СТРАНИЦЫ }*/}\n                    <Container>\n                        <div style={{marginTop: '5rem'}}>\n                            {pagesForMenus.pages.map((dataPage: pageData) => {\n                                return (\n                                    <div key={dataPage.buttonText}>\n                                        <Route exact path={dataPage.path} component={dataPage.component}/>\n                                    </div>\n                                )\n                            })}\n                            <Redirect to=\"/\"/>\n                        </div>\n                    </Container>\n                </MuiThemeProvider>\n                <StartPage/>\n            </Switch>\n        );\n\n        const isDataNotConfrimed = (\n            <Switch>\n                <MuiThemeProvider theme={theme}>\n                        {/* МЕНЮ В МОБИЛЬНОЙ ВЕРСИИ */}\n\n                        {isDataNotConfirmedMobileMenu}\n                        {/* МЕНЮ В ПОЛНОЙ ВЕРСИИ */}\n                        <AppBar>\n                            <Toolbar className=\"topBarMax\" style={{textAlign: 'right'}}>\n                                {/* ОТДЕЛЬНО ВОЗВРАЩАЕТСЯ КНОПКА ВХОДА */}\n\n                                {pagesForMenus.pages.map((dataPage: pageData) => {\n                                    if (dataPage.isDataConfirmed === false) {\n                                        return (\n                                            <div key={dataPage.buttonText}>\n                                                <Link to={dataPage.path}>\n                                                    <Button color=\"secondary\" onClick={this.changePage}>\n                                                        {dataPage.buttonText}\n                                                    </Button>\n                                                </Link>\n                                            </div>\n                                        )\n                                    }\n                                })}\n\n                                <DialogLoginForm mobile={false} isLoginSuccess={this.isLoginSuccess}/>\n                                <DialogRegisterForm mobile={false} isLoginSuccess={this.isLoginSuccess}/>\n\n                            </Toolbar>\n                        </AppBar>\n\n                        {/* ТЕЛО ВСЕЙ СТРАНИЦЫ */}\n                        <Container>\n                            <div style={{marginTop: '5rem'}}>\n                                {pagesForMenus.pages.map((dataPage: pageData) => {\n                                    if (dataPage.isDataConfirmed === false){\n                                        return (\n                                            <div key={dataPage.buttonText}>\n                                                <Route exact path={dataPage.path} component={dataPage.component}/>\n                                            </div>\n                                        )\n                                    }\n                                })}\n                                <Redirect to=\"/\"/>\n                            </div>\n                        </Container>\n                </MuiThemeProvider>\n            </Switch>\n        );\n\n        // ВОЗВРАЩАЕТСЯ ЕСЛИ ОЖИДАНИЕ ЗАПРОСА\n        if (this.state.isDataConfirmed === null) {\n            return (isLoadingComponent)\n        }\n        // ВОЗВРАЩАЕТСЯ ЕСЛИ ДАННЫЕ НЕ ПРИШЛИ\n        if (!this.state.isDataConfirmed) {\n            return (isDataNotConfrimed)\n        } else {\n            return (isDataConfirmed)\n        }\n\n    }\n};\n","import React from 'react';\nimport './App.css';\nimport {BrowserRouter} from \"react-router-dom\";\nimport Main from \"./components/Main\";\n\nconst App: React.FC = () => {\n    return (\n        <BrowserRouter>\n            <Main/>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}