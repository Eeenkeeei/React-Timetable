{"version":3,"sources":["Theme.ts","pages/HelpPage.tsx","AppConstants.tsx","serverApi/http.ts","serverApi/dataStorage.ts","serverApi/localStorage.ts","components/UniversalComponents.tsx","pages/StartPage.tsx","pages/AccountPage.tsx","pages/AppPagesList.ts","components/Dialogs/DialogLoginForm.tsx","components/Dialogs/DialogRegisterForm.tsx","components/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","palette","common","black","white","background","paper","default","primary","light","main","dark","contrastText","secondary","error","text","disabled","hint","HelpPage","document","title","react","React","serverApi","Http","url","data","path","fetch","this","method","headers","Content-Type","body","JSON","stringify","token","Authorization","concat","DataStorage","storage","Object","classCallCheck","createClass","key","value","add","logOut","get","LocalStorage","parse","localStorage","getItem","save","removeItem","setItem","LoadingComponent","react_default","a","createElement","MuiThemeProvider","CircularProgress","Typography","variant","StartPage","state","news","_this2","getNewsList","then","res","json","result","setState","toConsumableArray","style","flexGrow","Grid","container","spacing","textAlign","item","xs","sm","length","CardContent","map","newsData","Card","_id","marginTop","header","id","subtitle","textBody","img","cardBody","CardMedia","component","alt","height","image","color","AccountPage","isDataConfirmed","tabValue","email","registrationDate","password","admin","lastLoginDate","handleChangeTab","event","newValue","_this","handleChangeIndexTab","index","http","getUserData","loginWithToken","undefined","console","log","_this3","stylesForTab","textTransform","minWidth","tabsArray","label","icon","Person","ListAlt","Security","Dashboard","Fingerprint","mobileMenu","AppBar","position","className","Tabs","onChange","indicatorColor","textColor","tabData","Tab","fullMenu","accountDataComponent","overflow","accountPageBody","lib_default","axis","direction","onChangeIndex","dir","waitingComponent","pagesForMenus","pages","buttonText","DialogLoginForm","_React$Component","_getPrototypeOf2","_len","arguments","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","openDialogWindow","isLoading","loginState","handleOpenLoginDialog","handleClose","login","loginForToken","props","isLoginSuccess","handleEmailChange","target","handlePasswordChange","inherits","mobile","onClick","width","MeetingRoom","Button","Dialog","open","onClose","aria-labelledby","DialogTitle","marginLeft","marginRight","DialogContent","DialogContentText","TextField","autoFocus","margin","type","fullWidth","DialogActions","Component","DialogRegisterForm","confirmPassword","registrationState","handleConfirmPasswordChange","PersonAdd","Main","menuEl","mobileOpenDialogLoginForm","handleClick","evt","currentTarget","handleExitButton","changePage","isDataConfirmedMobileMenu","Toolbar","aria-controls","aria-haspopup","Menu_default","Menu","anchorEl","keepMounted","Boolean","dataPage","react_router_dom","to","activeStyle","fontWeight","MenuItem","Icon","Input","isDataNotConfirmedMobileMenu","DialogLoginForm_DialogLoginForm","DialogRegisterForm_DialogRegisterForm","isLoadingComponent","react_router","Container","exact","StartPage_StartPage","isDataNotConfrimed","App","Main_Main","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cc04ecee.chunk.js","sourcesContent":["import {createMuiTheme} from \"@material-ui/core\";\n\nexport const theme = createMuiTheme({\n    \"palette\": {\n        \"common\": {\n            \"black\": \"#000\",\n            \"white\": \"#fff\"\n        },\n        \"background\": {\n            \"paper\": \"rgba(255, 255, 255, 1)\",\n            \"default\": \"#fafafa\"\n        },\n        \"primary\": {\n            \"light\": \"#40c4ff\",\n            \"main\": \"#039be5\",\n            \"dark\": \"rgba(74, 144, 226, 1)\",\n            \"contrastText\": \"#fff\"\n        },\n        \"secondary\": {\n            \"light\": \"#4ffcff\",\n            \"main\": \"#fff\",\n            \"dark\": \"#22c5bb\",\n            \"contrastText\": \"#fff\"\n        },\n        \"error\": {\n            \"light\": \"#2327e5\",\n            \"main\": \"#001df4\",\n            \"dark\": \"#0b18d3\",\n            \"contrastText\": \"#fff\"\n        },\n        \"text\": {\n            \"primary\": \"rgba(0, 0, 0, 0.87)\",\n            \"secondary\": \"rgba(0, 0, 0, 0.54)\",\n            \"disabled\": \"rgba(0, 0, 0, 0.38)\",\n            \"hint\": \"rgba(0, 0, 0, 0.38)\"\n        }\n    }\n});\n","import * as React from \"react\";\nimport {DataStorage} from \"../serverApi/dataStorage\";\nimport {LocalStorage} from \"../serverApi/localStorage\";\nimport Http from \"../serverApi/http\";\n\nexport default class HelpPage extends React.Component {\n\n\n\n    public render() {\n        document.title = 'Помощь';\n\n        return (\n            <div>\n               HelpPage\n\n            </div>\n        )\n    }\n}\n","export const serverApi = 'https://react-timetable-server.herokuapp.com';\n// https://react-timetable-server.herokuapp.com\n","import {serverApi} from \"../AppConstants\";\n\ninterface loginData {\n    email: string;\n    password: string\n}\n\n\nexport default class Http {\n\n    public url = serverApi;\n\n    public loginForToken (data: loginData, path: string) {\n        return fetch(this.url + path, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        });\n    }\n\n    public loginWithToken (token: string, path: string) {\n        return fetch(this.url + path, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n\n        });\n    }\n\n    public getNewsList (path: string){\n        return fetch(this.url + path, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n        });\n    }\n}\n","export class Link {\n    public data:string;\n    constructor(data:string) {\n        this.data = data\n    }\n}\n\nexport class DataStorage {\n    public storage:any;\n\n    constructor(storage:any) {\n        this.storage = storage;\n    }\n\n    get getUserData() {\n        return this.storage.data;\n    }\n\n    add(data:string) {\n        this.storage.add(data);\n    }\n\n    logOut () {\n        this.storage.logOut();\n    }\n\n}\n","export class LocalStorage {\n    public data:string;\n    constructor() {\n        // @ts-ignore\n        this.data = JSON.parse(localStorage.getItem('data'));\n\n    }\n\n    add(data:any) {\n        this.data = data;\n        this.save();\n    }\n\n    logOut() {\n        localStorage.removeItem('data');\n    }\n\n    save() {\n        localStorage.setItem('data', JSON.stringify(this.data)); // stringify - преобразование объекта в строку\n    }\n\n\n}\n\n","import {theme} from \"../Theme\";\nimport {CircularProgress, Typography} from \"@material-ui/core\";\nimport {MuiThemeProvider} from \"@material-ui/core/styles\";\nimport React from \"react\";\nimport {DataStorage} from \"../serverApi/dataStorage\";\nimport {LocalStorage} from \"../serverApi/localStorage\";\nimport Http from \"../serverApi/http\";\n\nexport const LoadingComponent = (\n    <MuiThemeProvider theme={theme}>\n        <CircularProgress/>\n        <div>\n            <Typography variant={\"h6\"}>Пожалуйста, подождите. Данные обновляются.</Typography>\n        </div>\n    </MuiThemeProvider>\n)\n\nexport function checkUserData () {\n    let flag: boolean;\n    const storage = new DataStorage(new LocalStorage());\n    const http = new Http();\n    if (storage.getUserData !== null) {\n        http.loginWithToken(storage.getUserData, '/user')\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    console.log(result)\n                    if (result.email !== undefined) {\n                        console.log('true')\n                        flag = true\n                        return (flag)\n\n                    } else {\n                        console.log(false)\n                        storage.logOut()\n                        flag = false\n                        return (flag)\n\n                    }\n                }, (error) => {\n                    console.log(error)\n                }\n            );\n    } else {\n        flag = false\n        return (flag)\n    }\n}\n","import * as React from \"react\";\nimport {Card, CardContent, CardMedia, Grid, Typography} from \"@material-ui/core\";\nimport {DataStorage} from \"../serverApi/dataStorage\";\nimport {LocalStorage} from \"../serverApi/localStorage\";\nimport Http from \"../serverApi/http\";\nimport {LoadingComponent} from \"../components/UniversalComponents\";\n\ninterface newsData {\n    _id: string\n    header: string,\n    body: string,\n    img: string\n}\n\nexport default class StartPage extends React.Component {\n\n    state = {\n        news: []\n    }\n\n    public componentDidMount(): void {\n        const http = new Http();\n        http.getNewsList('/getNewsList')\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        news: [...result]\n                    })\n                }\n            )\n    }\n\n\n    public render() {\n        document.title = 'Стартовая страница';\n\n        const NewsBlock = () => {\n            this.state.news.map((newsData: newsData) => {\n                // @ts-ignore\n                return (\n                    <Card>\n                        <CardContent>\n                            <Typography variant=\"h6\">{newsData.header}</Typography>\n                        </CardContent>\n                        <CardContent>\n                            <Typography variant=\"body1\">{newsData.body}</Typography>\n                        </CardContent>\n                    </Card>\n                )\n            })\n        };\n\n        const cardTextArray = [\n            {\n                id: '0',\n                title: 'Задание на дом',\n                subtitle: '',\n                textBody: 'Добавь домашнее задание на любую дату',\n                img: 'https://1.bp.blogspot.com/-rIHSvpNC0ac/W7AMioDMmZI/AAAAAAAATEY/4Kw38DZpWV0Fry7vz29PaO0YMm5qwy5sQCK4BGAYYCw/w1200-h630-p-k-no-nu/IMedia9_Writing.jpg'\n            },\n            {\n                id: '1',\n                title: 'Новости',\n                subtitle: '',\n                textBody: 'Получай всегда актуальные новости КАИ и не только',\n                img: 'https://i.imgur.com/plWb1GA.jpg'\n            },\n            {\n                id: '2',\n                title: 'Уведомления',\n                subtitle: 'Псс... хочешь немного уведомлений?',\n                textBody: 'Отклоняй надоедливые уведомления каждый раз, когда они почему-то приходят',\n                img: 'http://www.twseo.com.tw/wp-content/uploads/2018/05/a3749ad203d8f65ac6290fde65778583.jpeg'\n            },\n            {\n                id: '3',\n                title: 'Внеси собственное расписание',\n                subtitle: '',\n                textBody: 'Сервис позволяет тебе внести свое расписание, записывать задания на каждый отдельный предмет и отмечать, если оно было уже выполнено!',\n                img: 'https://miro.medium.com/max/4043/0*gzqObH33C3zVLxKg.jpg'\n            },\n            {\n                id: '4',\n                title: 'Следи за своими задачами',\n                subtitle: '',\n                textBody: 'Внеси свои задачи, чтобы не забыть, что нужно сделать. Редактируй их, отмечай выполненные и просматривай их в отдельном хранилище!',\n                img: 'https://i.imgur.com/plWb1GA.jpg'\n            },\n            {\n                id: '5',\n                title: 'Сохрани все важные ссылки',\n                subtitle: '',\n                textBody: 'Сохрани важные ссылки, чтобы не забыть прочитать их позже! Редактируй, добавляй теги, используй поиск по названиям и тегам!',\n                img: 'https://i.imgur.com/plWb1GA.jpg'\n            },\n\n        ];\n        return (\n            <div>\n                <div style={{flexGrow: 1}}>\n                    <Grid container spacing={3}>\n                        <Grid style={{textAlign: 'center'}} item xs={12} sm={12}>\n\n                                {this.state.news.length === 0 ?\n                                    <CardContent>\n                                        {LoadingComponent}\n                                    </CardContent> :\n                                    <div>\n                                        {this.state.news.map((newsData: newsData) => {\n                                            return (\n                                                <Card key={newsData._id} style={{ marginTop: '1rem'}}>\n                                                    <CardContent>\n                                                        <Typography variant=\"h6\">{newsData.header}</Typography>\n                                                    </CardContent>\n                                                    <CardContent>\n                                                        <Typography variant=\"body1\">{newsData.body}</Typography>\n                                                    </CardContent>\n                                                </Card>\n                                            )\n                                        })}\n                                    </div>\n                                }\n\n                        </Grid>\n                        {cardTextArray.map((cardBody) => {\n                            return (\n                                <Grid style={{textAlign: 'center'}} item xs={12} sm={4} key={cardBody.id}>\n                                    <Card>\n                                        {cardBody.img.length > 0 ? <CardMedia\n                                            component=\"img\"\n                                            alt=\"Contemplative Reptile\"\n                                            height=\"140\"\n                                            image={cardBody.img}\n                                            title=\"Contemplative Reptile\"\n                                        /> : null}\n\n                                        <CardContent style={{height: '130px'}}>\n                                            <Typography variant=\"h5\">\n                                                {cardBody.title}\n                                            </Typography>\n                                            <Typography color=\"textSecondary\">\n                                                {cardBody.subtitle}\n                                            </Typography>\n                                            <Typography variant=\"body1\" component=\"p\">\n                                                {cardBody.textBody}\n                                            </Typography>\n                                        </CardContent>\n                                    </Card>\n                                </Grid>\n                            )\n                        })}\n                    </Grid>\n                </div>\n            </div>\n        )\n    }\n}\n","import * as React from \"react\";\nimport {DataStorage} from \"../serverApi/dataStorage\";\nimport {LocalStorage} from \"../serverApi/localStorage\";\nimport Http from \"../serverApi/http\";\nimport {LoadingComponent} from \"../components/UniversalComponents\";\nimport {AppBar, Card, CardContent, Grid, Tab, Tabs, Toolbar, Typography} from \"@material-ui/core\";\nimport SwipeableViews from 'react-swipeable-views';\nimport {theme} from \"../Theme\";\nimport {Dashboard, Fingerprint, ListAlt, Person, Security} from \"@material-ui/icons\";\n\ninterface AccountPageState {\n    isDataConfirmed: boolean | null,\n    data: AccountData,\n    tabValue: number\n}\n\ninterface AccountData {\n    email: string,\n    registrationDate: string,\n    password: string,\n    admin: boolean,\n    lastLoginDate: string\n}\n\nexport default class AccountPage extends React.Component<AccountPageState> {\n\n    state = {\n        isDataConfirmed: null,\n        tabValue: 0,\n        data: {email: '', registrationDate: '', password: '', admin: false, lastLoginDate: ''}\n    };\n\n    public theme: any;\n\n    componentDidMount(): void {\n        document.title = 'Аккаунт';\n        const storage = new DataStorage(new LocalStorage());\n        const http = new Http();\n        if (storage.getUserData !== null) {\n            http.loginWithToken(storage.getUserData, '/user')\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        if (result.email !== undefined) {\n                            this.setState({\n                                data: result\n                            }, () => {\n                                this.setState({\n                                    isDataConfirmed: true\n                                })\n                            })\n                        } else {\n                            this.setState({\n                                isDataConfirmed: false\n                            }, () => {\n                                storage.logOut()\n                            })\n                        }\n                    }, (error) => {\n                        console.log(error)\n                    }\n                );\n        } else {\n            this.setState({\n                isDataConfirmed: false\n            })\n        }\n    }\n\n    public handleChangeTab = (event: React.ChangeEvent<{}>, newValue: number) => {\n        this.setState({\n            tabValue: newValue\n        })\n    };\n\n    public handleChangeIndexTab = (index: number) => {\n        this.setState({\n            tabValue: index\n        })\n    }\n\n    componentWillUnmount(): void {\n    }\n\n    public render() {\n\n        const stylesForTab = {\n            textTransform: 'none',\n            minWidth: 72,\n        } as React.CSSProperties;\n\n        const tabsArray = [\n            {label: 'Учетная запись', icon: <Person/>},\n            {label: 'Мое расписание', icon: <ListAlt/>},\n            {label: 'Безопасность', icon: <Security/>},\n            {label: 'Сервисы', icon: <Dashboard/>},\n            {label: 'Админ', icon: <Fingerprint/>, admin: true}\n        ];\n\n        const mobileMenu = (\n            <AppBar position=\"static\" color=\"default\" className=\"topBarMin top\">\n                <Tabs\n                    value={this.state.tabValue}\n                    onChange={this.handleChangeTab}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    variant=\"fullWidth\"\n                >\n                    {tabsArray.map((tabData: any) => {\n                        if (this.state.data.admin === true && tabData.label === 'Админ') {\n                            return (\n                                <Tab icon={tabData.icon} style={stylesForTab}\n                                     key={tabData.label}/>\n                            )\n                        } else {\n                            if (tabData.admin === undefined) {\n                                return (\n                                    <Tab icon={tabData.icon} style={stylesForTab}\n                                         key={tabData.label}/>\n                                )\n                            }\n                        }\n                    })}\n                </Tabs>\n            </AppBar>\n        );\n\n        const fullMenu = (\n            <AppBar position=\"static\" color=\"default\" className=\"topBarMax\">\n                <Tabs\n                    value={this.state.tabValue}\n                    onChange={this.handleChangeTab}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    variant=\"fullWidth\"\n                >\n                    {tabsArray.map((tabData: any) => {\n                        if (this.state.data.admin === true && tabData.label === 'Админ') {\n                            return (\n                                <Tab label={tabData.label} icon={tabData.icon} style={stylesForTab}\n                                     key={tabData.label}/>\n                            )\n                        } else {\n                            if (tabData.admin === undefined) {\n                                return (\n                                    <Tab label={tabData.label} icon={tabData.icon} style={stylesForTab}\n                                         key={tabData.label}/>\n                                )\n                            }\n                        }\n                    })}\n                </Tabs>\n            </AppBar>\n        );\n\n        const accountDataComponent = (\n            <div style={{marginTop: '1rem', overflow: 'hidden'}}>\n                <Grid container spacing={3}>\n                    <Grid style={{textAlign: 'center'}} item xs={6} sm={6}>\n\n                        <Typography variant=\"body1\">\n                            Email:\n                        </Typography>\n\n                    </Grid>\n                    <Grid style={{textAlign: 'center'}} item xs={6} sm={6}>\n\n                        <Typography variant=\"body1\">\n                            {this.state.data.email}\n                        </Typography>\n\n                    </Grid>\n                </Grid>\n            </div>\n        )\n\n        const accountPageBody = (\n            <div>\n                {mobileMenu}\n                {fullMenu}\n                <SwipeableViews axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'} index={this.state.tabValue}\n                                onChangeIndex={this.handleChangeIndexTab}>\n                    {this.state.isDataConfirmed ? <div dir={theme.direction}>{accountDataComponent}</div> : <div></div>}\n                    <div dir={theme.direction}>text2</div>\n                    <div dir={theme.direction}>text3</div>\n                    <div dir={theme.direction}>text4</div>\n                    <div dir={theme.direction}>admin</div>\n                </SwipeableViews>\n            </div>\n        );\n\n        const waitingComponent = (\n            <div>\n                <Typography variant={\"h6\"}>Пожалуйста, подождите. Данные обновляются.</Typography>\n            </div>\n        );\n\n\n        return (\n            <div>\n                {this.state.isDataConfirmed === null ? LoadingComponent : null}\n                {this.state.data !== undefined ? accountPageBody : waitingComponent}\n            </div>\n        )\n    }\n}\n","import HelpPage from \"./HelpPage\";\nimport StartPage from \"./StartPage\";\nimport AccountPage from \"./AccountPage\";\nimport {Home, LiveHelp, Person} from \"@material-ui/icons\";\n\nexport const pagesForMenus =  {\n    pages:\n        [\n            {path: '/', buttonText: 'Главная', isDataConfirmed: false,  component: StartPage, icon: 'home'},\n            {path: '/help', buttonText: 'Помощь', isDataConfirmed: false, component: HelpPage, icon: 'live_help'},\n            {path: '/account', buttonText: 'Аккаунт', isDataConfirmed: true, component: AccountPage, icon: 'person'},\n        ]\n};\n","import React from 'react'\nimport {\n    Button, CircularProgress,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle, Fade,\n    TextField, Typography\n} from \"@material-ui/core\";\nimport Http from \"../../serverApi/http\";\nimport {DataStorage} from \"../../serverApi/dataStorage\";\nimport {LocalStorage} from \"../../serverApi/localStorage\";\nimport {Input, MeetingRoom} from \"@material-ui/icons\";\nimport MenuItem from \"../Main\";\n\ninterface DialogLoginFormProps {\n    mobile: boolean\n    isLoginSuccess: any;\n}\n\ninterface DialogLoginFormState {\n    openDialogWindow: boolean,\n    email: string,\n    password: string,\n    isLoading: boolean\n    loginState: string\n}\n\nexport class DialogLoginForm extends React.Component<DialogLoginFormProps, DialogLoginFormState> {\n\n    state = {\n        openDialogWindow: false,\n        email: '',\n        password: '',\n        isLoading: false,\n        loginState: ''\n    };\n\n    public handleOpenLoginDialog = () => {\n        this.setState({\n            openDialogWindow: true\n        })\n    };\n\n    public handleClose = () => {\n        this.setState({\n            openDialogWindow: false,\n\n        })\n    };\n\n    public login = () => {\n        this.setState({\n            isLoading: true\n        });\n        const http = new Http();\n        const data = {\n            email: this.state.email,\n            password: this.state.password,\n        };\n        http.loginForToken(data, '/auth')\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    if (result.token === undefined){\n                        this.setState({\n                            loginState: 'Email или пароль введены неверно'\n                        })\n                    } else {\n                        this.setState({\n                            loginState: 'Вы успешно авторизованы. Сейчас Вы будете перенаправлены'\n                        }, ()=>{\n                            const storage = new DataStorage(new LocalStorage());\n                            storage.add(result.token);\n                            http.loginWithToken(result.token, '/user')\n                                .then(res => res.json())\n                                .then (\n                                    (result)=>{\n                                        // КОНЕЧНЫЕ ДАННЫЕ\n                                        this.setState({\n                                            openDialogWindow: false\n                                        });\n                                        this.props.isLoginSuccess(result)\n\n                                    }, (error) => {\n                                        console.log(error)\n                                    }\n                                )\n                        })\n                    }\n                    this.setState({\n                        isLoading: false\n                    })\n                },\n                (error) => {\n                    console.log(error)\n                }\n            );\n    };\n\n    public handleEmailChange = (event: any) => {\n        this.setState({\n            email: event.target.value\n        })\n    };\n\n    public handlePasswordChange = (event: any) => {\n        this.setState({\n            password: event.target.value\n        })\n    };\n\n    public render() {\n        return (\n            <div>\n\n                {this.props.mobile === true ?\n                    <div onClick={this.handleOpenLoginDialog} style={{height: '2rem', width: '7rem'}}>\n                        <Typography variant=\"button\"><MeetingRoom/>&nbsp;&nbsp;Вход</Typography>\n                    </div>\n                    :\n                    <Button color=\"secondary\" onClick={this.handleOpenLoginDialog}>\n                        <MeetingRoom/>&nbsp;&nbsp;Вход\n                    </Button>}\n\n                <Dialog open={this.state.openDialogWindow} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\">\n                    <DialogTitle id=\"form-dialog-title\">Вход</DialogTitle>\n                    <div style={{marginLeft: 'auto', marginRight: 'auto'}}>\n                        {this.state.isLoading ? <CircularProgress/> : null}\n                    </div>\n                    <DialogContent>\n                        <DialogContentText>\n                            Введите Email и пароль\n                        </DialogContentText>\n\n                        <Typography variant=\"button\">{this.state.loginState}</Typography>\n\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"login\"\n                            label={<Typography>Email <span style={{color: 'red'}}>*</span></Typography>}\n                            type=\"email\"\n                            fullWidth\n                            onChange={this.handleEmailChange}\n                        />\n                        <TextField\n                            margin=\"dense\"\n                            id=\"pass\"\n                            label={<Typography>Пароль <span style={{color: 'red'}}>*</span></Typography>}\n                            type=\"password\"\n                            fullWidth\n                            onChange={this.handlePasswordChange}\n                        />\n                    </DialogContent>\n\n                    <DialogActions>\n\n                        <Button onClick={this.login} color=\"primary\">\n                            Войти\n                        </Button>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            Отмена\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport {\n    Button, CircularProgress,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle, Fade,\n    TextField, Typography\n} from \"@material-ui/core\";\nimport Http from \"../../serverApi/http\";\nimport {DataStorage} from \"../../serverApi/dataStorage\";\nimport {LocalStorage} from \"../../serverApi/localStorage\";\nimport CustomizedSnackbars from \"./SnackBar\";\nimport {PersonAdd} from \"@material-ui/icons\";\n\ninterface DialogRegisterFormProps {\n    mobile: boolean\n    isLoginSuccess: any;\n}\n\ninterface DialogRegisterFormState {\n    openDialogWindow: boolean,\n    email: string,\n    password: string,\n    confirmPassword: string,\n    isLoading: boolean,\n    registrationState: string\n}\n\nexport class DialogRegisterForm extends React.Component<DialogRegisterFormProps, DialogRegisterFormState> {\n\n    state = {\n        openDialogWindow: false,\n        email: '',\n        password: '',\n        confirmPassword: '',\n        isLoading: false,\n        registrationState: ''\n    };\n\n    public handleOpenLoginDialog = () => {\n        this.setState({\n            openDialogWindow: true\n        })\n    };\n\n\n    public handleClose = () => {\n\n        this.setState({\n            openDialogWindow: false,\n\n        })\n    };\n\n    public login = () => {\n        this.setState({\n            isLoading: true\n        });\n        const http = new Http();\n        const data = {\n            email: this.state.email,\n            password: this.state.password,\n            confirmPassword: this.state.confirmPassword\n        };\n        http.loginForToken(data, '/registration')\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isLoading: false\n                    });\n                    if (result === 'Passwords Not Confirmed') {\n                        console.log(result);\n                        this.setState({\n                            registrationState: 'Введенные пароли не совпадают'\n                        })\n                    }\n\n                    if (result.token !== undefined) {\n                        this.setState({\n                            registrationState: 'Вы успешно зарегистрированы. Сейчас Вы будете перенаправлены'\n                        }, () => {\n                            const storage = new DataStorage(new LocalStorage());\n                            storage.add(result.token);\n                            http.loginWithToken(result.token, '/user')\n                                .then(res => res.json())\n                                .then(\n                                    (result) => {\n                                        // КОНЕЧНЫЕ ДАННЫЕ\n                                        this.setState({\n                                            openDialogWindow: false\n                                        });\n                                        this.props.isLoginSuccess(result)\n\n                                    }, (error) => {\n                                        console.log(error)\n                                    }\n                                )\n                        })\n                    }\n\n                    if (result === 'This email already registered') {\n                        this.setState({\n                            registrationState: 'Этот Email уже занят'\n                        })\n                    }\n\n                    if (result === '8 symbols') {\n                        this.setState({\n                            registrationState: 'Длина пароля должна быть не менее 8 символов'\n                        })\n                    }\n                },\n                (error) => {\n                    console.log(error)\n                }\n            );\n    };\n\n    public handleEmailChange = (event: any) => {\n        this.setState({\n            email: event.target.value\n        })\n    };\n\n    public handlePasswordChange = (event: any) => {\n        this.setState({\n            password: event.target.value\n        })\n    };\n\n    public handleConfirmPasswordChange = (event: any) => {\n        this.setState({\n            confirmPassword: event.target.value\n        })\n    };\n\n    public render() {\n        return (\n            <div>\n\n                {this.props.mobile === true ?\n                    <div onClick={this.handleOpenLoginDialog} style={{height: '2rem', width: '7rem'}}>\n                        <PersonAdd/>&nbsp;&nbsp;<Typography variant=\"button\">Регистрация</Typography>\n                    </div>\n                    :\n                    <Button color=\"secondary\" onClick={this.handleOpenLoginDialog}>\n                        <PersonAdd/>&nbsp;&nbsp;Регистрация\n                    </Button>}\n\n                <Dialog open={this.state.openDialogWindow} onClose={this.handleClose}\n                        aria-labelledby=\"form-dialog-title\">\n                    <DialogTitle id=\"form-dialog-title\">Регистрация</DialogTitle>\n                    <div style={{marginLeft: 'auto', marginRight: 'auto'}}>\n                        {this.state.isLoading ? <CircularProgress/> : null}\n                    </div>\n                    <DialogContent>\n                        <DialogContentText>\n                            Для регистрации необходимо ввести свой email и пароль. Введенные пароли должны совпадать\n                        </DialogContentText>\n\n                        <Typography variant=\"button\">{this.state.registrationState}</Typography>\n\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"login\"\n                            label={<Typography>Email <span style={{color: 'red'}}>*</span></Typography>}\n                            type=\"email\"\n                            fullWidth\n                            onChange={this.handleEmailChange}\n                        />\n                        <TextField\n                            margin=\"dense\"\n                            id=\"pass\"\n                            label={<Typography>Пароль <span style={{color: 'red'}}>*</span></Typography>}\n                            type=\"password\"\n                            fullWidth\n                            onChange={this.handlePasswordChange}\n                        />\n                        <TextField\n                            margin=\"dense\"\n                            id=\"confirmPass\"\n                            label={<Typography>Повторите пароль <span style={{color: 'red'}}>*</span></Typography>}\n                            type=\"password\"\n                            fullWidth\n                            onChange={this.handleConfirmPasswordChange}\n                        />\n                    </DialogContent>\n\n                    <DialogActions>\n                        <Button onClick={this.login} color=\"primary\">\n                            Зарегистрироваться\n                        </Button>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            Отмена\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        )\n    }\n}\n","import {Switch, Route, Link, NavLink, Redirect} from 'react-router-dom'\nimport React from 'react'\nimport {AppBar, Button, CircularProgress, Container, Icon, Menu, Toolbar, Typography} from \"@material-ui/core\";\nimport {MuiThemeProvider} from '@material-ui/core/styles';\nimport {theme} from \"../Theme\";\nimport MenuIcon from '@material-ui/icons/Menu';\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport {pagesForMenus} from \"../pages/AppPagesList\";\nimport {DialogLoginForm} from \"./Dialogs/DialogLoginForm\";\nimport {DialogRegisterForm} from \"./Dialogs/DialogRegisterForm\";\nimport {DataStorage} from \"../serverApi/dataStorage\";\nimport {LocalStorage} from \"../serverApi/localStorage\";\nimport Http from \"../serverApi/http\";\nimport {Input, PersonAdd, Star} from \"@material-ui/icons\";\nimport CustomizedSnackbars from \"./Dialogs/SnackBar\";\nimport StartPage from \"../pages/StartPage\";\nimport HelpPage from \"../pages/HelpPage\";\n\n\ninterface pageData {\n    path: string;\n    buttonText: string;\n    isDataConfirmed: boolean;\n    component: any,\n    icon: any\n}\n\ninterface MainState {\n    menuEl: any,\n    mobileOpenDialogLoginForm: any,\n    isDataConfirmed: any,\n    data: any,\n}\n\nexport default class Main extends React.Component {\n\n    public storage = new DataStorage(new LocalStorage());\n\n    public state: MainState = {\n        menuEl: null,\n        mobileOpenDialogLoginForm: false,\n        isDataConfirmed: null, // флаг становится true только в том случае, если пришли данные по токену. Флаг прокидывается в детей и внутри проходят запросы\n        data: null,\n    };\n\n    // вспомогательное для меню\n    public handleClick = (evt: React.MouseEvent<HTMLButtonElement>) => {\n        this.setState({\n            menuEl: evt.currentTarget\n        })\n    };\n\n    // открытие - закрытие меню на мобильной версии\n    public handleClose = () => {\n        this.setState({\n            menuEl: null\n        })\n    };\n\n    // поднимается через пропсы с форм регистрации и логина\n    public isLoginSuccess = (data: any) => {\n        this.setState({\n            data: data\n        }, () => {\n            this.setState({\n                isDataConfirmed: true\n            })\n        })\n    };\n\n    // обработчик кнопки выхода\n    public handleExitButton = () => {\n        this.storage.logOut();\n        this.setState({\n            isDataConfirmed: false,\n            data: null\n        })\n    };\n\n    // событие изменения страницы - проверка данных\n    public changePage = () => {\n        const storage = new DataStorage(new LocalStorage());\n        const http = new Http();\n        if (storage.getUserData !== null) {\n            http.loginWithToken(storage.getUserData, '/user')\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        if (result.email !== undefined) {\n                            this.setState({\n                                data: result\n                            }, () => {\n                                this.setState({\n                                    isDataConfirmed: true\n                                })\n                            })\n                        } else {\n                            this.setState({\n                                isDataConfirmed: false\n                            }, () => {\n                                storage.logOut()\n                            })\n                        }\n                    }, (error) => {\n                        console.log(error)\n                    }\n                );\n        } else {\n            this.setState({\n                isDataConfirmed: false\n            })\n        }\n    }\n\n    componentDidMount(): void {\n        const storage = new DataStorage(new LocalStorage());\n        const http = new Http();\n        if (storage.getUserData !== null) {\n            http.loginWithToken(storage.getUserData, '/user')\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        if (result.email !== undefined) {\n                            this.setState({\n                                data: result\n                            }, () => {\n                                this.setState({\n                                    isDataConfirmed: true\n                                })\n                            })\n                        } else {\n                            this.setState({\n                                isDataConfirmed: false\n                            }, () => {\n                                storage.logOut()\n                            })\n                        }\n                    }, (error) => {\n                        console.log(error)\n                    }\n                );\n        } else {\n            this.setState({\n                isDataConfirmed: false\n            })\n        }\n\n    }\n\n    public render() {\n\n        const isDataConfirmedMobileMenu = (\n            <AppBar>\n                <Toolbar className=\"topBarMin\">\n                    <Button color=\"secondary\" aria-controls=\"customized-menu\" aria-haspopup=\"true\"\n                            onClick={this.handleClick}>\n                        <MenuIcon/>\n                    </Button>\n                    <Menu\n                        id=\"customized-menu\" anchorEl={this.state.menuEl} keepMounted\n                        open={Boolean(this.state.menuEl)} onClose={this.handleClose}\n                        style={{marginTop: '2rem'}}>\n                        {/* ОТДЕЛЬНО ВОЗВРАЩАЕТСЯ КНОПКА ВХОДА */}\n                        <div>\n                            {pagesForMenus.pages.map((dataPage: pageData) => {\n                                    return (\n                                        <div key={dataPage.buttonText + 'logged'}  onClick={this.changePage} style={{width: '180px'}}>\n                                            <NavLink to={dataPage.path} style={{color: \"black\"}}\n                                                     activeStyle={{color: \"black\", fontWeight: \"bold\"}}>\n                                                <MenuItem onClick={this.handleClose}>\n                                                    <Icon>{dataPage.icon}</Icon>&nbsp;&nbsp;\n\n                                                    <Typography\n                                                        variant=\"button\">{dataPage.buttonText}</Typography>\n                                                </MenuItem>\n                                            </NavLink>\n                                        </div>\n                                    )\n\n                                }\n                            )}\n                            <MenuItem onClick={this.handleExitButton}>\n                                <Input/>&nbsp;&nbsp;Выйти\n                            </MenuItem>\n                        </div>\n                    </Menu>\n                    {this.state.data === null ? null :\n                        <Typography style={{marginLeft: 'auto'}}\n                                    variant=\"subtitle2\">Привет, {this.state.data.email}</Typography>}\n                </Toolbar>\n            </AppBar>\n        )\n\n        const isDataNotConfirmedMobileMenu = (\n            <AppBar>\n                <Toolbar className=\"topBarMin\">\n                    <Button color=\"secondary\" aria-controls=\"customized-menu\" aria-haspopup=\"true\"\n                            onClick={this.handleClick}>\n                        <MenuIcon/>\n                    </Button>\n                    <Menu\n                        id=\"customized-menu\" anchorEl={this.state.menuEl} keepMounted\n                        open={Boolean(this.state.menuEl)} onClose={this.handleClose}\n                        style={{marginTop: '2rem'}}>\n                        {pagesForMenus.pages.map((dataPage: pageData) => {\n                            if (dataPage.isDataConfirmed === false){\n                                return (\n                                    <div key={dataPage.buttonText}  onClick={this.changePage} style={{width: '180px'}}>\n                                        <NavLink to={dataPage.path} style={{color: \"black\"}}\n                                                 activeStyle={{color: \"black\", fontWeight: \"bold\"}}>\n                                            <MenuItem onClick={this.handleClose}>\n                                                <Icon>{dataPage.icon}</Icon>&nbsp;&nbsp;\n\n                                                <Typography\n                                                    variant=\"button\">{dataPage.buttonText}</Typography>\n                                            </MenuItem>\n                                        </NavLink>\n                                    </div>\n                                )\n                            }\n\n                            }\n                        )}\n                        {/* ОТДЕЛЬНО ВОЗВРАЩАЕТСЯ КНОПКА ВХОДА */}\n\n                        <div>\n                            <MenuItem>\n                                <DialogLoginForm mobile={true} isLoginSuccess={this.isLoginSuccess}/>\n                            </MenuItem>\n                        </div>\n                        <div>\n                            <MenuItem>\n                                <DialogRegisterForm mobile={true} isLoginSuccess={this.isLoginSuccess}/>\n                            </MenuItem>\n                        </div>\n\n                    </Menu>\n                </Toolbar>\n            </AppBar>\n        );\n\n\n        const isLoadingComponent = (\n            <MuiThemeProvider theme={theme}>\n                <AppBar>\n                    <Toolbar style={{textAlign: 'right'}}>\n                        <CircularProgress color=\"inherit\"/>\n                    </Toolbar>\n                </AppBar>\n            </MuiThemeProvider>\n        );\n\n        const isDataConfirmed = (\n            <Switch>\n                <MuiThemeProvider theme={theme}>\n                    {/* МЕНЮ В МОБИЛЬНОЙ ВЕРСИИ */}\n\n                    {isDataConfirmedMobileMenu}\n\n                    {/* МЕНЮ В ПОЛНОЙ ВЕРСИИ */}\n                    <AppBar>\n                        <Toolbar className=\"topBarMax\" style={{textAlign: 'right'}}>\n                            {/* ОТДЕЛЬНО ВОЗВРАЩАЕТСЯ КНОПКА ВХОДА */}\n\n                            {pagesForMenus.pages.map((dataPage: pageData) => {\n                                return (\n                                    <div key={dataPage.buttonText + 'logged'}>\n                                        <Link to={dataPage.path}>\n                                            <Button color=\"secondary\"  onClick={this.changePage}>\n                                                <Icon>{dataPage.icon}</Icon>&nbsp;&nbsp;{dataPage.buttonText}\n                                            </Button>\n                                        </Link>\n                                    </div>\n                                )\n                            })}\n                            <Button onClick={this.handleExitButton} color=\"secondary\">\n                                <Input/>&nbsp;&nbsp;ВЫХОД\n                            </Button>\n                            &nbsp;\n                            {this.state.data === null ? null :\n                                <Typography style={{marginLeft: 'auto'}}\n                                            variant=\"subtitle2\">Привет, {this.state.data.email}</Typography>}\n                        </Toolbar>\n                    </AppBar>\n\n                    {/*{ ТЕЛО ВСЕЙ СТРАНИЦЫ }*/}\n                    <Container>\n                        <div style={{marginTop: '5rem'}}>\n                            {pagesForMenus.pages.map((dataPage: pageData) => {\n                                return (\n                                    <div key={dataPage.buttonText}>\n                                        <Route exact path={dataPage.path} component={dataPage.component}/>\n                                    </div>\n                                )\n                            })}\n                            <Redirect to=\"/\"/>\n                        </div>\n                    </Container>\n                </MuiThemeProvider>\n                <StartPage/>\n            </Switch>\n        );\n\n        const isDataNotConfrimed = (\n            <Switch>\n                <MuiThemeProvider theme={theme}>\n                        {/* МЕНЮ В МОБИЛЬНОЙ ВЕРСИИ */}\n\n                        {isDataNotConfirmedMobileMenu}\n                        {/* МЕНЮ В ПОЛНОЙ ВЕРСИИ */}\n                        <AppBar>\n                            <Toolbar className=\"topBarMax\" style={{textAlign: 'right'}}>\n                                {/* ОТДЕЛЬНО ВОЗВРАЩАЕТСЯ КНОПКА ВХОДА */}\n\n                                {pagesForMenus.pages.map((dataPage: pageData) => {\n                                    if (dataPage.isDataConfirmed === false) {\n                                        return (\n                                            <div key={dataPage.buttonText}>\n                                                <Link to={dataPage.path}>\n                                                    <Button color=\"secondary\" onClick={this.changePage}>\n                                                        <Icon>{dataPage.icon}</Icon>&nbsp;&nbsp;{dataPage.buttonText}\n                                                    </Button>\n                                                </Link>\n                                            </div>\n                                        )\n                                    }\n                                })}\n\n                                <DialogLoginForm mobile={false} isLoginSuccess={this.isLoginSuccess}/>\n                                <DialogRegisterForm mobile={false} isLoginSuccess={this.isLoginSuccess}/>\n\n                            </Toolbar>\n                        </AppBar>\n\n                        {/* ТЕЛО ВСЕЙ СТРАНИЦЫ */}\n                        <Container>\n                            <div style={{marginTop: '5rem'}}>\n                                {pagesForMenus.pages.map((dataPage: pageData) => {\n                                    if (dataPage.isDataConfirmed === false){\n                                        return (\n                                            <div key={dataPage.buttonText}>\n                                                <Route exact path={dataPage.path} component={dataPage.component}/>\n                                            </div>\n                                        )\n                                    }\n                                })}\n                                <Redirect to=\"/\"/>\n                            </div>\n                        </Container>\n                </MuiThemeProvider>\n            </Switch>\n        );\n\n        // ВОЗВРАЩАЕТСЯ ЕСЛИ ОЖИДАНИЕ ЗАПРОСА\n        if (this.state.isDataConfirmed === null) {\n            return (isLoadingComponent)\n        }\n        // ВОЗВРАЩАЕТСЯ ЕСЛИ ДАННЫЕ НЕ ПРИШЛИ\n        if (!this.state.isDataConfirmed) {\n            return (isDataNotConfrimed)\n        } else {\n            return (isDataConfirmed)\n        }\n\n    }\n};\n","import React from 'react';\nimport './App.css';\nimport {BrowserRouter} from \"react-router-dom\";\nimport Main from \"./components/Main\";\n\nconst App: React.FC = () => {\n    return (\n        <BrowserRouter>\n            <Main/>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}