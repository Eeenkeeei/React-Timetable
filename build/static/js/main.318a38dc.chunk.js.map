{"version":3,"sources":["Theme.ts","pages/AppPagesList.ts","AppConstants.tsx","serverApi/http.ts","serverApi/dataStorage.ts","serverApi/localStorage.ts","components/Dialogs/DialogLoginForm.tsx","components/Dialogs/DialogRegisterForm.tsx","components/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","palette","common","black","white","background","paper","default","primary","light","main","dark","contrastText","secondary","error","text","disabled","hint","pagesForMenus","pages","path","buttonText","isLogged","component","serverApi","Http","url","data","fetch","this","method","headers","Content-Type","body","JSON","stringify","token","Authorization","concat","DataStorage","storage","Object","classCallCheck","createClass","key","value","add","logOut","get","LocalStorage","parse","localStorage","getItem","save","removeItem","setItem","DialogLoginForm","_React$Component","_getPrototypeOf2","_this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","state","openDialogWindow","email","password","isLoading","loginState","handleOpenLoginDialog","setState","handleClose","login","http","loginForToken","then","res","json","result","undefined","loginWithToken","console","log","handleEmailChange","event","target","handlePasswordChange","inherits","react_default","a","createElement","props","mobile","onClick","style","height","width","Typography","variant","Button","color","Dialog","open","onClose","aria-labelledby","DialogTitle","id","marginLeft","marginRight","Fade","in","transitionDelay","unmountOnExit","CircularProgress","DialogContent","DialogContentText","TextField","autoFocus","margin","label","type","fullWidth","onChange","DialogActions","React","Component","DialogRegisterForm","confirmPassword","registrationState","handleConfirmPasswordChange","Main","menuEl","mobileOpenDialogLoginForm","handleClick","evt","currentTarget","_this2","react_router","MuiThemeProvider","AppBar","Toolbar","className","aria-controls","aria-haspopup","Menu_default","Menu","anchorEl","keepMounted","Boolean","marginTop","MenuItem","DialogLoginForm_DialogLoginForm","DialogRegisterForm_DialogRegisterForm","map","dataPage","react_router_dom","to","activeStyle","fontWeight","textAlign","exact","App","Main_Main","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uQAEaA,EAAQC,YAAe,CAChCC,QAAW,CACPC,OAAU,CACNC,MAAS,OACTC,MAAS,QAEbC,WAAc,CACVC,MAAS,yBACTC,QAAW,WAEfC,QAAW,CACPC,MAAS,UACTC,KAAQ,UACRC,KAAQ,wBACRC,aAAgB,QAEpBC,UAAa,CACTJ,MAAS,UACTC,KAAQ,OACRC,KAAQ,UACRC,aAAgB,QAEpBE,MAAS,CACLL,MAAS,UACTC,KAAQ,UACRC,KAAQ,UACRC,aAAgB,QAEpBG,KAAQ,CACJP,QAAW,sBACXK,UAAa,sBACbG,SAAY,sBACZC,KAAQ,oDClCPC,EAAiB,CAC1BC,MACI,CACI,CAACC,KAAM,QAASC,WAAY,uCAAUC,UAAU,EAAOC,UAAW,gFCHjEC,EAAY,4BCQJC,mDAEVC,IAAMF,4DAESG,EAAiBP,GACnC,OAAOQ,MAAMC,KAAKH,IAAMN,EAAM,CAC1BU,OAAQ,OACRC,QAAS,CACLC,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUR,4CAINS,EAAehB,GAClC,OAAOQ,MAAMC,KAAKH,IAAMN,EAAM,CAC1BU,OAAQ,MACRC,QAAS,CACLC,eAAgB,mBAChBK,cAAA,UAAAC,OAA2BF,eCpB9BG,EAAb,WAGI,SAAAA,EAAYC,GAAcC,OAAAC,EAAA,EAAAD,CAAAZ,KAAAU,GAAAV,KAFnBW,aAEkB,EACrBX,KAAKW,QAAUA,EAJvB,OAAAC,OAAAE,EAAA,EAAAF,CAAAF,EAAA,EAAAK,IAAA,MAAAC,MAAA,SAWQlB,GACAE,KAAKW,QAAQM,IAAInB,KAZzB,CAAAiB,IAAA,SAAAC,MAAA,WAgBQhB,KAAKW,QAAQO,WAhBrB,CAAAH,IAAA,cAAAI,IAAA,WAQQ,OAAOnB,KAAKW,QAAQb,SAR5BY,EAAA,GCPaU,EAAb,WAEI,SAAAA,IAAeR,OAAAC,EAAA,EAAAD,CAAAZ,KAAAoB,GAAApB,KADRF,UACO,EAEVE,KAAKF,KAAOO,KAAKgB,MAAMC,aAAaC,QAAQ,SAJpD,OAAAX,OAAAE,EAAA,EAAAF,CAAAQ,EAAA,EAAAL,IAAA,MAAAC,MAAA,SAQQlB,GACAE,KAAKF,KAAOA,EACZE,KAAKwB,SAVb,CAAAT,IAAA,SAAAC,MAAA,WAcQM,aAAaG,WAAW,UAdhC,CAAAV,IAAA,OAAAC,MAAA,WAkBQM,aAAaI,QAAQ,OAAQrB,KAAKC,UAAUN,KAAKF,WAlBzDsB,EAAA,GC0BaO,EAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAlB,OAAAC,EAAA,EAAAD,CAAAZ,KAAA2B,GAAA,QAAAI,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAN,EAAAlB,OAAAyB,EAAA,EAAAzB,CAAAZ,MAAA6B,EAAAjB,OAAA0B,EAAA,EAAA1B,CAAAe,IAAAY,KAAAC,MAAAX,EAAA,CAAA7B,MAAAS,OAAAyB,MAEIO,MAAQ,CACJC,kBAAkB,EAClBC,MAAO,GACPC,SAAU,GACVC,WAAW,EACXC,WAAY,IAPpBhB,EAUWiB,sBAAwB,WAC3BjB,EAAKkB,SAAS,CACVN,kBAAkB,KAZ9BZ,EAgBWmB,YAAc,WACjBnB,EAAKkB,SAAS,CACVN,kBAAkB,KAlB9BZ,EAuBWoB,MAAQ,WACXpB,EAAKkB,SAAS,CACVH,WAAW,IAEf,IAAMM,EAAO,IAAIvD,EACXE,EAAO,CACT6C,MAAOb,EAAKW,MAAME,MAClBC,SAAUd,EAAKW,MAAMG,UAGzBO,EAAKC,cAActD,EAAM,SACpBuD,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KACG,SAACG,QACwBC,IAAjBD,EAAOjD,MACPuB,EAAKkB,SAAS,CACVF,WAAY,wJAGhBhB,EAAKkB,SAAS,CACVF,WAAY,iTACb,WACiB,IAAIpC,EAAY,IAAIU,GAC5BH,IAAIuC,EAAOjD,OACnB4C,EAAKO,eAAeF,EAAOjD,MAAO,SAC7B8C,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KACG,SAACG,GAEG1B,EAAKkB,SAAS,CACVN,kBAAkB,KAGvB,SAACzD,GACA0E,QAAQC,IAAI3E,OAKhC6C,EAAKkB,SAAS,CACVH,WAAW,KAGnB,SAAC5D,GACG0E,QAAQC,IAAI3E,MAnEhC6C,EA0EW+B,kBAAoB,SAACC,GACxBhC,EAAKkB,SAAS,CACVL,MAAOmB,EAAMC,OAAO/C,SA5EhCc,EAgFWkC,qBAAuB,SAACF,GAC3BhC,EAAKkB,SAAS,CACVJ,SAAUkB,EAAMC,OAAO/C,SAlFnCc,EAAA,OAAAlB,OAAAqD,EAAA,EAAArD,CAAAe,EAAAC,GAAAhB,OAAAE,EAAA,EAAAF,CAAAe,EAAA,EAAAZ,IAAA,SAAAC,MAAA,WAuFQ,OACIkD,EAAAC,EAAAC,cAAA,YAE2B,IAAtBpE,KAAKqE,MAAMC,OACRJ,EAAAC,EAAAC,cAAA,OAAKG,QAASvE,KAAK+C,sBAAuByB,MAAO,CAACC,OAAQ,OAAQC,MAAO,SACrER,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAYC,QAAQ,UAApB,6BAGJV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAQC,MAAM,YAAYP,QAASvE,KAAK+C,uBAAxC,4BAIJmB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAQC,KAAMhF,KAAKyC,MAAMC,iBAAkBuC,QAASjF,KAAKiD,YAAaiC,kBAAgB,qBAClFhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAaC,GAAG,qBAAhB,4BACAlB,EAAAC,EAAAC,cAAA,OAAKI,MAAO,CAACa,WAAY,OAAQC,YAAa,SAC1CpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CACIC,GAAIxF,KAAKyC,MAAMI,UACf2B,MAAO,CACHiB,gBAAiBzF,KAAKyC,MAAMI,UAAY,QAAU,OAEtD6C,eAAa,GAEbxB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,QAGRzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,KACI1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,qGAIA3B,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAYC,QAAQ,UAAU5E,KAAKyC,MAAMK,YAEzCoB,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CACIC,WAAS,EACTC,OAAO,QACPZ,GAAG,QACHa,MAAO/B,EAAAC,EAAAC,cAACO,EAAA,EAAD,cAAkBT,EAAAC,EAAAC,cAAA,QAAMI,MAAO,CAACM,MAAO,QAArB,MACzBoB,KAAK,QACLC,WAAS,EACTC,SAAUpG,KAAK6D,oBAEnBK,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CACIE,OAAO,QACPZ,GAAG,OACHa,MAAO/B,EAAAC,EAAAC,cAACO,EAAA,EAAD,6CAAmBT,EAAAC,EAAAC,cAAA,QAAMI,MAAO,CAACM,MAAO,QAArB,MAC1BoB,KAAK,WACLC,WAAS,EACTC,SAAUpG,KAAKgE,wBAIvBE,EAAAC,EAAAC,cAACiC,EAAA,EAAD,KAEInC,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAQN,QAASvE,KAAKkD,MAAO4B,MAAM,WAAnC,kCAGAZ,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAQN,QAASvE,KAAKiD,YAAa6B,MAAM,WAAzC,+CA/IxBnD,EAAA,CAAqC2E,IAAMC,WCC9BC,EAAb,SAAA5E,GAAA,SAAA4E,IAAA,IAAA3E,EAAAC,EAAAlB,OAAAC,EAAA,EAAAD,CAAAZ,KAAAwG,GAAA,QAAAzE,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAN,EAAAlB,OAAAyB,EAAA,EAAAzB,CAAAZ,MAAA6B,EAAAjB,OAAA0B,EAAA,EAAA1B,CAAA4F,IAAAjE,KAAAC,MAAAX,EAAA,CAAA7B,MAAAS,OAAAyB,MAEIO,MAAQ,CACJC,kBAAkB,EAClBC,MAAO,GACPC,SAAU,GACV6D,gBAAiB,GACjB5D,WAAW,EACX6D,kBAAmB,IAR3B5E,EAWWiB,sBAAwB,WAC3BjB,EAAKkB,SAAS,CACVN,kBAAkB,KAb9BZ,EAkBWmB,YAAc,WAEjBnB,EAAKkB,SAAS,CACVN,kBAAkB,KArB9BZ,EA0BWoB,MAAQ,WACXpB,EAAKkB,SAAS,CACVH,WAAW,IAEf,IAAMM,EAAO,IAAIvD,EACXE,EAAO,CACT6C,MAAOb,EAAKW,MAAME,MAClBC,SAAUd,EAAKW,MAAMG,SACrB6D,gBAAiB3E,EAAKW,MAAMgE,iBAEhCtD,EAAKC,cAActD,EAAM,iBACpBuD,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KACG,SAACG,IACG1B,EAAKkB,SAAS,CACVH,WAAW,IAEA,4BAAXW,GACA1B,EAAKkB,SAAS,CACV0D,kBAAmB,yKAINjD,IAAjBD,EAAOjD,SACPoD,QAAQC,IAAIJ,GACI,IAAI9C,EAAY,IAAIU,GAC5BH,IAAIuC,EAAOjD,OACnBuB,EAAKkB,SAAS,CACV0D,kBAAmB,yUACpB,WACCvD,EAAKO,eAAeF,EAAOjD,MAAO,SAC7B8C,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KACG,SAACG,GACGG,QAAQC,IAAIJ,GAEZ1B,EAAKkB,SAAS,CACVN,kBAAkB,KAGvB,SAACzD,GACA0E,QAAQC,IAAI3E,QAMjB,kCAAXuE,GACA1B,EAAKkB,SAAS,CACV0D,kBAAmB,qFAIZ,cAAXlD,GACA1B,EAAKkB,SAAS,CACV0D,kBAAmB,sOAI/B,SAACzH,GACG0E,QAAQC,IAAI3E,MAtFhC6C,EA2FW+B,kBAAoB,SAACC,GACxBhC,EAAKkB,SAAS,CACVL,MAAOmB,EAAMC,OAAO/C,SA7FhCc,EAiGWkC,qBAAuB,SAACF,GAC3BhC,EAAKkB,SAAS,CACVJ,SAAUkB,EAAMC,OAAO/C,SAnGnCc,EAuGW6E,4BAA8B,SAAC7C,GAClChC,EAAKkB,SAAS,CACVyD,gBAAiB3C,EAAMC,OAAO/C,SAzG1Cc,EAAA,OAAAlB,OAAAqD,EAAA,EAAArD,CAAA4F,EAAA5E,GAAAhB,OAAAE,EAAA,EAAAF,CAAA4F,EAAA,EAAAzF,IAAA,SAAAC,MAAA,WA8GQ,OACIkD,EAAAC,EAAAC,cAAA,YAE2B,IAAtBpE,KAAKqE,MAAMC,OACRJ,EAAAC,EAAAC,cAAA,OAAKG,QAASvE,KAAK+C,sBAAuByB,MAAO,CAACC,OAAQ,OAAQC,MAAO,SACrER,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAYC,QAAQ,UAApB,uEAGJV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAQC,MAAM,YAAYP,QAASvE,KAAK+C,uBAAxC,sEAIJmB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAQC,KAAMhF,KAAKyC,MAAMC,iBAAkBuC,QAASjF,KAAKiD,YAAaiC,kBAAgB,qBAClFhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAaC,GAAG,qBAAhB,sEACAlB,EAAAC,EAAAC,cAAA,OAAKI,MAAO,CAACa,WAAY,OAAQC,YAAa,SAC1CpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CACIC,GAAIxF,KAAKyC,MAAMI,UACf2B,MAAO,CACHiB,gBAAiBzF,KAAKyC,MAAMI,UAAY,QAAU,OAEtD6C,eAAa,GAEbxB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,QAGRzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,KACI1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,ocAIA3B,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAYC,QAAQ,UAAU5E,KAAKyC,MAAMiE,mBAEzCxC,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CACIC,WAAS,EACTC,OAAO,QACPZ,GAAG,QACHa,MAAO/B,EAAAC,EAAAC,cAACO,EAAA,EAAD,cAAkBT,EAAAC,EAAAC,cAAA,QAAMI,MAAO,CAACM,MAAO,QAArB,MACzBoB,KAAK,QACLC,WAAS,EACTC,SAAUpG,KAAK6D,oBAEnBK,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CACIE,OAAO,QACPZ,GAAG,OACHa,MAAO/B,EAAAC,EAAAC,cAACO,EAAA,EAAD,6CAAmBT,EAAAC,EAAAC,cAAA,QAAMI,MAAO,CAACM,MAAO,QAArB,MAC1BoB,KAAK,WACLC,WAAS,EACTC,SAAUpG,KAAKgE,uBAEnBE,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CACIE,OAAO,QACPZ,GAAG,cACHa,MAAO/B,EAAAC,EAAAC,cAACO,EAAA,EAAD,oGAA6BT,EAAAC,EAAAC,cAAA,QAAMI,MAAO,CAACM,MAAO,QAArB,MACpCoB,KAAK,WACLC,WAAS,EACTC,SAAUpG,KAAK2G,+BAIvBzC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,KACInC,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAQN,QAASvE,KAAKkD,MAAO4B,MAAM,WAAnC,kCAGAZ,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAQN,QAASvE,KAAKiD,YAAa6B,MAAM,WAAzC,+CA7KxB0B,EAAA,CAAwCF,IAAMC,WCRzBK,6MAEVnE,MAAQ,CACXoE,OAAQ,KACRC,2BAA2B,KAIxBC,YAAc,SAACC,GAClBlF,EAAKkB,SAAS,CACV6D,OAAQG,EAAIC,mBAIbhE,YAAc,WACjBnB,EAAKkB,SAAS,CACV6D,OAAQ,gFAIA,IAAAK,EAAAlH,KACZ,OACIkE,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,KACIjD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAkBlJ,MAAOA,GACrBgG,EAAAC,EAAAC,cAAA,WAEIF,EAAAC,EAAAC,cAACiD,EAAA,EAAD,KACInD,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAASC,UAAU,aACfrD,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAQC,MAAM,YAAY0C,gBAAc,kBAAkBC,gBAAc,OAChElD,QAASvE,KAAK+G,aAClB7C,EAAAC,EAAAC,cAACsD,EAAAvD,EAAD,OAEJD,EAAAC,EAAAC,cAACuD,EAAA,EAAD,CACIvC,GAAG,kBAAkBwC,SAAU5H,KAAKyC,MAAMoE,OAAQgB,aAAW,EAC7D7C,KAAM8C,QAAQ9H,KAAKyC,MAAMoE,QAAS5B,QAASjF,KAAKiD,YAChDuB,MAAO,CAACuD,UAAW,SAEnB7D,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,KACG9D,EAAAC,EAAAC,cAAC6D,EAAD,CAAiB3D,QAAQ,MAGhCJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,KACI9D,EAAAC,EAAAC,cAAC8D,EAAD,CAAoB5D,QAAQ,MAGnCjF,EAAcC,MAAM6I,IAAI,SAACC,GAClB,OAAsB,OAAlBA,EAAS7I,KAEL2E,EAAAC,EAAAC,cAAA,OAAKrD,IAAKqH,EAAS5I,YACf0E,EAAAC,EAAAC,cAACiE,EAAA,EAAD,CAASC,GAAIF,EAAS7I,KAAMiF,MAAO,CAACM,MAAO,SAClCyD,YAAa,CAACzD,MAAO,QAAS0D,WAAY,SAC/CtE,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,CAAUzD,QAAS2C,EAAKjE,aACpBiB,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAYC,QAAQ,UAAUwD,EAAS5I,eAOnD0E,EAAAC,EAAAC,cAAA,OAAKrD,IAAKqH,EAAS5I,YACf0E,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,CAAUzD,QAAS2C,EAAKjE,aACpBiB,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAYC,QAAQ,UAAUwD,EAAS5I,mBAa3E0E,EAAAC,EAAAC,cAACiD,EAAA,EAAD,KACInD,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAASC,UAAU,YAAY/C,MAAO,CAACiE,UAAW,UAE1CvE,EAAAC,EAAAC,cAAC6D,EAAD,CAAiB3D,QAAQ,IACzBJ,EAAAC,EAAAC,cAAC8D,EAAD,CAAoB5D,QAAQ,IAC/BjF,EAAcC,MAAM6I,IAAI,SAACC,GACtB,OAAsB,OAAlBA,EAAS7I,KAEL2E,EAAAC,EAAAC,cAAA,OAAKrD,IAAKqH,EAAS5I,YACf0E,EAAAC,EAAAC,cAACiE,EAAA,EAAD,CAAMC,GAAIF,EAAS7I,MACf2E,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAQC,MAAM,aACTsD,EAAS5I,cAOtB0E,EAAAC,EAAAC,cAAA,OAAKrD,IAAKqH,EAAS5I,YACf0E,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAQC,MAAM,aACTsD,EAAS5I,iBAWtC0E,EAAAC,EAAAC,cAAA,OAAKI,MAAO,CAACuD,UAAW,SAGnB1I,EAAcC,MAAM6I,IAAI,SAACC,GACtB,OAAsB,OAAlBA,EAAS7I,KAEL2E,EAAAC,EAAAC,cAAA,OAAKrD,IAAKqH,EAAS5I,YACf0E,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAOuB,OAAK,EAACnJ,KAAM6I,EAAS7I,KAAMG,UAAW0I,EAAS1I,aAIvD,kBAtHT4G,IAAMC,WCNzBoC,EARO,WAClB,OACIzE,EAAAC,EAAAC,cAACiE,EAAA,EAAD,KACInE,EAAAC,EAAAC,cAACwE,EAAD,QCIQd,QACW,cAA7Be,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhF,EAAAC,EAAAC,cAAC+E,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnG,KAAK,SAAAoG,GACjCA,EAAaC","file":"static/js/main.318a38dc.chunk.js","sourcesContent":["import {createMuiTheme} from \"@material-ui/core\";\n\nexport const theme = createMuiTheme({\n    \"palette\": {\n        \"common\": {\n            \"black\": \"#000\",\n            \"white\": \"#fff\"\n        },\n        \"background\": {\n            \"paper\": \"rgba(255, 255, 255, 1)\",\n            \"default\": \"#fafafa\"\n        },\n        \"primary\": {\n            \"light\": \"#40c4ff\",\n            \"main\": \"#039be5\",\n            \"dark\": \"rgba(74, 144, 226, 1)\",\n            \"contrastText\": \"#fff\"\n        },\n        \"secondary\": {\n            \"light\": \"#4ffcff\",\n            \"main\": \"#fff\",\n            \"dark\": \"#22c5bb\",\n            \"contrastText\": \"#fff\"\n        },\n        \"error\": {\n            \"light\": \"#2327e5\",\n            \"main\": \"#001df4\",\n            \"dark\": \"#0b18d3\",\n            \"contrastText\": \"#fff\"\n        },\n        \"text\": {\n            \"primary\": \"rgba(0, 0, 0, 0.87)\",\n            \"secondary\": \"rgba(0, 0, 0, 0.54)\",\n            \"disabled\": \"rgba(0, 0, 0, 0.38)\",\n            \"hint\": \"rgba(0, 0, 0, 0.38)\"\n        }\n    }\n});\n","export const pagesForMenus =  {\n    pages:\n        [\n            {path: '/help', buttonText: 'Помощь', isLogged: false, component: null}\n        ]\n};\n","export const serverApi = 'http://192.168.0.122:7777';\n","import {serverApi} from \"../AppConstants\";\n\ninterface loginData {\n    email: string;\n    password: string\n}\n\n\nexport default class Http {\n\n    public url = serverApi;\n\n    public loginForToken (data: loginData, path: string) {\n        return fetch(this.url + path, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        });\n    }\n\n    public loginWithToken (token: string, path: string) {\n        return fetch(this.url + path, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n\n        });\n    }\n}\n","export class Link {\n    public data:string;\n    constructor(data:string) {\n        this.data = data\n    }\n}\n\nexport class DataStorage {\n    public storage:any;\n\n    constructor(storage:any) {\n        this.storage = storage;\n    }\n\n    get getUserData() {\n        return this.storage.data;\n    }\n\n    add(data:string) {\n        this.storage.add(data);\n    }\n\n    logOut () {\n        this.storage.logOut();\n    }\n\n}\n","export class LocalStorage {\n    public data:string;\n    constructor() {\n        // @ts-ignore\n        this.data = JSON.parse(localStorage.getItem('data'));\n\n    }\n\n    add(data:any) {\n        this.data = data;\n        this.save();\n    }\n\n    logOut() {\n        localStorage.removeItem('data');\n    }\n\n    save() {\n        localStorage.setItem('data', JSON.stringify(this.data)); // stringify - преобразование объекта в строку\n    }\n\n\n}\n\n","import React from 'react'\nimport {\n    Button, CircularProgress,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle, Fade,\n    TextField, Typography\n} from \"@material-ui/core\";\nimport Http from \"../../serverApi/http\";\nimport {DataStorage} from \"../../serverApi/dataStorage\";\nimport {LocalStorage} from \"../../serverApi/localStorage\";\n\ninterface DialogLoginFormProps {\n    mobile: boolean\n}\n\ninterface DialogLoginFormState {\n    openDialogWindow: boolean,\n    email: string,\n    password: string,\n    isLoading: boolean\n    loginState: string\n}\n\nexport class DialogLoginForm extends React.Component<DialogLoginFormProps, DialogLoginFormState> {\n\n    state = {\n        openDialogWindow: false,\n        email: '',\n        password: '',\n        isLoading: false,\n        loginState: ''\n    };\n\n    public handleOpenLoginDialog = () => {\n        this.setState({\n            openDialogWindow: true\n        })\n    };\n\n    public handleClose = () => {\n        this.setState({\n            openDialogWindow: false,\n\n        })\n    };\n\n    public login = () => {\n        this.setState({\n            isLoading: true\n        });\n        const http = new Http();\n        const data = {\n            email: this.state.email,\n            password: this.state.password,\n\n        };\n        http.loginForToken(data, '/auth')\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    if (result.token === undefined){\n                        this.setState({\n                            loginState: 'Email или пароль введены неверно'\n                        })\n                    } else {\n                        this.setState({\n                            loginState: 'Вы успешно авторизованы. Сейчас Вы будете перенаправлены'\n                        }, ()=>{\n                            const storage = new DataStorage(new LocalStorage());\n                            storage.add(result.token);\n                            http.loginWithToken(result.token, '/user')\n                                .then(res => res.json())\n                                .then (\n                                    (result)=>{\n                                        // КОНЕЧНЫЕ ДАННЫЕ\n                                        this.setState({\n                                            openDialogWindow: false\n                                        })\n\n                                    }, (error) => {\n                                        console.log(error)\n                                    }\n                                )\n                        })\n                    }\n                    this.setState({\n                        isLoading: false\n                    })\n                },\n                (error) => {\n                    console.log(error)\n                }\n            );\n\n\n    };\n\n    public handleEmailChange = (event: any) => {\n        this.setState({\n            email: event.target.value\n        })\n    };\n\n    public handlePasswordChange = (event: any) => {\n        this.setState({\n            password: event.target.value\n        })\n    };\n\n    public render() {\n        return (\n            <div>\n\n                {this.props.mobile === true ?\n                    <div onClick={this.handleOpenLoginDialog} style={{height: '2rem', width: '7rem'}}>\n                        <Typography variant=\"button\">Вход</Typography>\n                    </div>\n                    :\n                    <Button color=\"secondary\" onClick={this.handleOpenLoginDialog}>\n                        Вход\n                    </Button>}\n\n                <Dialog open={this.state.openDialogWindow} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\">\n                    <DialogTitle id=\"form-dialog-title\">Вход</DialogTitle>\n                    <div style={{marginLeft: 'auto', marginRight: 'auto'}}>\n                        <Fade\n                            in={this.state.isLoading}\n                            style={{\n                                transitionDelay: this.state.isLoading ? '800ms' : '0ms',\n                            }}\n                            unmountOnExit\n                        >\n                            <CircularProgress/>\n                        </Fade>\n                    </div>\n                    <DialogContent>\n                        <DialogContentText>\n                            Введите Email и пароль\n                        </DialogContentText>\n\n                        <Typography variant=\"button\">{this.state.loginState}</Typography>\n\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"login\"\n                            label={<Typography>Email <span style={{color: 'red'}}>*</span></Typography>}\n                            type=\"email\"\n                            fullWidth\n                            onChange={this.handleEmailChange}\n                        />\n                        <TextField\n                            margin=\"dense\"\n                            id=\"pass\"\n                            label={<Typography>Пароль <span style={{color: 'red'}}>*</span></Typography>}\n                            type=\"password\"\n                            fullWidth\n                            onChange={this.handlePasswordChange}\n                        />\n                    </DialogContent>\n\n                    <DialogActions>\n\n                        <Button onClick={this.login} color=\"primary\">\n                            Войти\n                        </Button>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            Отмена\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport {\n    Button, CircularProgress,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle, Fade,\n    TextField, Typography\n} from \"@material-ui/core\";\nimport Http from \"../../serverApi/http\";\nimport {DataStorage} from \"../../serverApi/dataStorage\";\nimport {LocalStorage} from \"../../serverApi/localStorage\";\n\ninterface DialogRegisterFormProps {\n    mobile: boolean\n}\n\ninterface DialogRegisterFormState {\n    openDialogWindow: boolean,\n    email: string,\n    password: string,\n    confirmPassword: string,\n    isLoading: boolean,\n    registrationState: string\n}\n\nexport class DialogRegisterForm extends React.Component<DialogRegisterFormProps, DialogRegisterFormState> {\n\n    state = {\n        openDialogWindow: false,\n        email: '',\n        password: '',\n        confirmPassword: '',\n        isLoading: false,\n        registrationState: ''\n    };\n\n    public handleOpenLoginDialog = () => {\n        this.setState({\n            openDialogWindow: true\n        })\n    };\n\n\n    public handleClose = () => {\n\n        this.setState({\n            openDialogWindow: false,\n\n        })\n    };\n\n    public login = () => {\n        this.setState({\n            isLoading: true\n        });\n        const http = new Http();\n        const data = {\n            email: this.state.email,\n            password: this.state.password,\n            confirmPassword: this.state.confirmPassword\n        };\n        http.loginForToken(data, '/registration')\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isLoading: false\n                    });\n                    if (result === 'Passwords Not Confrimed'){\n                        this.setState({\n                            registrationState: 'Введенные пароли не совпадают'\n                        })\n                    }\n\n                    if (result.token !== undefined) {\n                        console.log(result);\n                        const storage = new DataStorage(new LocalStorage());\n                        storage.add(result.token);\n                        this.setState({\n                            registrationState: 'Вы успешно зарегистрированы. Сейчас Вы будете перенаправлены'\n                        }, ()=>{\n                            http.loginWithToken(result.token, '/user')\n                                .then(res => res.json())\n                                .then (\n                                    (result)=>{\n                                        console.log(result)\n                                        // КОНЕЧНЫЕ ДАННЫЕ\n                                        this.setState({\n                                            openDialogWindow: false\n                                        })\n\n                                    }, (error) => {\n                                        console.log(error)\n                                    }\n                                )\n                        })\n                    }\n\n                    if (result === 'This email already registered'){\n                        this.setState({\n                            registrationState: 'Этот Email уже занят'\n                        })\n                    }\n\n                    if (result === '8 symbols') {\n                        this.setState({\n                            registrationState: 'Длина пароля должна быть не менее 8 символов'\n                        })\n                    }\n                },\n                (error) => {\n                    console.log(error)\n                }\n            );\n    };\n\n    public handleEmailChange = (event: any) => {\n        this.setState({\n            email: event.target.value\n        })\n    };\n\n    public handlePasswordChange = (event: any) => {\n        this.setState({\n            password: event.target.value\n        })\n    };\n\n    public handleConfirmPasswordChange = (event: any) => {\n        this.setState({\n            confirmPassword: event.target.value\n        })\n    };\n\n    public render() {\n        return (\n            <div>\n\n                {this.props.mobile === true ?\n                    <div onClick={this.handleOpenLoginDialog} style={{height: '2rem', width: '7rem'}}>\n                        <Typography variant=\"button\">Регистрация</Typography>\n                    </div>\n                    :\n                    <Button color=\"secondary\" onClick={this.handleOpenLoginDialog}>\n                        Регистрация\n                    </Button>}\n\n                <Dialog open={this.state.openDialogWindow} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\">\n                    <DialogTitle id=\"form-dialog-title\">Регистрация</DialogTitle>\n                    <div style={{marginLeft: 'auto', marginRight: 'auto'}}>\n                        <Fade\n                            in={this.state.isLoading}\n                            style={{\n                                transitionDelay: this.state.isLoading ? '800ms' : '0ms',\n                            }}\n                            unmountOnExit\n                        >\n                            <CircularProgress/>\n                        </Fade>\n                    </div>\n                    <DialogContent>\n                        <DialogContentText>\n                            Для регистрации необходимо ввести свой email и пароль. Введенные пароли должны совпадать\n                        </DialogContentText>\n\n                        <Typography variant=\"button\">{this.state.registrationState}</Typography>\n\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"login\"\n                            label={<Typography>Email <span style={{color: 'red'}}>*</span></Typography>}\n                            type=\"email\"\n                            fullWidth\n                            onChange={this.handleEmailChange}\n                        />\n                        <TextField\n                            margin=\"dense\"\n                            id=\"pass\"\n                            label={<Typography>Пароль <span style={{color: 'red'}}>*</span></Typography>}\n                            type=\"password\"\n                            fullWidth\n                            onChange={this.handlePasswordChange}\n                        />\n                        <TextField\n                            margin=\"dense\"\n                            id=\"confirmPass\"\n                            label={<Typography>Повторите пароль <span style={{color: 'red'}}>*</span></Typography>}\n                            type=\"password\"\n                            fullWidth\n                            onChange={this.handleConfirmPasswordChange}\n                        />\n                    </DialogContent>\n\n                    <DialogActions>\n                        <Button onClick={this.login} color=\"primary\">\n                            Войти\n                        </Button>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            Отмена\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        )\n    }\n}\n","import {Switch, Route, Link, NavLink} from 'react-router-dom'\nimport React from 'react'\nimport {AppBar, Button, Menu, Toolbar, Typography} from \"@material-ui/core\";\nimport {MuiThemeProvider} from '@material-ui/core/styles';\nimport {theme} from \"../Theme\";\nimport MenuIcon from '@material-ui/icons/Menu';\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport {pagesForMenus} from \"../pages/AppPagesList\";\nimport {DialogLoginForm} from \"./Dialogs/DialogLoginForm\";\nimport {DialogRegisterForm} from \"./Dialogs/DialogRegisterForm\";\n\n\ninterface pageData {\n    path: string | null;\n    buttonText: string;\n    isLogged: boolean\n    component: any\n}\n\nexport default class Main extends React.Component {\n\n    public state = {\n        menuEl: null,\n        mobileOpenDialogLoginForm: false\n    };\n\n\n    public handleClick = (evt: React.MouseEvent<HTMLButtonElement>) => {\n        this.setState({\n            menuEl: evt.currentTarget\n        })\n    };\n\n    public handleClose = () => {\n        this.setState({\n            menuEl: null\n        })\n    };\n\n    public render() {\n        return (\n            <Switch>\n                <MuiThemeProvider theme={theme}>\n                    <div>\n                        {/* МЕНЮ В МОБИЛЬНОЙ ВЕРСИИ */}\n                        <AppBar>\n                            <Toolbar className=\"topBarMin\">\n                                <Button color=\"secondary\" aria-controls=\"customized-menu\" aria-haspopup=\"true\"\n                                        onClick={this.handleClick}>\n                                    <MenuIcon/>\n                                </Button>\n                                <Menu\n                                    id=\"customized-menu\" anchorEl={this.state.menuEl} keepMounted\n                                    open={Boolean(this.state.menuEl)} onClose={this.handleClose}\n                                    style={{marginTop: '2rem'}}>\n                                    {/* ОТДЕЛЬНО ВОЗВРАЩАЕТСЯ КНОПКА ВХОДА */}\n                                    <div>\n                                        <MenuItem>\n                                           <DialogLoginForm mobile={true}/>\n                                        </MenuItem>\n                                    </div>\n                                    <div>\n                                        <MenuItem>\n                                            <DialogRegisterForm mobile={true}/>\n                                        </MenuItem>\n                                    </div>\n                                    {pagesForMenus.pages.map((dataPage: pageData) => {\n                                            if (dataPage.path !== null) {\n                                                return (\n                                                    <div key={dataPage.buttonText}>\n                                                        <NavLink to={dataPage.path} style={{color: \"black\"}}\n                                                                 activeStyle={{color: \"black\", fontWeight: \"bold\"}}>\n                                                            <MenuItem onClick={this.handleClose}>\n                                                                <Typography variant=\"button\">{dataPage.buttonText}</Typography>\n                                                            </MenuItem>\n                                                        </NavLink>\n                                                    </div>\n                                                )\n                                            } else {\n                                                return (\n                                                    <div key={dataPage.buttonText}>\n                                                        <MenuItem onClick={this.handleClose}>\n                                                            <Typography variant=\"button\">{dataPage.buttonText}</Typography>\n                                                        </MenuItem>\n                                                    </div>\n                                                )\n                                            }\n                                        }\n                                    )}\n\n                                </Menu>\n                            </Toolbar>\n                        </AppBar>\n\n                        {/* МЕНЮ В ПОЛНОЙ ВЕРСИИ */}\n                        <AppBar>\n                            <Toolbar className=\"topBarMax\" style={{textAlign: 'right'}}>\n                                {/* ОТДЕЛЬНО ВОЗВРАЩАЕТСЯ КНОПКА ВХОДА */}\n                                    <DialogLoginForm mobile={false}/>\n                                    <DialogRegisterForm mobile={false}/>\n                                {pagesForMenus.pages.map((dataPage: pageData) => {\n                                    if (dataPage.path !== null) {\n                                        return (\n                                            <div key={dataPage.buttonText}>\n                                                <Link to={dataPage.path}>\n                                                    <Button color=\"secondary\">\n                                                        {dataPage.buttonText}\n                                                    </Button>\n                                                </Link>\n                                            </div>\n                                        )\n                                    } else {\n                                        return (\n                                            <div key={dataPage.buttonText}>\n                                                <Button color=\"secondary\">\n                                                    {dataPage.buttonText}\n                                                </Button>\n                                            </div>\n                                        )\n                                    }\n                                })}\n\n                            </Toolbar>\n                        </AppBar>\n\n                        {/*{ ТЕЛО ВСЕЙ СТРАНИЦЫ }*/}\n                        <div style={{marginTop: '5rem'}}>\n\n\n                            {pagesForMenus.pages.map((dataPage: pageData) => {\n                                if (dataPage.path !== null) {\n                                    return (\n                                        <div key={dataPage.buttonText}>\n                                            <Route exact path={dataPage.path} component={dataPage.component}/>\n                                        </div>\n                                    )\n                                } else {\n                                    return null\n                                }\n                            })}\n                        </div>\n                    </div>\n                </MuiThemeProvider>\n            </Switch>\n        )\n    }\n};\n","import React from 'react';\nimport './App.css';\nimport {BrowserRouter} from \"react-router-dom\";\nimport Main from \"./components/Main\";\n\nconst App: React.FC = () => {\n    return (\n        <BrowserRouter>\n            <Main/>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}