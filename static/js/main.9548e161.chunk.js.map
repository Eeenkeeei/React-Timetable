{"version":3,"sources":["Theme.ts","pages/HelpPage.tsx","pages/StartPage.tsx","pages/AccountPage.tsx","pages/AppPagesList.ts","AppConstants.tsx","serverApi/http.ts","serverApi/dataStorage.ts","serverApi/localStorage.ts","components/Dialogs/DialogLoginForm.tsx","components/Dialogs/DialogRegisterForm.tsx","components/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","palette","common","black","white","background","paper","default","primary","light","main","dark","contrastText","secondary","error","text","disabled","hint","HelpPage","react","React","StartPage","style","flexGrow","Grid","container","spacing","textAlign","item","xs","sm","Card","CardContent","Typography","variant","color","id","title","subtitle","textBody","img","map","cardBody","key","length","CardMedia","component","alt","height","image","AccountPage","pagesForMenus","pages","path","buttonText","isDataConfirmed","serverApi","Http","url","data","fetch","this","method","headers","Content-Type","body","JSON","stringify","token","Authorization","concat","DataStorage","storage","Object","classCallCheck","createClass","value","add","logOut","get","LocalStorage","parse","localStorage","getItem","save","removeItem","setItem","DialogLoginForm","_React$Component","_getPrototypeOf2","_this","_len","arguments","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","state","openDialogWindow","email","password","isLoading","loginState","handleOpenLoginDialog","setState","handleClose","login","http","loginForToken","then","res","json","result","undefined","loginWithToken","props","isLoginSuccess","console","log","handleEmailChange","event","target","handlePasswordChange","inherits","react_default","a","createElement","mobile","onClick","width","Button","Dialog","open","onClose","aria-labelledby","DialogTitle","marginLeft","marginRight","CircularProgress","DialogContent","DialogContentText","TextField","autoFocus","margin","label","type","fullWidth","onChange","DialogActions","Component","DialogRegisterForm","confirmPassword","registrationState","handleConfirmPasswordChange","Main","menuEl","mobileOpenDialogLoginForm","handleClick","evt","currentTarget","handleExitButton","_this2","getUserData","_this3","isDataConfirmedMobileMenu","AppBar","Toolbar","className","aria-controls","aria-haspopup","Menu_default","Menu","anchorEl","keepMounted","Boolean","marginTop","dataPage","react_router_dom","to","activeStyle","fontWeight","MenuItem","Input","isDataNotConfirmedMobileMenu","DialogLoginForm_DialogLoginForm","DialogRegisterForm_DialogRegisterForm","isLoadingComponent","MuiThemeProvider","react_router","Container","exact","StartPage_StartPage","isDataNotConfrimed","App","Main_Main","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9548e161.chunk.js","sourcesContent":["import {createMuiTheme} from \"@material-ui/core\";\n\nexport const theme = createMuiTheme({\n    \"palette\": {\n        \"common\": {\n            \"black\": \"#000\",\n            \"white\": \"#fff\"\n        },\n        \"background\": {\n            \"paper\": \"rgba(255, 255, 255, 1)\",\n            \"default\": \"#fafafa\"\n        },\n        \"primary\": {\n            \"light\": \"#40c4ff\",\n            \"main\": \"#039be5\",\n            \"dark\": \"rgba(74, 144, 226, 1)\",\n            \"contrastText\": \"#fff\"\n        },\n        \"secondary\": {\n            \"light\": \"#4ffcff\",\n            \"main\": \"#fff\",\n            \"dark\": \"#22c5bb\",\n            \"contrastText\": \"#fff\"\n        },\n        \"error\": {\n            \"light\": \"#2327e5\",\n            \"main\": \"#001df4\",\n            \"dark\": \"#0b18d3\",\n            \"contrastText\": \"#fff\"\n        },\n        \"text\": {\n            \"primary\": \"rgba(0, 0, 0, 0.87)\",\n            \"secondary\": \"rgba(0, 0, 0, 0.54)\",\n            \"disabled\": \"rgba(0, 0, 0, 0.38)\",\n            \"hint\": \"rgba(0, 0, 0, 0.38)\"\n        }\n    }\n});\n","import * as React from \"react\";\n\nexport default class HelpPage extends React.Component {\n\n    public render() {\n        return (\n            <div>\n               HelpPage\n\n            </div>\n        )\n    }\n}\n","import * as React from \"react\";\nimport {Card, CardContent, CardMedia, Grid, Typography} from \"@material-ui/core\";\n\nexport default class StartPage extends React.Component {\n\n\n    public render() {\n\n        const cardTextArray = [\n            {\n                id: '0',\n                title: 'Задание на дом',\n                subtitle: '',\n                textBody: 'Добавь домашнее задание на любую дату',\n                img: 'https://pp.userapi.com/c849032/v849032912/1d354c/o7psD1MZyB8.jpg'\n            },\n            {\n                id: '1',\n                title: 'Новости',\n                subtitle: '',\n                textBody: 'Получай всегда актуальные новости КАИ и не только',\n                img: 'https://pp.userapi.com/c849032/v849032912/1d354c/o7psD1MZyB8.jpg'\n            },\n            {\n                id: '2',\n                title: 'Уведомления',\n                subtitle: 'Псс... хочешь немного уведомлений?',\n                textBody: 'Отклоняй надоедливые уведомления каждый раз, когда они почему-то приходят',\n                img: 'https://pp.userapi.com/c849032/v849032912/1d354c/o7psD1MZyB8.jpg'\n            },\n            {\n                id: '3',\n                title: 'Внеси собственное расписание',\n                subtitle: '',\n                textBody: 'Сервис позволяет тебе внести свое расписание, записывать задания на каждый отдельный предмет и отмечать, если оно было уже выполнено!',\n                img: ''\n            },\n            {\n                id: '4',\n                title: 'Следи за своими задачами',\n                subtitle: '',\n                textBody: 'Внеси свои задачи, чтобы не забыть, что нужно сделать. Редактируй их, отмечай выполненные и просматривай их в отдельном хранилище!',\n                img: ''\n            },\n            {\n                id: '5',\n                title: 'Сохрани все важные ссылки',\n                subtitle: '',\n                textBody: 'Сохрани важные ссылки, чтобы не забыть прочитать их позже! Редактируй, добавляй теги, используй поиск по названиям и тегам!',\n                img: ''\n            },\n\n        ];\n        return (\n            <div>\n                <div style={{flexGrow: 1}}>\n                    <Grid container spacing={3}>\n                        <Grid style={{textAlign: 'center'}} item xs={12} sm={12} >\n                            <Card>\n\n                                <CardContent>\n                                    <Typography variant=\"h5\">\n                                        ЗДЕСЬ БУДЕТ БЛОК С НОВОСТЯМИ\n                                    </Typography>\n                                    <Typography color=\"textSecondary\">\n                                        КОГДА-НИБУДЬ\n                                    </Typography>\n                                </CardContent>\n                            </Card>\n                        </Grid>\n                        {cardTextArray.map((cardBody) => {\n                            return (\n                                <Grid style={{textAlign: 'center'}} item xs={12} sm={4} key={cardBody.id}>\n                                    <Card>\n                                        {cardBody.img.length > 0 ? <CardMedia\n                                            component=\"img\"\n                                            alt=\"Contemplative Reptile\"\n                                            height=\"140\"\n                                            image={cardBody.img}\n                                            title=\"Contemplative Reptile\"\n                                        /> : null}\n\n                                        <CardContent>\n                                            <Typography variant=\"h5\">\n                                                {cardBody.title}\n                                            </Typography>\n                                            <Typography color=\"textSecondary\">\n                                                {cardBody.subtitle}\n                                            </Typography>\n                                            <Typography variant=\"body1\" component=\"p\">\n                                                {cardBody.textBody}\n                                            </Typography>\n                                        </CardContent>\n                                    </Card>\n                                </Grid>\n                            )\n                        })}\n                    </Grid>\n                </div>\n            </div>\n        )\n    }\n}\n","import * as React from \"react\";\n\nexport default class AccountPage extends React.Component {\n\n    public render() {\n        return (\n            <div>\n                AccountPage\n\n            </div>\n        )\n    }\n}\n","import HelpPage from \"./HelpPage\";\nimport StartPage from \"./StartPage\";\nimport AccountPage from \"./AccountPage\";\n\nexport const pagesForMenus =  {\n    pages:\n        [\n            {path: '/', buttonText: 'Главная', isDataConfirmed: false,  component: StartPage},\n            {path: '/help', buttonText: 'Помощь', isDataConfirmed: false, component: HelpPage},\n            {path: '/account', buttonText: 'Аккаунт', isDataConfirmed: true, component: AccountPage},\n        ]\n};\n","export const serverApi = 'https://react-timetable-server.herokuapp.com';\n// https://react-timetable-server.herokuapp.com\n","import {serverApi} from \"../AppConstants\";\n\ninterface loginData {\n    email: string;\n    password: string\n}\n\n\nexport default class Http {\n\n    public url = serverApi;\n\n    public loginForToken (data: loginData, path: string) {\n        return fetch(this.url + path, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        });\n    }\n\n    public loginWithToken (token: string, path: string) {\n        return fetch(this.url + path, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n\n        });\n    }\n}\n","export class Link {\n    public data:string;\n    constructor(data:string) {\n        this.data = data\n    }\n}\n\nexport class DataStorage {\n    public storage:any;\n\n    constructor(storage:any) {\n        this.storage = storage;\n    }\n\n    get getUserData() {\n        return this.storage.data;\n    }\n\n    add(data:string) {\n        this.storage.add(data);\n    }\n\n    logOut () {\n        this.storage.logOut();\n    }\n\n}\n","export class LocalStorage {\n    public data:string;\n    constructor() {\n        // @ts-ignore\n        this.data = JSON.parse(localStorage.getItem('data'));\n\n    }\n\n    add(data:any) {\n        this.data = data;\n        this.save();\n    }\n\n    logOut() {\n        localStorage.removeItem('data');\n    }\n\n    save() {\n        localStorage.setItem('data', JSON.stringify(this.data)); // stringify - преобразование объекта в строку\n    }\n\n\n}\n\n","import React from 'react'\nimport {\n    Button, CircularProgress,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle, Fade,\n    TextField, Typography\n} from \"@material-ui/core\";\nimport Http from \"../../serverApi/http\";\nimport {DataStorage} from \"../../serverApi/dataStorage\";\nimport {LocalStorage} from \"../../serverApi/localStorage\";\n\ninterface DialogLoginFormProps {\n    mobile: boolean\n    isLoginSuccess: any;\n}\n\ninterface DialogLoginFormState {\n    openDialogWindow: boolean,\n    email: string,\n    password: string,\n    isLoading: boolean\n    loginState: string\n}\n\nexport class DialogLoginForm extends React.Component<DialogLoginFormProps, DialogLoginFormState> {\n\n    state = {\n        openDialogWindow: false,\n        email: '',\n        password: '',\n        isLoading: false,\n        loginState: ''\n    };\n\n    public handleOpenLoginDialog = () => {\n        this.setState({\n            openDialogWindow: true\n        })\n    };\n\n    public handleClose = () => {\n        this.setState({\n            openDialogWindow: false,\n\n        })\n    };\n\n    public login = () => {\n        this.setState({\n            isLoading: true\n        });\n        const http = new Http();\n        const data = {\n            email: this.state.email,\n            password: this.state.password,\n        };\n        http.loginForToken(data, '/auth')\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    if (result.token === undefined){\n                        this.setState({\n                            loginState: 'Email или пароль введены неверно'\n                        })\n                    } else {\n                        this.setState({\n                            loginState: 'Вы успешно авторизованы. Сейчас Вы будете перенаправлены'\n                        }, ()=>{\n                            const storage = new DataStorage(new LocalStorage());\n                            storage.add(result.token);\n                            http.loginWithToken(result.token, '/user')\n                                .then(res => res.json())\n                                .then (\n                                    (result)=>{\n                                        // КОНЕЧНЫЕ ДАННЫЕ\n                                        this.setState({\n                                            openDialogWindow: false\n                                        });\n                                        this.props.isLoginSuccess(result)\n\n                                    }, (error) => {\n                                        console.log(error)\n                                    }\n                                )\n                        })\n                    }\n                    this.setState({\n                        isLoading: false\n                    })\n                },\n                (error) => {\n                    console.log(error)\n                }\n            );\n\n\n    };\n\n    public handleEmailChange = (event: any) => {\n        this.setState({\n            email: event.target.value\n        })\n    };\n\n    public handlePasswordChange = (event: any) => {\n        this.setState({\n            password: event.target.value\n        })\n    };\n\n    public render() {\n        return (\n            <div>\n\n                {this.props.mobile === true ?\n                    <div onClick={this.handleOpenLoginDialog} style={{height: '2rem', width: '7rem'}}>\n                        <Typography variant=\"button\">Вход</Typography>\n                    </div>\n                    :\n                    <Button color=\"secondary\" onClick={this.handleOpenLoginDialog}>\n                        Вход\n                    </Button>}\n\n                <Dialog open={this.state.openDialogWindow} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\">\n                    <DialogTitle id=\"form-dialog-title\">Вход</DialogTitle>\n                    <div style={{marginLeft: 'auto', marginRight: 'auto'}}>\n                        {this.state.isLoading ? <CircularProgress/> : null}\n                    </div>\n                    <DialogContent>\n                        <DialogContentText>\n                            Введите Email и пароль\n                        </DialogContentText>\n\n                        <Typography variant=\"button\">{this.state.loginState}</Typography>\n\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"login\"\n                            label={<Typography>Email <span style={{color: 'red'}}>*</span></Typography>}\n                            type=\"email\"\n                            fullWidth\n                            onChange={this.handleEmailChange}\n                        />\n                        <TextField\n                            margin=\"dense\"\n                            id=\"pass\"\n                            label={<Typography>Пароль <span style={{color: 'red'}}>*</span></Typography>}\n                            type=\"password\"\n                            fullWidth\n                            onChange={this.handlePasswordChange}\n                        />\n                    </DialogContent>\n\n                    <DialogActions>\n\n                        <Button onClick={this.login} color=\"primary\">\n                            Войти\n                        </Button>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            Отмена\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport {\n    Button, CircularProgress,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle, Fade,\n    TextField, Typography\n} from \"@material-ui/core\";\nimport Http from \"../../serverApi/http\";\nimport {DataStorage} from \"../../serverApi/dataStorage\";\nimport {LocalStorage} from \"../../serverApi/localStorage\";\nimport CustomizedSnackbars from \"./SnackBar\";\n\ninterface DialogRegisterFormProps {\n    mobile: boolean\n    isLoginSuccess: any;\n}\n\ninterface DialogRegisterFormState {\n    openDialogWindow: boolean,\n    email: string,\n    password: string,\n    confirmPassword: string,\n    isLoading: boolean,\n    registrationState: string\n}\n\nexport class DialogRegisterForm extends React.Component<DialogRegisterFormProps, DialogRegisterFormState> {\n\n    state = {\n        openDialogWindow: false,\n        email: '',\n        password: '',\n        confirmPassword: '',\n        isLoading: false,\n        registrationState: ''\n    };\n\n    public handleOpenLoginDialog = () => {\n        this.setState({\n            openDialogWindow: true\n        })\n    };\n\n\n    public handleClose = () => {\n\n        this.setState({\n            openDialogWindow: false,\n\n        })\n    };\n\n    public login = () => {\n        this.setState({\n            isLoading: true\n        });\n        const http = new Http();\n        const data = {\n            email: this.state.email,\n            password: this.state.password,\n            confirmPassword: this.state.confirmPassword\n        };\n        http.loginForToken(data, '/registration')\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isLoading: false\n                    });\n                    if (result === 'Passwords Not Confirmed') {\n                        console.log(result);\n                        this.setState({\n                            registrationState: 'Введенные пароли не совпадают'\n                        })\n                    }\n\n                    if (result.token !== undefined) {\n                        this.setState({\n                            registrationState: 'Вы успешно зарегистрированы. Сейчас Вы будете перенаправлены'\n                        }, () => {\n                            const storage = new DataStorage(new LocalStorage());\n                            storage.add(result.token);\n                            http.loginWithToken(result.token, '/user')\n                                .then(res => res.json())\n                                .then(\n                                    (result) => {\n                                        // КОНЕЧНЫЕ ДАННЫЕ\n                                        this.setState({\n                                            openDialogWindow: false\n                                        });\n                                        this.props.isLoginSuccess(result)\n\n                                    }, (error) => {\n                                        console.log(error)\n                                    }\n                                )\n                        })\n                    }\n\n                    if (result === 'This email already registered') {\n                        this.setState({\n                            registrationState: 'Этот Email уже занят'\n                        })\n                    }\n\n                    if (result === '8 symbols') {\n                        this.setState({\n                            registrationState: 'Длина пароля должна быть не менее 8 символов'\n                        })\n                    }\n                },\n                (error) => {\n                    console.log(error)\n                }\n            );\n    };\n\n    public handleEmailChange = (event: any) => {\n        this.setState({\n            email: event.target.value\n        })\n    };\n\n    public handlePasswordChange = (event: any) => {\n        this.setState({\n            password: event.target.value\n        })\n    };\n\n    public handleConfirmPasswordChange = (event: any) => {\n        this.setState({\n            confirmPassword: event.target.value\n        })\n    };\n\n    public render() {\n        return (\n            <div>\n\n                {this.props.mobile === true ?\n                    <div onClick={this.handleOpenLoginDialog} style={{height: '2rem', width: '7rem'}}>\n                        <Typography variant=\"button\">Регистрация</Typography>\n                    </div>\n                    :\n                    <Button color=\"secondary\" onClick={this.handleOpenLoginDialog}>\n                        Регистрация\n                    </Button>}\n\n                <Dialog open={this.state.openDialogWindow} onClose={this.handleClose}\n                        aria-labelledby=\"form-dialog-title\">\n                    <DialogTitle id=\"form-dialog-title\">Регистрация</DialogTitle>\n                    <div style={{marginLeft: 'auto', marginRight: 'auto'}}>\n                        {this.state.isLoading ? <CircularProgress/> : null}\n                    </div>\n                    <DialogContent>\n                        <DialogContentText>\n                            Для регистрации необходимо ввести свой email и пароль. Введенные пароли должны совпадать\n                        </DialogContentText>\n\n                        <Typography variant=\"button\">{this.state.registrationState}</Typography>\n\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"login\"\n                            label={<Typography>Email <span style={{color: 'red'}}>*</span></Typography>}\n                            type=\"email\"\n                            fullWidth\n                            onChange={this.handleEmailChange}\n                        />\n                        <TextField\n                            margin=\"dense\"\n                            id=\"pass\"\n                            label={<Typography>Пароль <span style={{color: 'red'}}>*</span></Typography>}\n                            type=\"password\"\n                            fullWidth\n                            onChange={this.handlePasswordChange}\n                        />\n                        <TextField\n                            margin=\"dense\"\n                            id=\"confirmPass\"\n                            label={<Typography>Повторите пароль <span style={{color: 'red'}}>*</span></Typography>}\n                            type=\"password\"\n                            fullWidth\n                            onChange={this.handleConfirmPasswordChange}\n                        />\n                    </DialogContent>\n\n                    <DialogActions>\n                        <Button onClick={this.login} color=\"primary\">\n                            Зарегистрироваться\n                        </Button>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            Отмена\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        )\n    }\n}\n","import {Switch, Route, Link, NavLink, Redirect} from 'react-router-dom'\nimport React from 'react'\nimport {AppBar, Button, CircularProgress, Container, Menu, Toolbar, Typography} from \"@material-ui/core\";\nimport {MuiThemeProvider} from '@material-ui/core/styles';\nimport {theme} from \"../Theme\";\nimport MenuIcon from '@material-ui/icons/Menu';\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport {pagesForMenus} from \"../pages/AppPagesList\";\nimport {DialogLoginForm} from \"./Dialogs/DialogLoginForm\";\nimport {DialogRegisterForm} from \"./Dialogs/DialogRegisterForm\";\nimport {DataStorage} from \"../serverApi/dataStorage\";\nimport {LocalStorage} from \"../serverApi/localStorage\";\nimport Http from \"../serverApi/http\";\nimport {Input, Star} from \"@material-ui/icons\";\nimport CustomizedSnackbars from \"./Dialogs/SnackBar\";\nimport StartPage from \"../pages/StartPage\";\nimport HelpPage from \"../pages/HelpPage\";\n\n\ninterface pageData {\n    path: string;\n    buttonText: string;\n    isDataConfirmed: boolean;\n    component: any\n}\n\ninterface MainState {\n    menuEl: any,\n    mobileOpenDialogLoginForm: any,\n    isDataConfirmed: any,\n    data: any\n}\n\nexport default class Main extends React.Component {\n\n    public storage = new DataStorage(new LocalStorage());\n\n    public state: MainState = {\n        menuEl: null,\n        mobileOpenDialogLoginForm: false,\n        isDataConfirmed: null, // флаг становится true только в том случае, если пришли данные по токену. Флаг прокидывается в детей и внутри проходят запросы\n        data: null\n    };\n\n    // вспомогательное для меню\n    public handleClick = (evt: React.MouseEvent<HTMLButtonElement>) => {\n        this.setState({\n            menuEl: evt.currentTarget\n        })\n    };\n\n    // открытие - закрытие меню на мобильной версии\n    public handleClose = () => {\n        this.setState({\n            menuEl: null\n        })\n    };\n\n    // поднимается через пропсы с форм регистрации и логина\n    public isLoginSuccess = (data: any) => {\n        this.setState({\n            data: data\n        }, () => {\n            this.setState({\n                isDataConfirmed: true\n            })\n        })\n    };\n\n    // обработчик кнопки выхода\n    public handleExitButton = () => {\n        this.storage.logOut();\n        this.setState({\n            isDataConfirmed: false,\n            data: null\n        })\n    };\n\n    componentDidMount(): void {\n        const storage = new DataStorage(new LocalStorage());\n        const http = new Http();\n        if (storage.getUserData !== null) {\n            http.loginWithToken(storage.getUserData, '/user')\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        console.log(result)\n                        if (result.email !== undefined) {\n                            this.setState({\n                                data: result\n                            }, () => {\n                                this.setState({\n                                    isDataConfirmed: true\n                                })\n                            })\n                        } else {\n                            this.setState({\n                                isDataConfirmed: false\n                            }, () => {\n                                storage.logOut()\n                            })\n                        }\n                    }, (error) => {\n                        console.log(error)\n                    }\n                );\n        } else {\n            this.setState({\n                isDataConfirmed: false\n            })\n        }\n    }\n\n    public render() {\n\n        const isDataConfirmedMobileMenu = (\n            <AppBar>\n                <Toolbar className=\"topBarMin\">\n                    <Button color=\"secondary\" aria-controls=\"customized-menu\" aria-haspopup=\"true\"\n                            onClick={this.handleClick}>\n                        <MenuIcon/>\n                    </Button>\n                    <Menu\n                        id=\"customized-menu\" anchorEl={this.state.menuEl} keepMounted\n                        open={Boolean(this.state.menuEl)} onClose={this.handleClose}\n                        style={{marginTop: '2rem'}}>\n                        {/* ОТДЕЛЬНО ВОЗВРАЩАЕТСЯ КНОПКА ВХОДА */}\n                        <div>\n                            {pagesForMenus.pages.map((dataPage: pageData) => {\n                                    return (\n                                        <div key={dataPage.buttonText + 'logged'}>\n                                            <NavLink to={dataPage.path} style={{color: \"black\"}}\n                                                     activeStyle={{color: \"black\", fontWeight: \"bold\"}}>\n                                                <MenuItem onClick={this.handleClose}>\n                                                    <Typography\n                                                        variant=\"button\">{dataPage.buttonText}</Typography>\n                                                </MenuItem>\n                                            </NavLink>\n                                        </div>\n                                    )\n\n                                }\n                            )}\n                            <MenuItem onClick={this.handleExitButton}>\n                                <Input/>&nbsp;&nbsp;Выйти\n                            </MenuItem>\n                        </div>\n                    </Menu>\n                    {this.state.data === null ? null :\n                        <Typography style={{marginLeft: 'auto'}}\n                                    variant=\"subtitle2\">Привет, {this.state.data.email}</Typography>}\n                </Toolbar>\n            </AppBar>\n        )\n\n        const isDataNotConfirmedMobileMenu = (\n            <AppBar>\n                <Toolbar className=\"topBarMin\">\n                    <Button color=\"secondary\" aria-controls=\"customized-menu\" aria-haspopup=\"true\"\n                            onClick={this.handleClick}>\n                        <MenuIcon/>\n                    </Button>\n                    <Menu\n                        id=\"customized-menu\" anchorEl={this.state.menuEl} keepMounted\n                        open={Boolean(this.state.menuEl)} onClose={this.handleClose}\n                        style={{marginTop: '2rem'}}>\n                        {pagesForMenus.pages.map((dataPage: pageData) => {\n                            if (dataPage.isDataConfirmed === false){\n                                return (\n                                    <div key={dataPage.buttonText}>\n                                        <NavLink to={dataPage.path} style={{color: \"black\"}}\n                                                 activeStyle={{color: \"black\", fontWeight: \"bold\"}}>\n                                            <MenuItem onClick={this.handleClose}>\n                                                <Typography\n                                                    variant=\"button\">{dataPage.buttonText}</Typography>\n                                            </MenuItem>\n                                        </NavLink>\n                                    </div>\n                                )\n                            }\n\n                            }\n                        )}\n                        {/* ОТДЕЛЬНО ВОЗВРАЩАЕТСЯ КНОПКА ВХОДА */}\n\n                        <div>\n                            <MenuItem>\n                                <DialogLoginForm mobile={true} isLoginSuccess={this.isLoginSuccess}/>\n                            </MenuItem>\n                        </div>\n                        <div>\n                            <MenuItem>\n                                <DialogRegisterForm mobile={true} isLoginSuccess={this.isLoginSuccess}/>\n                            </MenuItem>\n                        </div>\n\n                    </Menu>\n                </Toolbar>\n            </AppBar>\n        );\n\n\n        const isLoadingComponent = (\n            <MuiThemeProvider theme={theme}>\n\n                <AppBar>\n                    <Toolbar className=\"topBarMax\" style={{textAlign: 'right'}}>\n                        <CircularProgress color=\"inherit\"/>\n                    </Toolbar>\n                </AppBar>\n            </MuiThemeProvider>\n        );\n\n        const isDataConfirmed = (\n            <Switch>\n                <MuiThemeProvider theme={theme}>\n                    {/* МЕНЮ В МОБИЛЬНОЙ ВЕРСИИ */}\n\n                    {isDataConfirmedMobileMenu}\n\n                    {/* МЕНЮ В ПОЛНОЙ ВЕРСИИ */}\n                    <AppBar>\n                        <Toolbar className=\"topBarMax\" style={{textAlign: 'right'}}>\n                            {/* ОТДЕЛЬНО ВОЗВРАЩАЕТСЯ КНОПКА ВХОДА */}\n\n                            {pagesForMenus.pages.map((dataPage: pageData) => {\n                                return (\n                                    <div key={dataPage.buttonText + 'logged'}>\n                                        <Link to={dataPage.path}>\n                                            <Button color=\"secondary\">\n                                                {dataPage.buttonText}\n                                            </Button>\n                                        </Link>\n                                    </div>\n                                )\n                            })}\n                            <Button onClick={this.handleExitButton} color=\"secondary\">\n                                <Input/>&nbsp;&nbsp;ВЫХОД\n                            </Button>\n                            &nbsp;\n                            {this.state.data === null ? null :\n                                <Typography style={{marginLeft: 'auto'}}\n                                            variant=\"subtitle2\">Привет, {this.state.data.email}</Typography>}\n                        </Toolbar>\n                    </AppBar>\n\n                    {/*{ ТЕЛО ВСЕЙ СТРАНИЦЫ }*/}\n                    <Container>\n\n                        <div style={{marginTop: '5rem'}}>\n                            {pagesForMenus.pages.map((dataPage: pageData) => {\n                                return (\n                                    <div key={dataPage.buttonText}>\n                                        <Route exact path={dataPage.path} component={dataPage.component}/>\n                                    </div>\n                                )\n                            })}\n                            <Redirect to=\"/\"/>\n                        </div>\n                    </Container>\n                </MuiThemeProvider>\n                <StartPage/>\n            </Switch>\n        );\n\n        const isDataNotConfrimed = (\n            <Switch>\n                <MuiThemeProvider theme={theme}>\n                        {/* МЕНЮ В МОБИЛЬНОЙ ВЕРСИИ */}\n\n                        {isDataNotConfirmedMobileMenu}\n                        {/* МЕНЮ В ПОЛНОЙ ВЕРСИИ */}\n                        <AppBar>\n                            <Toolbar className=\"topBarMax\" style={{textAlign: 'right'}}>\n                                {/* ОТДЕЛЬНО ВОЗВРАЩАЕТСЯ КНОПКА ВХОДА */}\n\n                                {pagesForMenus.pages.map((dataPage: pageData) => {\n                                    if (dataPage.isDataConfirmed === false) {\n                                        return (\n                                            <div key={dataPage.buttonText}>\n                                                <Link to={dataPage.path}>\n                                                    <Button color=\"secondary\">\n                                                        {dataPage.buttonText}\n                                                    </Button>\n                                                </Link>\n                                            </div>\n                                        )\n                                    }\n\n                                })}\n\n                                <DialogLoginForm mobile={false} isLoginSuccess={this.isLoginSuccess}/>\n                                <DialogRegisterForm mobile={false} isLoginSuccess={this.isLoginSuccess}/>\n\n                            </Toolbar>\n                        </AppBar>\n\n                        {/* ТЕЛО ВСЕЙ СТРАНИЦЫ */}\n                        <Container>\n                            <div style={{marginTop: '5rem'}}>\n                                {pagesForMenus.pages.map((dataPage: pageData) => {\n                                    if (dataPage.isDataConfirmed === false){\n                                        return (\n                                            <div key={dataPage.buttonText}>\n                                                <Route exact path={dataPage.path} component={dataPage.component}/>\n                                            </div>\n                                        )\n                                    }\n\n                                })}\n                                <Redirect to=\"/\"/>\n                            </div>\n                        </Container>\n                </MuiThemeProvider>\n            </Switch>\n        );\n\n        // ВОЗВРАЩАЕТСЯ ЕСЛИ ОЖИДАНИЕ ЗАПРОСА\n        if (this.state.isDataConfirmed === null) {\n            return (isLoadingComponent)\n        }\n        // ВОЗВРАЩАЕТСЯ ЕСЛИ ДАННЫЕ НЕ ПРИШЛИ\n        if (!this.state.isDataConfirmed) {\n            return (isDataNotConfrimed)\n        } else {\n            return (isDataConfirmed)\n        }\n\n    }\n};\n","import React from 'react';\nimport './App.css';\nimport {BrowserRouter} from \"react-router-dom\";\nimport Main from \"./components/Main\";\n\nconst App: React.FC = () => {\n    return (\n        <BrowserRouter>\n            <Main/>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}