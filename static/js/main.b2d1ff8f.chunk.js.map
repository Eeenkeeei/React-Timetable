{"version":3,"sources":["Theme.ts","pages/HelpPage.tsx","AppConstants.tsx","serverApi/http.ts","serverApi/dataStorage.ts","serverApi/localStorage.ts","components/Dialogs/DialogDeleteNews.tsx","components/Dialogs/DialogEditNews.tsx","components/Dialogs/DialogAddLesson.tsx","components/Dialogs/DialogDeleteLesson.tsx","components/Dialogs/DialogEditLesson.tsx","components/Dialogs/DialogAddTaskLesson.tsx","components/UniversalComponents.tsx","pages/StartPage.tsx","components/Dialogs/DialogAddNews.tsx","components/SetAdmin.tsx","pages/AdminComponent.tsx","components/AddTimetable.tsx","components/Dialogs/SnackBar.tsx","components/Dialogs/DialogAddNewTeacher.tsx","pages/AccountPage.tsx","pages/SchedulePage.tsx","components/Dialogs/DialogViewDay.tsx","pages/CalendarPage.tsx","AppPagesList.ts","components/Dialogs/DialogLoginForm.tsx","components/Dialogs/DialogRegisterForm.tsx","components/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","palette","common","black","white","background","paper","default","primary","light","main","dark","contrastText","secondary","error","text","disabled","hint","HelpPage","document","title","react","React","serverApi","Http","url","data","path","fetch","this","method","headers","Content-Type","body","JSON","stringify","token","Authorization","concat","email","DataStorage","storage","Object","classCallCheck","createClass","key","value","add","logOut","get","LocalStorage","parse","localStorage","getItem","save","removeItem","setItem","DialogDeleteNews","_React$Component","_getPrototypeOf2","_this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","state","openDialogWindow","handleOpenLoginDialog","setState","handleClose","confirmDelete","removeNews","props","newsData","then","res","json","result","getNews","inherits","react_default","a","createElement","Button","onClick","style","gridRowStart","gridRowEnd","Delete","Dialog","open","onClose","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","header","author","DialogActions","color","Component","DialogEditNews","img","confirmEdit","http","oldHeader","oldBody","oldData","editNews","err","console","handleHeaderChange","event","target","handleBodyChange","handleAuthorChange","handleImgChange","Edit","TextField","autoFocus","margin","label","Typography","type","fullWidth","onChange","DialogAddLesson","lessonNumber","lessonName","lessonType","lessonLocation","lessonTeacher","confirmAdd","newLesson","lessonWeek","lessonDay","addLesson","handleLessonNumberChange","handleLessonNameChange","handleLessonTypeChange","handleLessonLocationChange","handleLessonTeacherChange","Add","FormControl","width","InputLabel","htmlFor","Select","input","Input","MenuItem","teachers","map","teacher","name","DialogDeleteLesson","deleteLessonInData","lesson","paddingRight","paddingLeft","marginTop","DialogEditLesson","editLessonInData","oldLesson","DialogAddTaskLesson","textForTaskLesson","dateForTaskLesson","Date","newTaskLesson","taskDate","taskText","addNewTaskLesson","handleTaskLessonTextChange","handleChangeDate","PlaylistAdd","variant","material_ui_pickers_esm","utils","MomentUtils","invalidDateMessage","KeyboardButtonProps","aria-label","LoadingComponent","MuiThemeProvider","textAlign","CircularProgress","NewsComponent","_id","Card","admin","display","DialogDeleteNews_DialogDeleteNews","getNewsCb","DialogEditNews_DialogEditNews","Grid","container","spacing","item","xs","sm","CardMedia","height","marginLeft","marginRight","className","image","CardContent","daysInWeek","scheduleString","Math","random","justifyContent","DialogDeleteLesson_DialogDeleteLesson","DialogEditLesson_DialogEditLesson","undefined","DialogAddTaskLesson_DialogAddTaskLesson","Divider","scheduleListComponent","handleAddLesson","week","evenWeek","unevenWeek","List","dense","day","ListItem","ListItemText","ListItemSecondaryAction","DialogAddLesson_DialogAddLesson","StartPage","news","_this2","getNewsList","toConsumableArray","flexGrow","UniversalComponents_NewsComponent","subtitle","textBody","cardBody","component","alt","DialogAddNews","addNews","SetAdmin","adminEmail","addConfirm","isLoading","findUserData","password","lastLoginDate","registrationDate","handleAdminEmailChange","getUserData","getUserDataFromAdmin","addUserAsAdmin","removeUserAdmin","deleteAccount","userData","AdminComponent","expanded","isNoOneNews","handleChangeExpand","panel","isExpanded","log","ExpansionPanel","ExpansionPanelSummary","expandIcon","ExpandMore_default","aria-controls","ExpansionPanelDetails","DialogAddNews_DialogAddNews","SetAdmin_SetAdmin","AddTimetable","tabValue","handleChangeTab","newValue","handleChangeIndexTab","index","lessonObject","addLessonInData","stylesForTab","textTransform","minWidth","timetableMenu","AppBar","position","Tabs","indicatorColor","textColor","Tab","lib_default","axis","direction","onChangeIndex","dir","lessons","variantIcon","success","CheckCircleIcon","warning","WarningIcon","ErrorIcon","info","InfoIcon","useStyles1","makeStyles","backgroundColor","green","amber","icon","fontSize","iconVariant","opacity","message","alignItems","MySnackbarContentWrapper","classes","other","objectWithoutProperties","Icon","SnackbarContent","assign","clsx","aria-describedby","action","SnackbarComponent","handleOpen","reason","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","DialogAddNewTeacher","teacherName","handleTeacherNameChange","addNewTeacher","uuidv4","require","AccountPage","isDataConfirmed","lessonTasks","openSnackbar","updateHandler","updateUserData","setTimeout","newData","push","splice","indexOf","addTeacherInData","newTeacher","loginWithToken","_this3","tabsArray","Person","ListAlt","Security","Dashboard","Fingerprint","mobileMenu","tabData","fullMenu","accountDataComponent","overflow","accountPageBody","AddTimetable_AddTimetable","DialogAddNewTeacher_DialogAddNewTeacher","IconButton","AdminComponent_AdminComponent","waitingComponent","SnackBar_SnackbarComponent","SchedulePage","handleAddNewTaskLesson","taskLesson","swipeableViews","DialogViewDay","padding","marginBottom","MoreHoriz","moment","format","tasks","task","CalendarPage","getMonth","months","selectedMonth","returnRussianMonthName","monthName","monthNames","handleChangeMonthInMobileVersion","monthsCounter","count","month","daysInMonth","days","i","date","toDateString","split","calendarMenuFullVersion","dayCard","engMonthName","rusMonthName","Badge","badgeContent","borderLeft","Number","DialogViewDay_DialogViewDay","cells","dayName","Table","tableLayout","TableBody","TableRow","TableCell","slice","monthArray","dayCardMobile","maxWidth","monthArr","pagesForMenus","pages","buttonText","DialogLoginForm","loginState","login","loginForToken","isLoginSuccess","handleEmailChange","handlePasswordChange","mobile","MeetingRoom","DialogRegisterForm","confirmPassword","registrationState","handleConfirmPasswordChange","PersonAdd","Main","menuEl","mobileOpenDialogLoginForm","handleClick","evt","currentTarget","handleExitButton","changePage","isDataConfirmedMobileMenu","Toolbar","aria-haspopup","Menu_default","Menu","anchorEl","keepMounted","Boolean","dataPage","react_router_dom","to","activeStyle","fontWeight","Icon_Icon","esm_Input","isDataNotConfirmedMobileMenu","DialogLoginForm_DialogLoginForm","DialogRegisterForm_DialogRegisterForm","isLoadingComponent","react_router","Container","exact","StartPage_StartPage","isDataNotConfrimed","App","Main_Main","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b2d1ff8f.chunk.js","sourcesContent":["import {createMuiTheme} from \"@material-ui/core\";\n\nexport const theme = createMuiTheme({\n    \"palette\": {\n        \"common\": {\n            \"black\": \"#000\",\n            \"white\": \"#fff\"\n        },\n        \"background\": {\n            \"paper\": \"rgba(255, 255, 255, 1)\",\n            \"default\": \"#fafafa\"\n        },\n        \"primary\": {\n            \"light\": \"#40c4ff\",\n            \"main\": \"#039be5\",\n            \"dark\": \"rgba(74, 144, 226, 1)\",\n            \"contrastText\": \"#fff\"\n        },\n        \"secondary\": {\n            \"light\": \"#4ffcff\",\n            \"main\": \"#fff\",\n            \"dark\": \"#22c5bb\",\n            \"contrastText\": \"#fff\"\n        },\n        \"error\": {\n            \"light\": \"#e52519\",\n            \"main\": \"#f42740\",\n            \"dark\": \"#8d0600\",\n            \"contrastText\": \"#fff\"\n        },\n        \"text\": {\n            \"primary\": \"rgba(0, 0, 0, 0.87)\",\n            \"secondary\": \"rgba(0, 0, 0, 0.54)\",\n            \"disabled\": \"rgba(0, 0, 0, 0.38)\",\n            \"hint\": \"rgba(0, 0, 0, 0.38)\"\n        }\n    }\n});\n","import * as React from \"react\";\n\nexport default class HelpPage extends React.Component {\n\n\n\n    public render() {\n        document.title = 'Помощь';\n\n        return (\n            <div>\n               HelpPage\n\n            </div>\n        )\n    }\n}\n","export const serverApi = 'https://react-timetable-server.herokuapp.com';\n// https://react-timetable-server.herokuapp.com\n// http://192.168.0.122:7777\n","import {serverApi} from \"../AppConstants\";\nimport {User} from \"../pages/AccountPage\";\n\ninterface loginData {\n    email: string;\n    password: string\n}\n\n\nexport default class Http {\n\n    public url = serverApi;\n\n    public loginForToken (data: loginData, path: string) {\n        return fetch(this.url + path, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        });\n    }\n\n    public loginWithToken (token: string, path: string) {\n        return fetch(this.url + path, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n\n        });\n    }\n\n    public getNewsList (path: string){\n        return fetch(this.url + path, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n        });\n    }\n\n    public removeNews (body: string, path: string) {\n        return fetch(this.url + path, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({body: body})\n        });\n    }\n\n    public editNews (body: any, path: string) {\n        return fetch(this.url + path, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        });\n    }\n\n    public addNews (body: any, path: '/addNews') {\n        return fetch(this.url + path, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        });\n    }\n\n    public addUserAsAdmin (body: string, path: '/addAdmin') {\n        return fetch(this.url + path, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({email: body})\n        });\n    }\n\n    public getUserDataFromAdmin(body: string, path: '/getUserDataFromAdmin') {\n        return fetch(this.url + path, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({email: body})\n        });\n    }\n\n    public removeUserAdmin(body: string, path: '/removeUserAdmin'){\n        return fetch(this.url + path, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({email: body})\n        });\n    }\n\n    public deleteAccount(body: string, path: '/deleteAccount'){\n        return fetch(this.url + path, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({email: body})\n        });\n    }\n\n    public updateUserData(body: User, path: '/updateData') {\n        return fetch(this.url + path, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(body)\n        });\n    }\n}\n","export class Link {\n    public data:string;\n    constructor(data:string) {\n        this.data = data\n    }\n}\n\nexport class DataStorage {\n    public storage:any;\n\n    constructor(storage:any) {\n        this.storage = storage;\n    }\n\n    get getUserData() {\n        return this.storage.data;\n    }\n\n    add(data:string) {\n        this.storage.add(data);\n    }\n\n    logOut () {\n        this.storage.logOut();\n    }\n\n}\n","export class LocalStorage {\n    public data:string;\n    constructor() {\n        // @ts-ignore\n        this.data = JSON.parse(localStorage.getItem('data'));\n\n    }\n\n    add(data:any) {\n        this.data = data;\n        this.save();\n    }\n\n    logOut() {\n        localStorage.removeItem('data');\n    }\n\n    save() {\n        localStorage.setItem('data', JSON.stringify(this.data)); // stringify - преобразование объекта в строку\n    }\n\n\n}\n\n","import React from 'react'\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n} from \"@material-ui/core\";\nimport Http from \"../../serverApi/http\";\n\nimport {Delete} from \"@material-ui/icons\";\nimport {newsData} from \"../../pages/StartPage\";\n\ninterface DialogDeleteNewsProps {\n    newsData: newsData\n    getNews: any // функция обновления новостей\n}\n\n\nexport class DialogDeleteNews extends React.Component<DialogDeleteNewsProps> {\n\n    state = {\n        openDialogWindow: false\n    };\n\n    public handleOpenLoginDialog = () => {\n        this.setState({\n            openDialogWindow: true\n        })\n    };\n\n    public handleClose = () => {\n        this.setState({\n            openDialogWindow: false,\n        })\n    };\n\n    public confirmDelete = () => {\n        const http = new Http();\n        http.removeNews(this.props.newsData.body, '/removeNews')\n            .then (res => res.json())\n            .then(\n                (result) => {\n                    if (result === true){\n                        this.props.getNews();\n                        this.setState({\n                            openDialogWindow: false\n                        })\n                    }\n                }\n            )\n    };\n\n    public render() {\n        return (\n            <div>\n                <Button onClick={this.handleOpenLoginDialog} style={{gridRowStart: '1', gridRowEnd: '2'}}>\n                    <Delete/>\n                </Button>\n\n                <Dialog open={this.state.openDialogWindow} onClose={this.handleClose}\n                        aria-labelledby=\"form-dialog-title\">\n                    <DialogTitle id=\"form-dialog-title\">Удаление новости</DialogTitle>\n\n                    <DialogContent>\n                        <DialogContentText>\n                            Заголовок: {this.props.newsData.header}\n                        </DialogContentText>\n                        <DialogContentText>\n                            Текст: {this.props.newsData.body}\n                        </DialogContentText>\n                        <DialogContentText>\n                            Автор: {this.props.newsData.author}, дата: {this.props.newsData.data}\n                        </DialogContentText>\n\n\n                    </DialogContent>\n\n                    <DialogActions>\n\n                        <Button onClick={this.confirmDelete} color=\"primary\">\n                            Удалить\n                        </Button>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            Отмена\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle, TextField,\n    Typography\n} from \"@material-ui/core\";\nimport Http from \"../../serverApi/http\";\n\nimport {Edit} from \"@material-ui/icons\";\nimport {newsData} from \"../../pages/StartPage\";\n\ninterface DialogEditNewsProps {\n    newsData: newsData\n    getNews: any // функция обновления новостей\n}\n\n\nexport class DialogEditNews extends React.Component<DialogEditNewsProps> {\n\n    state = {\n        openDialogWindow: false,\n        header: this.props.newsData.header,\n        body: this.props.newsData.body,\n        author: this.props.newsData.author,\n        img: this.props.newsData.img\n    };\n\n    public handleOpenLoginDialog = () => {\n        this.setState({\n            openDialogWindow: true\n        })\n    };\n\n    public handleClose = () => {\n        this.setState({\n            openDialogWindow: false,\n        })\n    };\n\n    public confirmEdit = () => {\n        const http = new Http();\n        const data = {\n            oldHeader: this.props.newsData.header,\n            oldBody: this.props.newsData.body,\n            oldData: this.props.newsData.data,\n            header: this.state.header,\n            body: this.state.body,\n            author: this.state.author,\n            img: this.state.img\n        };\n        http.editNews(data, '/editNews')\n            .then (res => res.json())\n            .then (\n                (result)=>{\n                    if (result === true){\n                        this.props.getNews();\n                        this.setState({\n                            openDialogWindow: false,\n                        })\n                    }\n                },\n                (err)=>{\n                    console.error(err)\n                }\n            )\n    };\n\n    public handleHeaderChange = (event: any) => {\n        this.setState({\n            header: event.target.value\n        })\n    };\n\n    public handleBodyChange = (event: any) => {\n        this.setState({\n            body: event.target.value\n        })\n    };\n\n    public handleAuthorChange = (event: any) => {\n        this.setState({\n            author: event.target.value\n        })\n    };\n\n    public handleImgChange = (event: any) => {\n        this.setState({\n            img: event.target.value\n        })\n    };\n\n    public render() {\n        return (\n            <div>\n                <Button onClick={this.handleOpenLoginDialog}>\n                    <Edit/>\n                </Button>\n\n                <Dialog open={this.state.openDialogWindow} onClose={this.handleClose}\n                        aria-labelledby=\"form-dialog-title\">\n                    <DialogTitle id=\"form-dialog-title\">Редактирование новости</DialogTitle>\n\n                    <DialogContent>\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"login\"\n                                label={<Typography>Заголовок: </Typography>}\n                                type=\"text\"\n                                value={this.state.header}\n                                fullWidth\n                                onChange={this.handleHeaderChange}\n                            />\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"login\"\n                            label={<Typography>Текст новости: </Typography>}\n                            value={this.state.body}\n                            fullWidth\n                            onChange={this.handleBodyChange}\n                        />\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"login\"\n                            label={<Typography>Автор: </Typography>}\n                            value={this.state.author}\n                            fullWidth\n                            onChange={this.handleAuthorChange}\n                        />\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"login\"\n                            label={<Typography>Картинка: </Typography>}\n                            value={this.state.img}\n                            fullWidth\n                            onChange={this.handleImgChange}\n                        />\n\n\n                    </DialogContent>\n\n                    <DialogActions>\n\n                        <Button onClick={this.confirmEdit} color=\"primary\">\n                            Сохранить\n                        </Button>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            Отмена\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle, FormControl, Input, InputLabel, MenuItem, Select, TextField,\n    Typography\n} from \"@material-ui/core\";\nimport {Add} from \"@material-ui/icons\";\nimport {TeacherData} from \"../../pages/AccountPage\";\n\ninterface DialogAddLessonProps {\n    lessonDay: string,\n    lessonWeek: string,\n    addLesson: any // cb для добавления\n    teachers: TeacherData[]\n}\n\nexport interface newLesson {\n    lessonWeek: string;\n    lessonDay: string;\n    lessonName: string;\n    lessonType: string;\n    lessonNumber: string;\n    lessonLocation: string;\n    lessonTeacher: string;\n}\n\n\nexport class DialogAddLesson extends React.Component<DialogAddLessonProps> {\n\n    state = {\n        openDialogWindow: false,\n        lessonNumber: '',\n        lessonName: '',\n        lessonType: '',\n        lessonLocation: '',\n        lessonTeacher: ''\n    };\n\n\n    public handleOpenLoginDialog = () => {\n        this.setState({\n            openDialogWindow: true\n        })\n    };\n\n    public handleClose = () => {\n        this.setState({\n            openDialogWindow: false,\n        })\n    };\n\n    public confirmAdd = () => {\n        const newLesson: newLesson = {\n            lessonWeek: this.props.lessonWeek,\n            lessonDay: this.props.lessonDay,\n            lessonName: this.state.lessonName,\n            lessonType: this.state.lessonType,\n            lessonNumber: this.state.lessonNumber,\n            lessonLocation: this.state.lessonLocation,\n            lessonTeacher: this.state.lessonTeacher\n        };\n        this.props.addLesson(newLesson);\n        this.handleClose()\n    };\n\n    public handleLessonNumberChange = (event: any) => {\n        this.setState({\n            lessonNumber: event.target.value\n        })\n    };\n\n    public handleLessonNameChange = (event: any) => {\n        this.setState({\n            lessonName: event.target.value\n        })\n    };\n\n    public handleLessonTypeChange = (event: any) => {\n        this.setState({\n            lessonType: event.target.value\n        })\n    };\n\n    public handleLessonLocationChange = (event: any) => {\n        this.setState({\n            lessonLocation: event.target.value\n        })\n    };\n\n    public handleLessonTeacherChange = (event: any) => {\n        this.setState({\n            lessonTeacher: event.target.value\n        })\n    };\n\n    public render() {\n        return (\n            <div>\n                <Button color=\"primary\" onClick={this.handleOpenLoginDialog}>\n                    <Add/>\n                </Button>\n                <Dialog open={this.state.openDialogWindow} onClose={this.handleClose}\n                        aria-labelledby=\"form-dialog-title\">\n\n                    <DialogTitle id=\"form-dialog-title\">Добавление нового занятия</DialogTitle>\n\n                    <DialogContent>\n                        <FormControl style={{width: '100%'}}>\n                            <InputLabel htmlFor=\"selectLessonNumber\">Номер занятия</InputLabel>\n                            <Select\n                                value={this.state.lessonNumber}\n                                onChange={this.handleLessonNumberChange}\n                                input={<Input id=\"selectLessonNumber\"/>}\n                                fullWidth\n                            >\n                                <MenuItem value={'1: 8:00 - 9:30'}>1: 8:00 - 9:30</MenuItem>\n                                <MenuItem value={'2: 9:40 - 11:10'}>2: 9:40 - 11:10</MenuItem>\n                                <MenuItem value={'3: 11:20 - 12:50'}>3: 11:20 - 12:50</MenuItem>\n                                <MenuItem value={'4: 13:30 - 15:00'}>4: 13:30 - 15:00</MenuItem>\n                                <MenuItem value={'5: 16:40 - 18:10'}>5: 16:40 - 18:10</MenuItem>\n                            </Select>\n                        </FormControl>\n                        <TextField\n                            margin=\"dense\"\n                            id=\"login\"\n                            label={<Typography>Название предмета: </Typography>}\n                            value={this.state.lessonName}\n                            fullWidth\n                            onChange={this.handleLessonNameChange}\n                        />\n                        <FormControl style={{width: '100%'}}>\n                            <InputLabel htmlFor=\"selectLesson\">Вид занятия</InputLabel>\n                            <Select\n                                value={this.state.lessonType}\n                                onChange={this.handleLessonTypeChange}\n                                input={<Input id=\"selectLesson\"/>}\n                                fullWidth\n                            >\n                                <MenuItem value={'Лекция'}>Лекция</MenuItem>\n                                <MenuItem value={'Лабораторная работа'}>Лабораторная работа</MenuItem>\n                                <MenuItem value={'Практика'}>Практика</MenuItem>\n                            </Select>\n                        </FormControl>\n                        <TextField\n                            margin=\"dense\"\n                            id=\"login\"\n                            label={<Typography>Здание, аудитория: </Typography>}\n                            value={this.state.lessonLocation}\n                            fullWidth\n                            onChange={this.handleLessonLocationChange}\n                        />\n                        <FormControl style={{width: '100%'}}>\n                            <InputLabel htmlFor=\"selectTeacher\">Преподаватель</InputLabel>\n                            <Select\n                                value={this.state.lessonTeacher}\n                                onChange={this.handleLessonTeacherChange}\n                                input={<Input id=\"selectTeacher\"/>}\n                                fullWidth\n                            >\n                                {this.props.teachers.map((teacher: TeacherData) => {\n                                    return (\n                                        <MenuItem value={teacher.name} key={teacher.id}>{teacher.name}</MenuItem>\n                                    )\n                                })}\n                            </Select>\n                        </FormControl>\n                    </DialogContent>\n\n                    <DialogActions>\n\n                        <Button onClick={this.confirmAdd} color=\"primary\">\n                            Добавить\n                        </Button>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            Отмена\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n} from \"@material-ui/core\";\n\nimport {Delete} from \"@material-ui/icons\";\nimport {newLesson} from \"./DialogAddLesson\";\n\ninterface DialogDeleteLessonProps {\n    lesson: newLesson\n    deleteLessonInData: any\n}\n\n\nexport class DialogDeleteLesson extends React.Component<DialogDeleteLessonProps> {\n\n    state = {\n        openDialogWindow: false\n    };\n\n    public handleOpenLoginDialog = () => {\n        this.setState({\n            openDialogWindow: true\n        })\n    };\n\n    public handleClose = () => {\n        this.setState({\n            openDialogWindow: false,\n        })\n    };\n\n    public confirmDelete = () => {\n        this.props.deleteLessonInData(this.props.lesson)\n    };\n\n    public render() {\n        return (\n            <div>\n                <Button onClick={this.handleOpenLoginDialog} style={{paddingRight: 0, paddingLeft: 0, marginTop: '5px'}}>\n                    <Delete/>\n                </Button>\n\n                <Dialog open={this.state.openDialogWindow} onClose={this.handleClose}\n                        aria-labelledby=\"form-dialog-title\">\n                    <DialogTitle id=\"form-dialog-title\">Удаление занятия</DialogTitle>\n\n                    <DialogContent>\n                        <DialogContentText>\n                            Неделя, месяц: {this.props.lesson.lessonWeek}, {this.props.lesson.lessonDay}\n                        </DialogContentText>\n                        <DialogContentText>\n                            Занятие: {this.props.lesson.lessonName}, {this.props.lesson.lessonType}\n                        </DialogContentText>\n\n\n                    </DialogContent>\n\n                    <DialogActions>\n                        <Button onClick={this.confirmDelete} color=\"primary\">\n                            Удалить\n                        </Button>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            Отмена\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle, FormControl, Input, InputLabel, MenuItem, Select, TextField,\n    Typography\n} from \"@material-ui/core\";\nimport {Edit} from \"@material-ui/icons\";\nimport {newLesson} from \"./DialogAddLesson\";\nimport {TeacherData} from \"../../pages/AccountPage\";\n\ninterface DialogEditLessonProps {\n    lesson: newLesson\n    editLessonInData: any // cb для добавления\n    teachers: TeacherData[]\n}\n\n\nexport class DialogEditLesson extends React.Component<DialogEditLessonProps> {\n\n    state = {\n        openDialogWindow: false,\n        lessonNumber: this.props.lesson.lessonNumber,\n        lessonName: this.props.lesson.lessonName,\n        lessonType: this.props.lesson.lessonType,\n        lessonLocation: this.props.lesson.lessonLocation,\n        lessonTeacher: this.props.lesson.lessonTeacher\n    };\n\n    public handleOpenLoginDialog = () => {\n        this.setState({\n            openDialogWindow: true\n        })\n    };\n\n    public handleClose = () => {\n        this.setState({\n            openDialogWindow: false,\n        })\n    };\n\n    public confirmEdit= () => {\n        const newLesson: newLesson = {\n            lessonWeek: this.props.lesson.lessonWeek,\n            lessonDay: this.props.lesson.lessonDay,\n            lessonName: this.state.lessonName,\n            lessonType: this.state.lessonType,\n            lessonNumber: this.state.lessonNumber,\n            lessonLocation: this.state.lessonLocation,\n            lessonTeacher: this.state.lessonTeacher\n        };\n        this.props.editLessonInData({oldLesson: this.props.lesson, newLesson: newLesson});\n        this.handleClose()\n    };\n\n    public handleLessonNumberChange = (event: any) => {\n        this.setState({\n            lessonNumber: event.target.value\n        })\n    };\n\n    public handleLessonNameChange = (event: any) => {\n        this.setState({\n            lessonName: event.target.value\n        })\n    };\n\n    public handleLessonTypeChange = (event: any) => {\n        this.setState({\n            lessonType: event.target.value\n        })\n    };\n\n    public handleLessonLocationChange = (event: any) => {\n        this.setState({\n            lessonLocation: event.target.value\n        })\n    };\n\n    public handleLessonTeacherChange = (event: any) => {\n        this.setState({\n            lessonTeacher: event.target.value\n        })\n    };\n\n    public render() {\n        return (\n            <div>\n                <Button onClick={this.handleOpenLoginDialog}  style={{paddingRight: 0, paddingLeft: 0, marginTop: '5px'}}>\n                    <Edit/>\n                </Button>\n\n                <Dialog open={this.state.openDialogWindow} onClose={this.handleClose}\n                        aria-labelledby=\"form-dialog-title\">\n                    <DialogTitle id=\"form-dialog-title\">Редактирование занятия</DialogTitle>\n\n                    <DialogContent>\n                        <FormControl style={{width: '100%'}}>\n                            <InputLabel htmlFor=\"selectLessonNumber\">Номер занятия</InputLabel>\n                            <Select\n                                value={this.state.lessonNumber}\n                                onChange={this.handleLessonNumberChange}\n                                input={<Input id=\"selectLessonNumber\" />}\n                                fullWidth\n\n                            >\n                                <MenuItem value={'1: 8:00 - 9:30'}>1: 8:00 - 9:30</MenuItem>\n                                <MenuItem value={'2: 9:40 - 11:10'}>2: 9:40 - 11:10</MenuItem>\n                                <MenuItem value={'3: 11:20 - 12:50'}>3: 11:20 - 12:50</MenuItem>\n                                <MenuItem value={'4: 13:30 - 15:00'}>4: 13:30 - 15:00</MenuItem>\n                                <MenuItem value={'5: 16:40 - 18:10'}>5: 16:40 - 18:10</MenuItem>\n                            </Select>\n                        </FormControl>\n                        <TextField\n                            margin=\"dense\"\n                            id=\"login\"\n                            label={<Typography>Название предмета: </Typography>}\n                            value={this.state.lessonName}\n                            fullWidth\n                            onChange={this.handleLessonNameChange}\n                        />\n                        <FormControl style={{width: '100%'}}>\n                            <InputLabel htmlFor=\"selectLesson\">Вид занятия</InputLabel>\n                            <Select\n                                value={this.state.lessonType}\n                                onChange={this.handleLessonTypeChange}\n                                input={<Input id=\"selectLesson\" />}\n                                fullWidth\n                            >\n                                <MenuItem value={'Лекция'}>Лекция</MenuItem>\n                                <MenuItem value={'Лабораторная работа'}>Лабораторная работа</MenuItem>\n                                <MenuItem value={'Практика'}>Практика</MenuItem>\n                            </Select>\n                        </FormControl>\n                        <TextField\n                            margin=\"dense\"\n                            id=\"login\"\n                            label={<Typography>Здание, аудитория: </Typography>}\n                            value={this.state.lessonLocation}\n                            fullWidth\n                            onChange={this.handleLessonLocationChange}\n                        />\n                        <FormControl style={{width: '100%'}}>\n                            <InputLabel htmlFor=\"selectTeacher\">Преподаватель</InputLabel>\n                            <Select\n                                value={this.props.lesson.lessonTeacher}\n                                onChange={this.handleLessonTeacherChange}\n                                input={<Input id=\"selectTeacher\"/>}\n                                fullWidth\n                            >\n                                {this.props.teachers.map((teacher: TeacherData) => {\n                                    return (\n                                        <MenuItem value={teacher.name} key={teacher.id}>{teacher.name}</MenuItem>\n                                    )\n                                })}\n                            </Select>\n                        </FormControl>\n\n                    </DialogContent>\n\n                    <DialogActions>\n\n                        <Button onClick={this.confirmEdit} color=\"primary\">\n                            Сохранить\n                        </Button>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            Отмена\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle, TextField,\n    Typography\n} from \"@material-ui/core\";\nimport {PlaylistAdd} from \"@material-ui/icons\";\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport MomentUtils from \"@date-io/moment\";\nimport \"moment/locale/ru\";\n\n\ninterface DialogAddTaskLessonProps {\n    lesson: newLesson\n    addNewTaskLesson: any // cb для добавления\n}\n\nexport interface newLesson {\n    lessonWeek: string;\n    lessonDay: string;\n    lessonName: string;\n    lessonType: string;\n    lessonNumber: string;\n    lessonLocation: string;\n    lessonTeacher: string;\n}\n\nexport interface newTaskLesson {\n    lesson: newLesson,\n    taskDate: any,\n    taskText: string\n}\n\n\nexport class DialogAddTaskLesson extends React.Component<DialogAddTaskLessonProps> {\n\n    state = {\n        openDialogWindow: false,\n        textForTaskLesson: '',\n        dateForTaskLesson: new Date()\n    };\n\n    public handleOpenLoginDialog = () => {\n        this.setState({\n            openDialogWindow: true\n        })\n    };\n\n    public handleClose = () => {\n        this.setState({\n            openDialogWindow: false,\n        })\n    };\n\n    public confirmAdd = () => {\n        const newTaskLesson: newTaskLesson = {\n            lesson: {\n                lessonWeek: this.props.lesson.lessonWeek,\n                lessonDay: this.props.lesson.lessonDay,\n                lessonName: this.props.lesson.lessonName,\n                lessonType: this.props.lesson.lessonType,\n                lessonNumber: this.props.lesson.lessonNumber,\n                lessonLocation: this.props.lesson.lessonLocation,\n                lessonTeacher: this.props.lesson.lessonTeacher\n\n            },\n            taskDate: new Date(this.state.dateForTaskLesson),\n            taskText: this.state.textForTaskLesson\n        };\n        this.props.addNewTaskLesson(newTaskLesson);\n        this.handleClose()\n    };\n\n    public handleTaskLessonTextChange = (event: any) => {\n        this.setState({\n            textForTaskLesson: event.target.value\n        })\n    };\n\n    public handleChangeDate = (value: any) => {\n        this.setState({\n            dateForTaskLesson: value\n        })\n    };\n\n    public render() {\n        return (\n            <div>\n                <Button color=\"primary\" onClick={this.handleOpenLoginDialog}>\n                    <PlaylistAdd/>\n                </Button>\n                <Dialog open={this.state.openDialogWindow} onClose={this.handleClose}\n                        aria-labelledby=\"form-dialog-title\">\n\n                    <DialogTitle id=\"form-dialog-title\">Добавление задания: {this.props.lesson.lessonDay}, {this.props.lesson.lessonWeek} неделя</DialogTitle>\n\n                    <DialogContent>\n                        <Typography variant=\"body1\">Предмет: {this.props.lesson.lessonName}</Typography>\n                        <Typography variant=\"body1\">Тип занятия: {this.props.lesson.lessonType}</Typography>\n                        <Typography variant=\"body1\">Номер пары: {this.props.lesson.lessonNumber}</Typography>\n                        <Typography variant=\"body1\">Преподаватель: {this.props.lesson.lessonTeacher}</Typography>\n                        <Typography variant=\"body1\">Место занятия: {this.props.lesson.lessonLocation}</Typography>\n                        <TextField\n                            margin=\"dense\"\n                            id=\"login\"\n                            label={<Typography>Текст задания: </Typography>}\n                            value={this.state.textForTaskLesson}\n                            fullWidth\n                            onChange={this.handleTaskLessonTextChange}\n                        />\n                        <MuiPickersUtilsProvider utils={MomentUtils} >\n                                <KeyboardDatePicker\n                                    style={{width: '100%'}}\n                                    id=\"mui-pickers-date\"\n                                    invalidDateMessage=\"Неверный формат даты\"\n                                    label=\"На какую дату внести задание:\"\n                                    value={this.state.dateForTaskLesson}\n                                    onChange={this.handleChangeDate}\n                                    KeyboardButtonProps={{\n                                        'aria-label': 'change date',\n                                    }}\n                                />\n\n                        </MuiPickersUtilsProvider>\n\n                    </DialogContent>\n\n                    <DialogActions>\n\n                        <Button onClick={this.confirmAdd} color=\"primary\">\n                            Добавить\n                        </Button>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            Отмена\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        )\n    }\n}\n","import {theme} from \"../Theme\";\nimport {\n    Card,\n    CardContent,\n    CardMedia,\n    CircularProgress, Divider,\n    Grid,\n    List,\n    ListItem, ListItemSecondaryAction,\n    ListItemText,\n    Typography\n} from \"@material-ui/core\";\nimport {MuiThemeProvider} from \"@material-ui/core/styles\";\nimport React from \"react\";\nimport {DataStorage} from \"../serverApi/dataStorage\";\nimport {LocalStorage} from \"../serverApi/localStorage\";\nimport Http from \"../serverApi/http\";\nimport {DialogDeleteNews} from \"./Dialogs/DialogDeleteNews\";\nimport {DialogEditNews} from \"./Dialogs/DialogEditNews\";\nimport {newsData} from \"../pages/StartPage\";\nimport {DialogAddLesson, newLesson} from \"./Dialogs/DialogAddLesson\";\nimport {DialogDeleteLesson} from \"./Dialogs/DialogDeleteLesson\";\nimport {DialogEditLesson} from \"./Dialogs/DialogEditLesson\";\nimport {DialogAddTaskLesson} from \"./Dialogs/DialogAddTaskLesson\";\nimport {TeacherData} from \"../pages/AccountPage\";\n\nexport const LoadingComponent = (\n    <MuiThemeProvider theme={theme}>\n        <div style={{marginTop: '1rem', textAlign: 'center'}}>\n            <CircularProgress/>\n            <div>\n                <Typography variant={\"h6\"}>Пожалуйста, подождите. Данные обновляются.</Typography>\n            </div>\n        </div>\n    </MuiThemeProvider>\n)\n\nexport function checkUserData() {\n    let flag: boolean;\n    const storage = new DataStorage(new LocalStorage());\n    const http = new Http();\n    if (storage.getUserData !== null) {\n        http.loginWithToken(storage.getUserData, '/user')\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    if (result.email !== undefined) {\n                        flag = true;\n                        return (flag)\n                    } else {\n                        storage.logOut();\n                        flag = false;\n                        return (flag)\n\n                    }\n                }, (error) => {\n                    console.log(error)\n                }\n            );\n    } else {\n        flag = false;\n        return (flag)\n    }\n}\n\ninterface NewsComponentProps {\n    newsData: newsData,\n    admin: boolean,\n    getNewsCb?: any\n}\n\nexport default class NewsComponent extends React.Component<NewsComponentProps> {\n\n    public render() {\n        return (\n            <div key={this.props.newsData._id}>\n\n                <Card style={{marginTop: '1rem'}}>\n                    {this.props.admin ? <div style={{display: 'flex', margin: '10px'}}>\n                        <DialogDeleteNews newsData={this.props.newsData}\n                                          getNews={this.props.getNewsCb}/>\n                        <DialogEditNews newsData={this.props.newsData}\n                                        getNews={this.props.getNewsCb}/>\n                    </div> : null}\n\n                    <div style={{textAlign: 'center'}}>\n                        <Grid container spacing={3}>\n                            <Grid item xs={12} sm={4}>\n                                <CardMedia\n                                    style={{\n                                        width: '220px',\n                                        height: '220px',\n                                        marginLeft: 'auto',\n                                        marginRight: 'auto',\n                                        margin: '1.5rem',\n                                        gridRowStart: 1,\n                                        gridRowEnd: 2\n                                    }}\n                                    className=\"boxShadow\"\n                                    image={this.props.newsData.img}\n                                    title={this.props.newsData.header}\n                                />\n\n                            </Grid>\n                            <Grid item xs={12} sm={8}>\n                                <CardContent>\n                                    <Typography\n                                        variant=\"h6\">{this.props.newsData.header}</Typography>\n                                </CardContent>\n                                <Typography\n                                    variant=\"body1\">{this.props.newsData.body}</Typography>\n                                <Typography variant=\"caption\"\n                                            style={{\n                                                color: 'grey',\n                                                marginLeft: 'auto',\n                                            }}>Дата:&nbsp; {this.props.newsData.data}, &nbsp; Автор: &nbsp;{this.props.newsData.author}\n                                </Typography>\n                            </Grid>\n                        </Grid>\n                    </div>\n                </Card>\n            </div>\n        )\n    }\n}\n\nconst daysInWeek = ['Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'];\n\nconst scheduleString = (teachers: TeacherData[], lesson: newLesson, editLessonInData: any, deleteLessonInData: any, addNewTaskLesson?: any ) => {\n    return (\n        <div key={Math.random()} style={{marginTop: '7px'}}>\n            <Grid container spacing={3} key={Math.random()} style={{marginLeft: '1rem', width: '95%'}}>\n                <Grid item xs={12} sm={3}>\n                    <Typography variant=\"h6\">{lesson.lessonName}</Typography>\n                    <Typography style={{color: 'grey'}}>{lesson.lessonNumber}</Typography>\n                </Grid>\n                <Grid item xs={12} sm={3}>\n                    <Typography>{lesson.lessonType}</Typography>\n                    <Typography style={{color: 'grey'}}>{lesson.lessonTeacher}</Typography>\n                </Grid>\n                <Grid item xs={6} sm={3}>\n                    <Typography>{lesson.lessonLocation}</Typography>\n                </Grid>\n                <Grid item sm={3} style={{display: 'flex', justifyContent: 'flex-end'}}>\n                    {editLessonInData === false ? null :\n                        <DialogDeleteLesson lesson={lesson} deleteLessonInData={deleteLessonInData}/>}\n                    {editLessonInData === false ? null :\n                        <DialogEditLesson teachers={teachers} lesson={lesson} editLessonInData={editLessonInData}/>}\n                    {addNewTaskLesson === undefined ? null :\n                        <DialogAddTaskLesson lesson={lesson} addNewTaskLesson={addNewTaskLesson}/>}\n                </Grid>\n            </Grid>\n            <Divider/>\n        </div>\n    )\n};\n\n\nexport const scheduleListComponent = (teachers: TeacherData[], handleAddLesson: any, editLessonInData: any, deleteLessonInData: any, week: 'Четная' | 'Нечетная', evenWeek: newLesson[], unevenWeek: newLesson[], addNewTaskLesson?: any) => {\n    return (\n        <div>\n            <List dense={true}>\n                {daysInWeek.map((day: string) => {\n                    return (\n                        <div key={'day' + Math.random()}>\n                            <ListItem>\n                                <ListItemText\n                                    primary={<Typography variant='h6'>{day}</Typography>}\n                                />\n                                <ListItemSecondaryAction>\n                                    {addNewTaskLesson !== undefined ? null :\n                                        <DialogAddLesson lessonDay={day} lessonWeek={week}\n                                                         addLesson={handleAddLesson} teachers={teachers}/>}\n                                </ListItemSecondaryAction>\n                            </ListItem>\n                            {evenWeek.map((lesson: newLesson) => {\n                                if (lesson.lessonDay === day && lesson.lessonWeek === week) {\n                                    return (scheduleString(teachers, lesson, editLessonInData, deleteLessonInData, addNewTaskLesson))\n                                }\n                            })}\n                            {unevenWeek.map((lesson: newLesson) => {\n                                if (lesson.lessonDay === day && lesson.lessonWeek === week) {\n                                    return (scheduleString(teachers, lesson, editLessonInData, deleteLessonInData, addNewTaskLesson))\n                                }\n                            })}\n                        </div>\n                    )\n                })}\n            </List>\n        </div>\n    )\n};\n\n\n","import * as React from \"react\";\nimport {Card, CardContent, CardMedia, Grid, Typography} from \"@material-ui/core\";\nimport Http from \"../serverApi/http\";\nimport NewsComponent, {LoadingComponent} from \"../components/UniversalComponents\";\n\n\nexport interface newsData {\n    _id: string\n    header: string,\n    body: string,\n    img: string,\n    author: string,\n    data: string\n}\n\nexport default class StartPage extends React.Component {\n\n    state = {\n        news: []\n    };\n\n    public componentDidMount(): void {\n        const http = new Http();\n        http.getNewsList('/getNewsList')\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        news: [...result]\n                    })\n                }\n            )\n    }\n\n\n    public render() {\n        document.title = 'Главная';\n\n\n        const cardTextArray = [\n            {\n                id: '0',\n                title: 'Задание на дом',\n                subtitle: '',\n                textBody: 'Добавь домашнее задание на любую дату',\n                img: 'https://1.bp.blogspot.com/-rIHSvpNC0ac/W7AMioDMmZI/AAAAAAAATEY/4Kw38DZpWV0Fry7vz29PaO0YMm5qwy5sQCK4BGAYYCw/w1200-h630-p-k-no-nu/IMedia9_Writing.jpg'\n            },\n            {\n                id: '1',\n                title: 'Новости',\n                subtitle: '',\n                textBody: 'Получай всегда актуальные новости КАИ и не только',\n                img: 'https://c.pxhere.com/photos/dd/d8/blogging_computer_desk_notebook_notes_pen_writing-971343.jpg!d'\n            },\n            {\n                id: '2',\n                title: 'Уведомления',\n                subtitle: 'Псс... хочешь немного уведомлений?',\n                textBody: 'Отклоняй надоедливые уведомления каждый раз, когда они почему-то приходят',\n                img: 'http://www.twseo.com.tw/wp-content/uploads/2018/05/a3749ad203d8f65ac6290fde65778583.jpeg'\n            },\n            {\n                id: '3',\n                title: 'Внеси собственное расписание',\n                subtitle: '',\n                textBody: 'Сервис позволяет тебе внести свое расписание, записывать задания на каждый отдельный предмет и отмечать, если оно было уже выполнено!',\n                img: 'https://miro.medium.com/max/4043/0*gzqObH33C3zVLxKg.jpg'\n            },\n            {\n                id: '4',\n                title: 'Следи за своими задачами',\n                subtitle: '',\n                textBody: 'Внеси свои задачи, чтобы не забыть, что нужно сделать. Редактируй их, отмечай выполненные и просматривай их в отдельном хранилище!',\n                img: 'https://i.imgur.com/plWb1GA.jpg'\n            },\n            {\n                id: '5',\n                title: 'Сохрани все важные ссылки',\n                subtitle: '',\n                textBody: 'Сохрани важные ссылки, чтобы не забыть прочитать их позже! Редактируй, добавляй теги, используй поиск по названиям и тегам!',\n                img: 'https://i.pinimg.com/originals/a2/5f/69/a25f69c7252cc082307310bf76c42d95.jpg'\n            },\n\n        ];\n        return (\n            <div>\n                <div style={{flexGrow: 1}}>\n                    <Grid container spacing={3}>\n                        <Grid style={{textAlign: 'center'}} item xs={12} sm={12}>\n\n                                {this.state.news.length === 0 ?\n                                    <CardContent>\n                                        {LoadingComponent}\n                                    </CardContent> :\n                                    <div>\n                                        {this.state.news.map((newsData: newsData) => {\n                                            return (\n                                                <NewsComponent key={newsData._id} newsData={newsData} admin={false} />\n                                            )\n                                        })}\n                                    </div>\n                                }\n\n                        </Grid>\n                        {cardTextArray.map((cardBody) => {\n                            return (\n                                <Grid style={{textAlign: 'center'}} item xs={12} sm={4} key={cardBody.id}>\n                                    <Card>\n                                        {cardBody.img.length > 0 ? <CardMedia\n                                            component=\"img\"\n                                            alt=\"\"\n                                            height=\"140\"\n                                            image={cardBody.img}\n                                            title=\"\"\n                                        /> : null}\n\n                                        <CardContent style={{height: '130px'}}>\n                                            <Typography variant=\"h5\">\n                                                {cardBody.title}\n                                            </Typography>\n                                            <Typography color=\"textSecondary\">\n                                                {cardBody.subtitle}\n                                            </Typography>\n                                            <Typography variant=\"body1\" component=\"p\">\n                                                {cardBody.textBody}\n                                            </Typography>\n                                        </CardContent>\n                                    </Card>\n                                </Grid>\n                            )\n                        })}\n                    </Grid>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle, TextField,\n    Typography\n} from \"@material-ui/core\";\nimport Http from \"../../serverApi/http\";\n\ninterface DialogAddNewsProps {\n    getNews: any // функция обновления новостей\n}\n\n\nexport class DialogAddNews extends React.Component<DialogAddNewsProps> {\n\n    state = {\n        openDialogWindow: false,\n        header: '',\n        body: '',\n        author: '',\n        img: ''\n    };\n\n    public handleOpenLoginDialog = () => {\n        this.setState({\n            openDialogWindow: true\n        })\n    };\n\n    public handleClose = () => {\n        this.setState({\n            openDialogWindow: false,\n        })\n    };\n\n    public confirmEdit = () => {\n        const http = new Http();\n        const data = {\n            header: this.state.header,\n            body: this.state.body,\n            author: this.state.author,\n            img: this.state.img,\n            data: new Date()\n        };\n        http.addNews(data, '/addNews')\n            .then (res => res.json())\n            .then (\n                (result)=>{\n                    if (result === true){\n                        this.props.getNews();\n                        this.setState({\n                            openDialogWindow: false\n                        })\n                    }\n                },\n                (err)=>{\n                    console.error(err)\n                }\n            )\n    };\n\n    public handleHeaderChange = (event: any) => {\n        this.setState({\n            header: event.target.value\n        })\n    };\n\n    public handleBodyChange = (event: any) => {\n        this.setState({\n            body: event.target.value\n        })\n    };\n\n    public handleAuthorChange = (event: any) => {\n        this.setState({\n            author: event.target.value\n        })\n    };\n\n    public handleImgChange = (event: any) => {\n        this.setState({\n            img: event.target.value\n        })\n    };\n\n    public render() {\n        return (\n            <div>\n                <Button color=\"primary\" variant=\"contained\" onClick={this.handleOpenLoginDialog}>\n                    Добавить новость\n                </Button>\n\n                <Dialog open={this.state.openDialogWindow} onClose={this.handleClose}\n                        aria-labelledby=\"form-dialog-title\">\n                    <DialogTitle id=\"form-dialog-title\">Добавление новости</DialogTitle>\n\n                    <DialogContent>\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"login\"\n                            label={<Typography>Заголовок: </Typography>}\n                            type=\"text\"\n                            value={this.state.header}\n                            fullWidth\n                            onChange={this.handleHeaderChange}\n                        />\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"login\"\n                            label={<Typography>Текст новости: </Typography>}\n                            value={this.state.body}\n                            fullWidth\n                            onChange={this.handleBodyChange}\n                        />\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"login\"\n                            label={<Typography>Автор: </Typography>}\n                            value={this.state.author}\n                            fullWidth\n                            onChange={this.handleAuthorChange}\n                        />\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"login\"\n                            label={<Typography>Картинка: </Typography>}\n                            value={this.state.img}\n                            fullWidth\n                            onChange={this.handleImgChange}\n                        />\n\n                    </DialogContent>\n\n                    <DialogActions>\n\n                        <Button onClick={this.confirmEdit} color=\"primary\">\n                            Сохранить\n                        </Button>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            Отмена\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        )\n    }\n}\n","import * as React from \"react\";\nimport {Button, Card, CardContent, TextField, Typography} from \"@material-ui/core\";\nimport Http from \"../serverApi/http\";\nimport {LoadingComponent} from \"./UniversalComponents\";\n\nexport default class SetAdmin extends React.Component {\n\n    state = {\n        adminEmail: '',\n        addConfirm: '',\n        isLoading: false,\n        findUserData: {email: '1', password: '', lastLoginDate: '', registrationDate: '', admin: false}\n    };\n\n    public handleAdminEmailChange = (event: any) => {\n        this.setState({\n            adminEmail: event.target.value\n        })\n    };\n\n    public getUserData = () => {\n        this.setState({\n            isLoading: true,\n            addConfirm: '',\n            findUserData: {email: '1', password: '', lastLoginDate: '', registrationDate: '', admin: false}\n        });\n        const http = new Http();\n        http.getUserDataFromAdmin(this.state.adminEmail, '/getUserDataFromAdmin')\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    if (result !== 'false') {\n                        this.setState({\n                            isLoading: false,\n                            findUserData: result\n                        })\n                    }\n                    if (result === 'false') {\n                        this.setState({\n                            isLoading: false,\n                            addConfirm: 'Пользователь не найден'\n                        })\n                    }\n                }\n            )\n    }\n\n    public addUserAsAdmin = () => {\n        this.setState({\n            isLoading: true,\n            addConfirm: ''\n        });\n        const http = new Http();\n        http.addUserAsAdmin(this.state.findUserData.email, '/addAdmin')\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    if (result === true) {\n                        this.setState({\n                            addConfirm: 'Пользователь успешно добавлен',\n                            isLoading: false,\n                            findUserData: {email: '1', password: '', lastLoginDate: '', registrationDate: '', admin: false}\n                        })\n                    }\n                    if (result === 'false') {\n                        this.setState({\n                            isLoading: false,\n                            addConfirm: 'Пользователь не найден',\n                        })\n                    }\n                }\n            )\n    };\n\n    public removeUserAdmin = () => {\n        this.setState({\n            isLoading: true,\n            addConfirm: ''\n        });\n        const http = new Http();\n        http.removeUserAdmin(this.state.findUserData.email, '/removeUserAdmin')\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    if (result === true) {\n                        this.setState({\n                            addConfirm: 'Пользователь успешно обновлен',\n                            isLoading: false,\n                            findUserData: {email: '1', password: '', lastLoginDate: '', registrationDate: '', admin: false}\n                        })\n                    }\n                    if (result === 'false') {\n                        this.setState({\n                            isLoading: false,\n                            addConfirm: 'Пользователь не найден',\n                        })\n                    }\n                }\n            )\n    };\n\n    public deleteAccount = () => {\n        this.setState({\n            isLoading: true,\n            addConfirm: ''\n        });\n        const http = new Http();\n        http.deleteAccount(this.state.findUserData.email, '/deleteAccount')\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    if (result === true) {\n                        this.setState({\n                            addConfirm: 'Пользователь удален',\n                            isLoading: false,\n                            findUserData: {email: '1', password: '', lastLoginDate: '', registrationDate: '', admin: false}\n                        })\n                    }\n                    if (result === 'false') {\n                        this.setState({\n                            isLoading: false,\n                            addConfirm: 'Пользователь не найден',\n                        })\n                    }\n                }\n            )\n    }\n\n\n    public render() {\n\n        const userData = (\n            <div style={{marginTop: '1rem'}}>\n                <Card>\n                    <CardContent>\n                        <Typography>Email: {this.state.findUserData.email}</Typography>\n                        <Typography>Дата регистрации: {this.state.findUserData.registrationDate}</Typography>\n                        <Typography>Дата последнего входа: {this.state.findUserData.lastLoginDate}</Typography>\n                        <Typography>Администратор: {this.state.findUserData.admin ? <Typography variant=\"button\">Да</Typography> : <Typography variant=\"button\">Нет</Typography>}</Typography>\n                        {this.state.findUserData.admin ?   <Button color=\"primary\" variant=\"contained\" onClick={this.removeUserAdmin}>\n                            Забрать права администратора\n                        </Button> : <Button color=\"primary\" variant=\"contained\" onClick={this.addUserAsAdmin}>\n                            Сделать пользователя администратором\n                        </Button>}\n\n                        <Button variant=\"contained\" onClick={this.deleteAccount} style={{display: 'flex', marginTop: '10px'}}>\n                            Удалить аккаунт\n                        </Button>\n                    </CardContent>\n                </Card>\n            </div>\n        );\n\n        return (\n            <div style={{width: '100%'}}>\n                <TextField\n                    autoFocus\n                    margin=\"dense\"\n                    id=\"login\"\n                    label={<Typography>Найти пользователя</Typography>}\n                    fullWidth\n                    onChange={this.handleAdminEmailChange}\n                />\n                <Button color=\"primary\" variant=\"contained\" onClick={this.getUserData}>\n                    Найти\n                </Button>\n\n                {this.state.isLoading ? LoadingComponent : null}\n                {<Typography variant=\"body1\">{this.state.addConfirm}</Typography>}\n                {this.state.findUserData.email !== '1' ? userData : null}\n\n            </div>\n        )\n    }\n}\n","import * as React from \"react\";\nimport {\n    CardContent,\n    ExpansionPanel,\n    ExpansionPanelDetails,\n    ExpansionPanelSummary, Grid,\n    Typography\n} from \"@material-ui/core\";\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Http from \"../serverApi/http\";\nimport {newsData} from \"./StartPage\";\nimport NewsComponent, {LoadingComponent} from \"../components/UniversalComponents\";\nimport {DialogAddNews} from \"../components/Dialogs/DialogAddNews\";\nimport SetAdmin from \"../components/SetAdmin\";\n\nexport default class AdminComponent extends React.Component {\n\n    state = {\n        expanded: '',\n        news: [],\n        isNoOneNews: false\n    };\n\n    public handleChangeExpand = (panel: any) => (event: React.ChangeEvent<{}>, isExpanded: boolean) => {\n        if (isExpanded) {\n            this.setState({\n                expanded: panel\n            })\n        } else {\n            this.setState({\n                expanded: false\n            })\n        }\n        if (panel === 'getNews') {\n            const http = new Http();\n            http.getNewsList('/getNewsList')\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        if (result.length > 0) {\n                            this.setState({\n                                news: [...result]\n                            });\n                        } else {\n                            this.setState({\n                                isNoOneNews: true\n                            })\n                        }\n                    }\n                )\n        }\n    };\n\n    public getNewsList = () => {\n        const http = new Http();\n        http.getNewsList('/getNewsList')\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    if (result.length > 0) {\n                        this.setState({\n                            news: [...result]\n                        }, () => {\n                            console.log(this.state.news)\n                        });\n                    } else {\n                        this.setState({\n                            isNoOneNews: true\n                        })\n                    }\n\n                }\n            )\n    };\n\n    public render() {\n\n        return (\n            <div style={{marginTop: '1rem'}}>\n                <div>\n                    {/* ПРОСМОТР ВСЕХ НОВОСТЕЙ */}\n\n                    <ExpansionPanel expanded={this.state.expanded === 'getNews'}\n                                    onChange={this.handleChangeExpand('getNews')}\n                                    style={{width: '95%', margin: '1em auto'}}>\n                        <ExpansionPanelSummary\n                            expandIcon={<ExpandMoreIcon/>}\n                            aria-controls=\"panel1bh-content\"\n                            id=\"panel1bh-header\"\n                        >\n                            <Typography>Новости на сайте</Typography>\n                        </ExpansionPanelSummary>\n                        <ExpansionPanelDetails>\n                            <Grid container spacing={3}>\n                                <Grid item xs={12} sm={12}>\n                                    <DialogAddNews getNews={this.getNewsList}/>\n\n                                    {this.state.news.length === 0 ?\n                                        <CardContent>\n                                            {this.state.isNoOneNews ?\n                                                <Typography>Новостей нет</Typography> : LoadingComponent}\n                                        </CardContent> :\n                                        <div>\n                                            {this.state.news.map((newsData: newsData) => {\n                                                return (\n                                                    <NewsComponent key={newsData._id} newsData={newsData} admin={true} getNewsCb={this.getNewsList}/>\n                                                )\n                                            })}\n                                        </div>\n\n                                    }\n                                </Grid>\n                            </Grid>\n                        </ExpansionPanelDetails>\n                    </ExpansionPanel>\n\n\n                    <ExpansionPanel expanded={this.state.expanded === 'getUserData'}\n                                    onChange={this.handleChangeExpand('getUserData')}\n                                    style={{width: '95%', margin: '1em auto'}}>\n                        <ExpansionPanelSummary\n                            expandIcon={<ExpandMoreIcon/>}\n                            aria-controls=\"panel3bh-content\"\n                            id=\"panel3bh-header\"\n                        >\n                            <Typography>Найти пользователя</Typography>\n                        </ExpansionPanelSummary>\n                        <ExpansionPanelDetails>\n                            <SetAdmin/>\n                        </ExpansionPanelDetails>\n                    </ExpansionPanel>\n\n                </div>\n            </div>\n        )\n    }\n\n\n}\n","import * as React from \"react\";\nimport {\n    AppBar,\n    Tab,\n    Tabs,\n} from \"@material-ui/core\";\nimport {theme} from \"../Theme\";\nimport SwipeableViews from \"react-swipeable-views\";\nimport {newLesson} from \"./Dialogs/DialogAddLesson\";\nimport {scheduleListComponent} from \"./UniversalComponents\";\nimport {TeacherData} from \"../pages/AccountPage\";\n\ninterface AddTimetableProps {\n    lessons: { evenWeek: newLesson[], unevenWeek: newLesson[] }\n    addLessonInData: any\n    deleteLessonInData: any\n    editLessonInData: any\n    teachers: TeacherData[]\n}\n\nexport default class AddTimetable extends React.Component<AddTimetableProps> {\n\n    state = {\n        tabValue: 0,\n    };\n\n    public handleChangeTab = (event: React.ChangeEvent<{}>, newValue: number) => {\n        this.setState({\n            tabValue: newValue\n        })\n    };\n\n    public handleChangeIndexTab = (index: number) => {\n        this.setState({\n            tabValue: index\n        })\n    };\n\n    public handleAddLesson = (lessonObject: newLesson) => {\n        this.props.addLessonInData(lessonObject)\n    };\n\n    public deleteLessonInData = (lessonObject: newLesson) => {\n        this.props.deleteLessonInData(lessonObject)\n    };\n\n    public editLessonInData = (lessonObject: newLesson) => {\n        this.props.editLessonInData(lessonObject)\n    };\n\n\n    public render() {\n        const stylesForTab = {\n            textTransform: 'none',\n            minWidth: 72,\n        } as React.CSSProperties;\n\n        const timetableMenu = (\n            <AppBar position=\"static\" color=\"default\" style={{marginTop: '1rem'}}>\n                <Tabs\n                    value={this.state.tabValue}\n                    onChange={this.handleChangeTab}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    variant=\"fullWidth\"\n                >\n                    return (\n                    <Tab label={'Четная неделя'} style={stylesForTab}/>\n                    <Tab label={'Нечетная неделя'} style={stylesForTab}/>\n                    )\n                </Tabs>\n            </AppBar>\n        );\n\n        return (\n            <div>\n                {timetableMenu}\n                <SwipeableViews axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'} index={this.state.tabValue}\n                                onChangeIndex={this.handleChangeIndexTab}>\n                    <div dir={theme.direction}>\n                        {scheduleListComponent(this.props.teachers, this.handleAddLesson, this.editLessonInData, this.deleteLessonInData, 'Четная', this.props.lessons.evenWeek, this.props.lessons.unevenWeek)}\n                    </div>\n                    <div dir={theme.direction}>\n                        {scheduleListComponent(this.props.teachers, this.handleAddLesson, this.editLessonInData, this.deleteLessonInData, 'Нечетная', this.props.lessons.evenWeek, this.props.lessons.unevenWeek)}\n                    </div>\n                </SwipeableViews>\n\n            </div>\n        )\n    }\n}\n","import React, {SyntheticEvent} from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Button from '@material-ui/core/Button';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport {amber, green} from '@material-ui/core/colors';\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport {makeStyles, Theme} from '@material-ui/core/styles';\n\nconst variantIcon = {\n    success: CheckCircleIcon,\n    warning: WarningIcon,\n    error: ErrorIcon,\n    info: InfoIcon,\n};\n\nconst useStyles1 = makeStyles((theme: Theme) => ({\n    success: {\n        backgroundColor: green[600],\n    },\n    error: {\n        backgroundColor: theme.palette.error.dark,\n    },\n    info: {\n        backgroundColor: theme.palette.primary.main,\n    },\n    warning: {\n        backgroundColor: amber[700],\n    },\n    icon: {\n        fontSize: 20,\n    },\n    iconVariant: {\n        opacity: 0.9,\n        marginRight: theme.spacing(1),\n    },\n    message: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n}));\n\nexport interface Props {\n    className?: string;\n    message?: string;\n    onClose?: () => void;\n    variant: keyof typeof variantIcon;\n}\n\nfunction MySnackbarContentWrapper(props: Props) {\n    const classes = useStyles1();\n    const {className, message, onClose, variant, ...other} = props;\n    const Icon = variantIcon[variant];\n\n    return (\n        <SnackbarContent\n            className={clsx(classes[variant], className)}\n            aria-describedby=\"client-snackbar\"\n            message={\n                <span id=\"client-snackbar\" className={classes.message}>\n          <Icon className={clsx(classes.icon, classes.iconVariant)}/>\n                    {message}\n        </span>\n            }\n            action={[\n\n            ]}\n            {...other}\n        />\n    );\n}\n\nMySnackbarContentWrapper.propTypes = {\n    className: PropTypes.string,\n    message: PropTypes.node,\n    onClose: PropTypes.func,\n    variant: PropTypes.oneOf(['success', 'warning', 'error', 'info']).isRequired,\n};\n\nconst useStyles2 = makeStyles((theme: Theme) => ({\n    margin: {\n        margin: theme.spacing(1),\n    },\n}));\n\ninterface SnackbarProps {\n    variant: \"success\" | \"error\" | \"warning\" | \"info\"\n    message: string,\n}\n\nexport default class SnackbarComponent extends React.Component<SnackbarProps> {\n\n    state = {\n        open: false\n    };\n\n    public handleOpen = () => {\n        this.setState({\n            open: true\n        })\n    };\n\n    public handleClose = (event?: SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        this.setState({\n            open: false\n        })\n    };\n\n    public render() {\n        return (\n            <div>\n                <Snackbar\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'left',\n                    }}\n                    open={true}\n                    autoHideDuration={4000}\n                    onClose={this.handleClose}\n                >\n                    <MySnackbarContentWrapper\n                        onClose={this.handleClose}\n                        variant={this.props.variant}\n                        message={this.props.message}\n                    />\n                </Snackbar>\n            </div>\n        )\n    }\n\n}\n","import React from 'react'\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle, TextField,\n    Typography\n} from \"@material-ui/core\";\nimport {Add} from \"@material-ui/icons\";\nimport \"moment/locale/ru\";\n\ninterface DialogAddTaskLessonProps {\n    addNewTeacher: any // cb для добавления\n}\n\n\nexport class DialogAddNewTeacher extends React.Component<DialogAddTaskLessonProps> {\n\n    state = {\n        openDialogWindow: false,\n        teacherName: '',\n    };\n\n    public handleOpenLoginDialog = () => {\n        this.setState({\n            openDialogWindow: true\n        })\n    };\n\n    public handleClose = () => {\n        this.setState({\n            openDialogWindow: false,\n        })\n    };\n\n\n    public handleTeacherNameChange = (event: any) => {\n        this.setState({\n            teacherName: event.target.value\n        })\n    };\n\n    public addNewTeacher = () => {\n        this.props.addNewTeacher({name: this.state.teacherName})\n    };\n\n    public render() {\n        return (\n            <div>\n                <Button color=\"primary\" onClick={this.handleOpenLoginDialog}>\n                    <Add/>\n                </Button>\n                <Dialog open={this.state.openDialogWindow} onClose={this.handleClose}\n                        aria-labelledby=\"form-dialog-title\">\n\n                    <DialogTitle id=\"form-dialog-title\">Добавить нового преподавателя</DialogTitle>\n\n                    <DialogContent>\n\n                        <TextField\n                            margin=\"dense\"\n                            id=\"login\"\n                            label={<Typography>Имя преподавателя: </Typography>}\n                            value={this.state.teacherName}\n                            fullWidth\n                            onChange={this.handleTeacherNameChange}\n                        />\n\n                    </DialogContent>\n\n                    <DialogActions>\n                        <Button onClick={this.addNewTeacher} color=\"primary\">\n                            Добавить\n                        </Button>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            Отмена\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        )\n    }\n}\n","import * as React from \"react\";\nimport {DataStorage} from \"../serverApi/dataStorage\";\nimport {LocalStorage} from \"../serverApi/localStorage\";\nimport Http from \"../serverApi/http\";\nimport {LoadingComponent} from \"../components/UniversalComponents\";\nimport {\n    AppBar,\n    Grid, IconButton,\n    List,\n    ListItem,\n    ListItemSecondaryAction,\n    ListItemText,\n    Tab,\n    Tabs,\n    Typography\n} from \"@material-ui/core\";\nimport SwipeableViews from 'react-swipeable-views';\nimport {theme} from \"../Theme\";\nimport {Dashboard, Edit, Fingerprint, ListAlt, Person, Security} from \"@material-ui/icons\";\nimport AdminComponent from \"./AdminComponent\";\nimport AddTimetable from \"../components/AddTimetable\";\nimport {newLesson} from \"../components/Dialogs/DialogAddLesson\";\nimport {newTaskLesson} from \"../components/Dialogs/DialogAddTaskLesson\";\nimport SnackbarComponent from \"../components/Dialogs/SnackBar\";\nimport {DialogAddNewTeacher} from \"../components/Dialogs/DialogAddNewTeacher\";\nconst uuidv4 = require('uuid/v4');\n\ninterface AccountPageState {\n    isDataConfirmed: boolean | null,\n    data: User,\n    tabValue: number,\n    openSnackbar: boolean\n}\n\nexport interface TeacherData {\n    name: string\n    id: number\n}\n\nexport interface User {\n    email: string,\n    registrationDate: string,\n    password: string,\n    admin: boolean,\n    lastLoginDate: string,\n    lessons: {\n        evenWeek: newLesson[],\n        unevenWeek: newLesson[]\n    },\n    lessonTasks: newTaskLesson[],\n    teachers: TeacherData[]\n}\n\n\nexport default class AccountPage extends React.Component<AccountPageState> {\n\n    state = {\n        isDataConfirmed: null,\n        tabValue: 0,\n        data: {\n            email: '',\n            registrationDate: '',\n            password: '',\n            admin: false,\n            lastLoginDate: '',\n            lessons: {evenWeek: [], unevenWeek: []},\n            lessonTasks: [],\n            teachers: []\n        },\n        openSnackbar: false\n    };\n\n    public theme: any;\n\n    componentDidMount(): void {\n        document.title = 'Аккаунт';\n        const storage = new DataStorage(new LocalStorage());\n        const http = new Http();\n        if (storage.getUserData !== null) {\n            http.loginWithToken(storage.getUserData, '/user')\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        if (result.email !== undefined) {\n                            this.setState({\n                                data: result\n                            }, () => {\n                                this.setState({\n                                    isDataConfirmed: true\n                                })\n                            })\n                        } else {\n                            this.setState({\n                                isDataConfirmed: false\n                            }, () => {\n                                storage.logOut()\n                            })\n                        }\n                    }, (error) => {\n                        console.log(error)\n                    }\n                );\n        } else {\n            this.setState({\n                isDataConfirmed: false\n            })\n        }\n    }\n\n    public handleChangeTab = (event: React.ChangeEvent<{}>, newValue: number) => {\n        this.setState({\n            tabValue: newValue\n        })\n    };\n\n    public handleChangeIndexTab = (index: number) => {\n        this.setState({\n            tabValue: index\n        })\n    };\n\n    public updateHandler = (data: User) => {\n        const storage = new DataStorage(new LocalStorage());\n        const http = new Http();\n        if (storage.getUserData !== null) {\n            http.updateUserData(data, '/updateData')\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        if (result.email !== undefined) {\n                            this.setState({\n                                data: result\n                            }, () => {\n                                this.setState({\n                                    isDataConfirmed: true\n                                });\n                                this.setState({\n                                    openSnackbar: true\n                                });\n                                setTimeout(() => {\n                                    this.setState({\n                                        openSnackbar: false\n                                    })\n                                }, 4000)\n                            })\n                        } else {\n                            this.setState({\n                                isDataConfirmed: false\n                            }, () => {\n                                storage.logOut()\n                            })\n                        }\n                    }, (error) => {\n                        console.log(error)\n                    }\n                );\n        } else {\n            this.setState({\n                isDataConfirmed: false\n            })\n        }\n    };\n\n    public addLessonInData = (lesson: newLesson) => {\n\n        const newData: User = this.state.data;\n        if (lesson.lessonWeek === 'Четная') {\n            newData.lessons.evenWeek.push(lesson)\n        }\n\n        if (lesson.lessonWeek === 'Нечетная') {\n            newData.lessons.unevenWeek.push(lesson)\n        }\n        this.updateHandler(newData)\n\n    };\n\n    public deleteLessonInData = (lesson: newLesson) => {\n        const newData: User = this.state.data;\n        if (lesson.lessonWeek === 'Четная') {\n            newData.lessons.evenWeek.splice(newData.lessons.evenWeek.indexOf(lesson), 1)\n        }\n\n        if (lesson.lessonWeek === 'Нечетная') {\n            newData.lessons.unevenWeek.splice(newData.lessons.unevenWeek.indexOf(lesson), 1)\n        }\n        this.updateHandler(newData)\n    };\n\n    public editLessonInData = (lessons: any) => {\n        const newData: User = this.state.data;\n        if (lessons.newLesson.lessonWeek === 'Четная') {\n            newData.lessons.evenWeek[newData.lessons.evenWeek.indexOf(lessons.oldLesson)] = lessons.newLesson\n        }\n\n        if (lessons.newLesson.lessonWeek === 'Нечетная') {\n            newData.lessons.unevenWeek[newData.lessons.unevenWeek.indexOf(lessons.oldLesson)] = lessons.newLesson\n        }\n        this.updateHandler(newData)\n    };\n\n    public addTeacherInData = (teacher: TeacherData) => {\n        const newData: User = this.state.data;\n        const newTeacher: TeacherData = {\n            name: teacher.name,\n            id: uuidv4()\n        };\n        console.log(newTeacher)\n        newData.teachers.push(newTeacher);\n        this.updateHandler(newData)\n    };\n\n    public render() {\n\n        const stylesForTab = {\n            textTransform: 'none',\n            minWidth: 72,\n        } as React.CSSProperties;\n\n        const tabsArray = [\n            {label: 'Учетная запись', icon: <Person/>},\n            {label: 'Мое расписание', icon: <ListAlt/>},\n            {label: 'Безопасность', icon: <Security/>},\n            {label: 'Сервисы', icon: <Dashboard/>},\n            {label: 'Админ', icon: <Fingerprint/>, admin: true},\n        ];\n\n        const mobileMenu = (\n            <AppBar position=\"static\" color=\"default\" className=\"topBarMin top\">\n                <Tabs\n                    value={this.state.tabValue}\n                    onChange={this.handleChangeTab}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    variant=\"fullWidth\"\n                >\n                    {tabsArray.map((tabData: any) => {\n                        if (this.state.data.admin === true && tabData.label === 'Админ') {\n                            return (\n                                <Tab icon={tabData.icon} style={stylesForTab}\n                                     key={tabData.label}/>\n                            )\n                        } else {\n                            if (tabData.admin === undefined) {\n                                return (\n                                    <Tab icon={tabData.icon} style={stylesForTab}\n                                         key={tabData.label}/>\n                                )\n                            }\n                        }\n                    })}\n                </Tabs>\n            </AppBar>\n        );\n\n        const fullMenu = (\n            <AppBar position=\"static\" color=\"default\" className=\"topBarMax\">\n                <Tabs\n                    value={this.state.tabValue}\n                    onChange={this.handleChangeTab}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    variant=\"fullWidth\"\n                >\n                    {tabsArray.map((tabData: any) => {\n                        if (this.state.data.admin === true && tabData.label === 'Админ') {\n                            return (\n                                <Tab label={tabData.label} icon={tabData.icon} style={stylesForTab}\n                                     key={tabData.label}/>\n                            )\n                        } else {\n                            if (tabData.admin === undefined) {\n                                return (\n                                    <Tab label={tabData.label} icon={tabData.icon} style={stylesForTab}\n                                         key={tabData.label}/>\n                                )\n                            }\n                        }\n                    })}\n                </Tabs>\n            </AppBar>\n        );\n\n        const accountDataComponent = (\n            <div style={{marginTop: '1rem', overflow: 'hidden'}}>\n                <Grid container spacing={3}>\n                    <Grid style={{textAlign: 'center'}} item xs={6} sm={6}>\n\n                        <Typography variant=\"body1\">\n                            Email:\n                        </Typography>\n\n                    </Grid>\n                    <Grid style={{textAlign: 'center'}} item xs={6} sm={6}>\n\n                        <Typography variant=\"body1\">\n                            {this.state.data.email}\n                        </Typography>\n\n                    </Grid>\n                </Grid>\n            </div>\n        );\n\n        const ServiceComponent = () => {\n            return (\n                <div>\n                    <Typography variant={\"h6\"}>Список преподавателей <DialogAddNewTeacher addNewTeacher={this.addTeacherInData}/>\n                    </Typography>\n                    <List>\n                        {this.state.data.teachers.map((teacher: TeacherData) => {\n                            return (\n                                <ListItem key={teacher.id}>\n                                    <ListItemText>\n                                        <Typography variant=\"h6\">{teacher.name}</Typography>\n                                    </ListItemText>\n                                    <ListItemSecondaryAction>\n                                        <IconButton>\n                                            <Edit/>\n                                        </IconButton>\n                                    </ListItemSecondaryAction>\n                                </ListItem>\n                            )\n                        })}\n                    </List>\n                </div>\n            )\n        };\n\n        const accountPageBody = (\n            <div>\n                {mobileMenu}\n                {fullMenu}\n                <SwipeableViews axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'} index={this.state.tabValue}\n                                onChangeIndex={this.handleChangeIndexTab}>\n\n\n                    {this.state.isDataConfirmed ? <div dir={theme.direction}>{accountDataComponent}</div> : <div/>}\n                    {this.state.isDataConfirmed ?\n                        <div dir={theme.direction}>\n                            <AddTimetable lessons={this.state.data.lessons}\n                                          teachers={this.state.data.teachers}\n                                          addLessonInData={this.addLessonInData}\n                                          deleteLessonInData={this.deleteLessonInData}\n                                          editLessonInData={this.editLessonInData}\n                            />\n                        </div>\n                        :\n                        <div/>\n                    }\n                    <div dir={theme.direction}>text3</div>\n                    {this.state.isDataConfirmed ?\n                        <div dir={theme.direction}>\n                            <ServiceComponent/>\n                        </div>\n                        :\n                        <div/>\n                    }\n                    <div dir={theme.direction}><AdminComponent/></div>\n                </SwipeableViews>\n            </div>\n        );\n\n        const waitingComponent = (\n            <div>\n                <Typography variant={\"h6\"}>Пожалуйста, подождите. Данные обновляются.</Typography>\n            </div>\n        );\n\n        return (\n            <div>\n                {this.state.isDataConfirmed === null ? LoadingComponent : null}\n                {this.state.data !== undefined ? accountPageBody : waitingComponent}\n                {this.state.openSnackbar ? <SnackbarComponent variant=\"success\" message=\"Данные обновлены\"/> : null}\n            </div>\n        )\n    }\n}\n","import * as React from \"react\";\nimport {AppBar, Tab, Tabs} from \"@material-ui/core\";\nimport {theme} from \"../Theme\";\nimport {LoadingComponent, scheduleListComponent} from \"../components/UniversalComponents\";\nimport {DataStorage} from \"../serverApi/dataStorage\";\nimport {LocalStorage} from \"../serverApi/localStorage\";\nimport Http from \"../serverApi/http\";\nimport SwipeableViews from \"react-swipeable-views\";\nimport {newTaskLesson} from \"../components/Dialogs/DialogAddTaskLesson\";\nimport {User} from \"./AccountPage\";\nimport SnackbarComponent from \"../components/Dialogs/SnackBar\";\n\nexport default class SchedulePage extends React.Component {\n\n    state = {\n        isDataConfirmed: null,\n        tabValue: 0,\n        data: {\n            email: '',\n            registrationDate: '',\n            password: '',\n            admin: false,\n            lastLoginDate: '',\n            lessons: {evenWeek: [], unevenWeek: []},\n            lessonTasks: [],\n            teachers: []\n        },\n        openSnackbar: false\n    };\n\n    componentDidMount(): void {\n        document.title = 'Расписание занятий';\n        const storage = new DataStorage(new LocalStorage());\n        const http = new Http();\n        if (storage.getUserData !== null) {\n            http.loginWithToken(storage.getUserData, '/user')\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        if (result.email !== undefined) {\n                            this.setState({\n                                data: result\n                            }, () => {\n                                this.setState({\n                                    isDataConfirmed: true\n                                })\n                            })\n                        } else {\n                            this.setState({\n                                isDataConfirmed: false\n                            }, () => {\n                                storage.logOut()\n                            })\n                        }\n                    }, (error) => {\n                        console.log(error)\n                    }\n                );\n        } else {\n            this.setState({\n                isDataConfirmed: false\n            })\n        }\n    }\n\n    public handleChangeTab = (event: React.ChangeEvent<{}>, newValue: number) => {\n        this.setState({\n            tabValue: newValue\n        })\n    };\n\n    public handleChangeIndexTab = (index: number) => {\n        this.setState({\n            tabValue: index\n        })\n    };\n\n    public updateHandler = (data: User) => {\n        const storage = new DataStorage(new LocalStorage());\n        const http = new Http();\n        if (storage.getUserData !== null) {\n            http.updateUserData(data, '/updateData')\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        if (result.email !== undefined) {\n                            this.setState({\n                                data: result\n                            }, () => {\n                                this.setState({\n                                    isDataConfirmed: true\n                                })\n                            })\n                        } else {\n                            this.setState({\n                                isDataConfirmed: false\n                            }, () => {\n                                storage.logOut()\n                            })\n                        }\n                    }, (error) => {\n                        console.log(error)\n                    }\n                );\n        } else {\n            this.setState({\n                isDataConfirmed: false\n            })\n        }\n    };\n\n    public handleAddNewTaskLesson = (taskLesson: newTaskLesson) => {\n        const newData: User = this.state.data;\n        newData.lessonTasks.push(taskLesson);\n        this.updateHandler(newData)\n        this.setState({\n            openSnackbar: true\n        })\n        setTimeout(()=>{\n            this.setState({\n                openSnackbar: false\n            })\n        }, 4000)\n    };\n\n    public render() {\n        const stylesForTab = {\n            textTransform: 'none',\n            minWidth: 72,\n        } as React.CSSProperties;\n\n        const timetableMenu = (\n            <AppBar position=\"static\" color=\"default\" style={{marginTop: '1rem'}}>\n                <Tabs\n                    value={this.state.tabValue}\n                    onChange={this.handleChangeTab}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    variant=\"fullWidth\"\n                >\n                    return (\n                    <Tab label={'Четная неделя'} style={stylesForTab}/>\n                    <Tab label={'Нечетная неделя'} style={stylesForTab}/>\n                    )\n                </Tabs>\n            </AppBar>\n        );\n\n        const swipeableViews = (\n            <SwipeableViews axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'} index={this.state.tabValue}\n                            onChangeIndex={this.handleChangeIndexTab}>\n                <div dir={theme.direction}>\n                    {scheduleListComponent(\n                        this.state.data.teachers,\n                        false,\n                        false,\n                        false,\n                        'Четная',\n                        this.state.data.lessons.evenWeek,\n                        this.state.data.lessons.unevenWeek,\n                        this.handleAddNewTaskLesson\n                    )}\n                </div>\n                <div dir={theme.direction}>\n                    {scheduleListComponent(this.state.data.teachers, false, false, false, 'Нечетная', this.state.data.lessons.evenWeek, this.state.data.lessons.unevenWeek, this.handleAddNewTaskLesson)}\n                </div>\n            </SwipeableViews>\n        );\n\n        return (\n            <div>\n                {timetableMenu}\n                {this.state.isDataConfirmed ? swipeableViews : LoadingComponent}\n                {this.state.openSnackbar ? <SnackbarComponent variant=\"success\" message=\"Задание добавлено\"/> : null}\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle, IconButton, TextField,\n    Typography\n} from \"@material-ui/core\";\nimport Http from \"../../serverApi/http\";\n\nimport {MoreHoriz} from \"@material-ui/icons\";\nimport {newTaskLesson} from \"./DialogAddTaskLesson\";\nimport moment from 'moment'\ninterface DialogViewDayProps {\n    tasks: newTaskLesson[],\n    day: string\n}\n\n\nexport class DialogViewDay extends React.Component<DialogViewDayProps> {\n\n    state = {\n        openDialogWindow: false\n    }\n\n    public handleOpenLoginDialog = () => {\n        this.setState({\n            openDialogWindow: true\n        })\n    };\n\n    public handleClose = () => {\n        this.setState({\n            openDialogWindow: false,\n        })\n    };\n\n\n    public render() {\n        return (\n            <div>\n                <IconButton onClick={this.handleOpenLoginDialog} style={{padding: 0, marginBottom: '1rem'}}>\n                    <MoreHoriz/>\n                </IconButton>\n\n                <Dialog open={this.state.openDialogWindow} onClose={this.handleClose}\n                        aria-labelledby=\"form-dialog-title\">\n                    <DialogTitle id=\"form-dialog-title\">Просмотр дня: {moment(this.props.day).format(' Do MMM ')}</DialogTitle>\n\n                    <DialogContent>\n                        {this.props.tasks.map((task: newTaskLesson) => {\n                            return (\n                                <div key={Math.random()}>\n                                    <Typography variant=\"h6\">{this.props.tasks.indexOf(task) + 1}</Typography>\n                                    <Typography variant=\"subtitle2\">{task.lesson.lessonWeek} неделя</Typography>\n                                    <Typography variant=\"subtitle2\">{task.taskText}</Typography>\n                                    <Typography variant=\"subtitle2\">{task.lesson.lessonName}, {task.lesson.lessonTeacher}</Typography>\n                                </div>\n                                )\n                        })}\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            Сохранить\n                        </Button>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            Отмена\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        )\n    }\n}\n","import * as React from \"react\";\nimport {DataStorage} from \"../serverApi/dataStorage\";\nimport {LocalStorage} from \"../serverApi/localStorage\";\nimport Http from \"../serverApi/http\";\nimport {newTaskLesson} from \"../components/Dialogs/DialogAddTaskLesson\";\nimport {TeacherData, User} from \"./AccountPage\";\nimport SnackbarComponent from \"../components/Dialogs/SnackBar\";\nimport moment from 'moment';\nimport {theme} from \"../Theme\";\nimport {LoadingComponent} from \"../components/UniversalComponents\";\nimport SwipeableViews from \"react-swipeable-views\";\nimport {\n    AppBar,\n    Badge, FormControl, Grid, Input,\n    InputLabel, MenuItem, Select,\n    Tab,\n    Table,\n    TableBody,\n    TableCell,\n    TableRow,\n    Tabs,\n    Typography\n} from \"@material-ui/core\";\nimport {DialogViewDay} from \"../components/Dialogs/DialogViewDay\";\n\nexport default class CalendarPage extends React.Component {\n\n    state = {\n        isDataConfirmed: null,\n        tabValue: new Date().getMonth(),\n        data: {\n            email: '',\n            registrationDate: '',\n            password: '',\n            admin: false,\n            lastLoginDate: '',\n            lessons: {evenWeek: [], unevenWeek: []},\n            lessonTasks: [],\n            teachers: []\n        },\n        openSnackbar: false,\n        months: [[]],\n        selectedMonth: ''\n    };\n\n    componentDidMount(): void {\n        document.title = 'Расписание занятий';\n        let months: any = [];\n        let monthsCounter = 0;\n        while (monthsCounter < 12) {\n            const count = moment().month(monthsCounter).daysInMonth();\n            const days = [];\n            for (let i = 1; i < count + 1; i++) {\n                days.push(moment().month(monthsCounter).date(i));\n\n            }\n            months.push(days);\n            monthsCounter++\n        }\n\n        this.setState({\n            months: months,\n            selectedMonth: this.returnRussianMonthName(new Date().toDateString().split(' ')[1])\n        });\n\n        const storage = new DataStorage(new LocalStorage());\n        const http = new Http();\n        if (storage.getUserData !== null) {\n            http.loginWithToken(storage.getUserData, '/user')\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        if (result.email !== undefined) {\n                            this.setState({\n                                data: result\n                            }, () => {\n                                this.setState({\n                                    isDataConfirmed: true\n                                })\n                            })\n                        } else {\n                            this.setState({\n                                isDataConfirmed: false\n                            }, () => {\n                                storage.logOut()\n                            })\n                        }\n                    }, (error) => {\n                        console.log(error)\n                    }\n                );\n        } else {\n            this.setState({\n                isDataConfirmed: false\n            })\n        }\n    }\n\n    public handleChangeTab = (event: React.ChangeEvent<{}>, newValue: number) => {\n        this.setState({\n            tabValue: newValue\n        })\n    };\n\n    public handleChangeIndexTab = (index: number) => {\n        this.setState({\n            tabValue: index\n        })\n    };\n\n    public updateHandler = (data: User) => {\n\n        const storage = new DataStorage(new LocalStorage());\n        const http = new Http();\n        if (storage.getUserData !== null) {\n            http.updateUserData(data, '/updateData')\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        if (result.email !== undefined) {\n                            this.setState({\n                                data: result\n                            }, () => {\n                                this.setState({\n                                    isDataConfirmed: true\n                                })\n                            })\n                        } else {\n                            this.setState({\n                                isDataConfirmed: false\n                            }, () => {\n                                storage.logOut()\n                            })\n                        }\n                    }, (error) => {\n                        console.log(error)\n                    }\n                );\n        } else {\n            this.setState({\n                isDataConfirmed: false\n            })\n        }\n    };\n\n    public handleAddNewTaskLesson = (taskLesson: newTaskLesson) => {\n        const newData: User = this.state.data;\n        newData.lessonTasks.push(taskLesson);\n        this.updateHandler(newData);\n        this.setState({\n            openSnackbar: true\n        });\n        setTimeout(() => {\n            this.setState({\n                openSnackbar: false\n            })\n        }, 4000)\n    };\n\n    public returnRussianMonthName = (monthName: string) => {\n        const monthNames = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'];\n        if (monthName === 'Jan') {\n            return (monthNames[0])\n        }\n        if (monthName === 'Feb') {\n            return (monthNames[1])\n        }\n        if (monthName === 'Mar') {\n            return (monthNames[2])\n        }\n        if (monthName === 'Apr') {\n            return (monthNames[3])\n        }\n        if (monthName === 'May') {\n            return (monthNames[4])\n        }\n        if (monthName === 'Jun') {\n            return (monthNames[5])\n        }\n        if (monthName === 'Jul') {\n            return (monthNames[6])\n        }\n        if (monthName === 'Aug') {\n            return (monthNames[7])\n        }\n        if (monthName === 'Sep') {\n            return (monthNames[8])\n        }\n        if (monthName === 'Oct') {\n            return (monthNames[9])\n        }\n        if (monthName === 'Nov') {\n            return (monthNames[10])\n        }\n        if (monthName === 'Dec') {\n            return (monthNames[11])\n        }\n    }\n\n    public handleChangeMonthInMobileVersion = (event: any) => {\n        this.setState({\n            selectedMonth: event.target.value\n        })\n    };\n\n    public render() {\n\n        const stylesForTab = {\n            textTransform: 'none',\n            minWidth: 72,\n        } as React.CSSProperties;\n\n        const calendarMenuFullVersion = (\n            <AppBar position=\"static\" color=\"default\" style={{marginTop: '1rem'}}>\n                <Tabs\n                    value={this.state.tabValue}\n                    onChange={this.handleChangeTab}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    variant=\"fullWidth\"\n                >\n                    {this.state.months.map(month => {\n                        return (\n                            <Tab label={this.returnRussianMonthName(new Date(month[0]).toDateString().split(' ')[1])}\n                                 style={stylesForTab}\n                                 key={Math.random()}/>\n                        )\n                    })}\n                </Tabs>\n            </AppBar>\n        );\n\n        const dayCard = (day: string) => {\n            const tasks: newTaskLesson[] = [];\n            const engMonthName = new Date(day).toDateString().split(' ')[1]\n            const rusMonthName = this.returnRussianMonthName(engMonthName)\n            this.state.data.lessonTasks.map((task: newTaskLesson) => {\n                if (task.taskDate !== undefined && new Date(task.taskDate).toDateString() === day) {\n                    tasks.push(task)\n                }\n            });\n            return (\n                <Badge style={{}} badgeContent={tasks.length} color=\"error\">\n                    <div style={{\n                        width: '140px',\n                        height: '110px',\n                        textAlign: 'right',\n                        borderLeft: '1px solid rgba(224, 224, 224, 1)',\n                        marginTop: '7px'\n                    }}>\n\n                        <Typography style={{color: 'grey'}} variant=\"subtitle1\">\n                            {rusMonthName}\n                        </Typography>\n                        <Typography style={{color: 'grey'}} variant=\"h4\">\n                            {Number(day.split(' ')[2])}\n                        </Typography>\n                        {tasks.length >= 1 ?\n                            <div style={{marginRight: '100%'}}><DialogViewDay tasks={tasks} day={day}/></div> : null}\n                    </div>\n                </Badge>\n            )\n        };\n\n        const swipeableViews = (\n            <SwipeableViews axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'} index={this.state.tabValue}\n                            onChangeIndex={this.handleChangeIndexTab}>\n                {this.state.months.map((month) => {\n                    let cells: string[] = [];\n                    const dayName = new Date(month[0]).toDateString().split(' ')[0]\n                    if (dayName === 'Mon') {\n                        cells = month\n                    }\n                    if (dayName === 'Tue') {\n                        cells = ['empty', ...month]\n                    }\n                    if (dayName === 'Wed') {\n                        cells = ['empty', 'empty', ...month]\n                    }\n                    if (dayName === 'Thu') {\n                        cells = ['empty', 'empty', 'empty', ...month]\n                    }\n                    if (dayName === 'Fri') {\n                        cells = ['empty', 'empty', 'empty', 'empty', ...month]\n                    }\n                    if (dayName === 'Sat') {\n                        cells = ['empty', 'empty', 'empty', 'empty', 'empty', ...month]\n                    }\n                    if (dayName === 'Sun') {\n                        cells = ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', ...month]\n                    }\n                    return (\n                        <Table style={{tableLayout: 'fixed'}} key={Math.random()}>\n                            <TableBody>\n                                <TableRow>\n                                    <TableCell style={{width: '14,28%', paddingLeft: '0px'}}>\n                                        <Typography style={{marginLeft: '1rem'}}>Понедельник</Typography>\n                                    </TableCell>\n                                    <TableCell style={{paddingLeft: '0px'}}>\n                                        <Typography style={{marginLeft: '1rem'}}>Вторник</Typography>\n                                    </TableCell>\n                                    <TableCell style={{paddingLeft: '0px'}}>\n                                        <Typography style={{marginLeft: '1rem'}}>Среда</Typography>\n                                    </TableCell>\n                                    <TableCell style={{paddingLeft: '0px'}}>\n                                        <Typography style={{marginLeft: '1rem'}}>Четверг</Typography>\n                                    </TableCell>\n                                    <TableCell style={{paddingLeft: '0px'}}>\n                                        <Typography style={{marginLeft: '1rem'}}>Пятница</Typography>\n                                    </TableCell>\n                                    <TableCell style={{paddingLeft: '0px'}}>\n                                        <Typography style={{marginLeft: '1rem'}}>Суббота</Typography>\n                                    </TableCell>\n                                    <TableCell style={{paddingLeft: '0px'}}>\n                                        <Typography style={{marginLeft: '1rem'}}>Воскресенье</Typography>\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    {cells.slice(0, 7).map((day: any) => {\n                                        return (\n                                            <TableCell style={{paddingLeft: '0px'}} key={Math.random()}>\n                                                {day === 'empty' ? <div/> : dayCard(new Date(day).toDateString())}\n                                            </TableCell>\n                                        )\n                                    })}\n                                </TableRow>\n                                <TableRow>\n                                    {cells.slice(7, 14).map((day: any) => {\n                                        return (\n                                            <TableCell style={{paddingLeft: '0px'}} key={Math.random()}>\n                                                {day === 'empty' ? <div/> : dayCard(new Date(day).toDateString())}\n                                            </TableCell>\n                                        )\n                                    })}\n                                </TableRow>\n                                <TableRow>\n                                    {cells.slice(14, 21).map((day: any) => {\n                                        return (\n                                            <TableCell style={{paddingLeft: '0px'}} key={Math.random()}>\n                                                {day === 'empty' ? <div/> : dayCard(new Date(day).toDateString())}\n                                            </TableCell>\n                                        )\n                                    })}\n                                </TableRow>\n                                <TableRow>\n                                    {cells.slice(21, 28).map((day: any) => {\n                                        return (\n                                            <TableCell style={{paddingLeft: '0px'}} key={Math.random()}>\n                                                {day === 'empty' ? <div/> : dayCard(new Date(day).toDateString())}\n                                            </TableCell>\n                                        )\n                                    })}\n                                </TableRow>\n                                <TableRow>\n                                    {cells.slice(28, 35).map((day: any) => {\n                                        return (\n                                            <TableCell style={{paddingLeft: '0px'}} key={Math.random()}>\n                                                {day === 'empty' ? <div/> : dayCard(new Date(day).toDateString())}\n                                            </TableCell>\n                                        )\n                                    })}\n                                </TableRow>\n                                <TableRow>\n                                    {cells.slice(35, 42).map((day: any) => {\n                                        return (\n                                            <TableCell style={{paddingLeft: '0px'}} key={Math.random()}>\n                                                {day === 'empty' ? <div/> : dayCard(new Date(day).toDateString())}\n                                            </TableCell>\n                                        )\n                                    })}\n                                </TableRow>\n                            </TableBody>\n                        </Table>\n                    )\n                })}\n            </SwipeableViews>\n        );\n\n        const CalendarMenuMobileVersion = () => {\n            return (\n                <FormControl style={{width: '100%'}}>\n                    <InputLabel htmlFor=\"selectTeacher\">Выбранный месяц</InputLabel>\n                    <Select\n                        value={this.state.selectedMonth}\n                        onChange={this.handleChangeMonthInMobileVersion}\n                        input={<Input id=\"selectTeacher\"/>}\n                        fullWidth\n                    >\n                        {this.state.months.map((monthArray: any) => {\n                            const month = this.returnRussianMonthName(new Date(monthArray[0]).toDateString().split(' ')[1]);\n                            return (\n                                <MenuItem value={month} key={Math.random()}>{month}</MenuItem>\n                            )\n                        })}\n                    </Select>\n                </FormControl>\n            )\n        };\n\n        const CalendarBodyMobileVersion = () => {\n\n            const dayCardMobile = (day: string) => {\n                const tasks: newTaskLesson[] = [];\n                this.state.data.lessonTasks.map((task: newTaskLesson) => {\n                    if (task.taskDate !== undefined && new Date(task.taskDate).toDateString() === day) {\n                        tasks.push(task)\n                    }\n                });\n                return (\n                    <Badge style={{}} badgeContent={tasks.length} color=\"error\">\n                        <div style={{\n                            width: '30px',\n                            maxWidth: '30px',\n                            height: '50px',\n                            textAlign: 'right',\n                            borderLeft: '1px solid rgba(224, 224, 224, 1)',\n                            marginTop: '7px'\n                        }}>\n                            <Typography style={{color: 'grey', marginLeft: '0.5rem'}} variant=\"h6\">\n                                {Number(day.split(' ')[2])}\n                            </Typography>\n                            {tasks.length >= 1 ?\n                                <div style={{marginBottom: '3rem'}}><DialogViewDay tasks={tasks} day={day}/></div> : null}\n                        </div>\n                    </Badge>\n                )\n            };\n\n            const CalendarBody = () => {\n                let monthArr: any[] = [];\n                this.state.months.map((month) => {\n                    const monthName = new Date(month[0]).toDateString().split(' ')[1];\n                    if (this.returnRussianMonthName(monthName) === this.state.selectedMonth) {\n                        monthArr = month\n                    }\n                });\n                const dayName = new Date(monthArr[0]).toDateString().split(' ')[0];\n                let cells: string[] = [];\n\n                if (dayName === 'Mon') {\n                    cells = monthArr\n                }\n                if (dayName === 'Tue') {\n                    cells = ['empty', ...monthArr]\n                }\n                if (dayName === 'Wed') {\n                    cells = ['empty', 'empty', ...monthArr]\n                }\n                if (dayName === 'Thu') {\n                    cells = ['empty', 'empty', 'empty', ...monthArr]\n                }\n                if (dayName === 'Fri') {\n                    cells = ['empty', 'empty', 'empty', 'empty', ...monthArr]\n                }\n                if (dayName === 'Sat') {\n                    cells = ['empty', 'empty', 'empty', 'empty', 'empty', ...monthArr]\n                }\n                if (dayName === 'Sun') {\n                    cells = ['empty', 'empty', 'empty', 'empty', 'empty', 'empty', ...monthArr]\n                }\n                return (\n                    <Table style={{tableLayout: 'fixed'}} key={Math.random()}>\n                        <TableBody>\n                            <TableRow>\n                                <TableCell style={{width: '14,28%', paddingLeft: '0px'}}>\n                                    <Typography style={{marginLeft: '1rem'}}>Пн</Typography>\n                                </TableCell>\n                                <TableCell style={{paddingLeft: '0px'}}>\n                                    <Typography style={{marginLeft: '1rem'}}>Вт</Typography>\n                                </TableCell>\n                                <TableCell style={{paddingLeft: '0px'}}>\n                                    <Typography style={{marginLeft: '1rem'}}>Ср</Typography>\n                                </TableCell>\n                                <TableCell style={{paddingLeft: '0px'}}>\n                                    <Typography style={{marginLeft: '1rem'}}>Чт</Typography>\n                                </TableCell>\n                                <TableCell style={{paddingLeft: '0px'}}>\n                                    <Typography style={{marginLeft: '1rem'}}>Пт</Typography>\n                                </TableCell>\n                                <TableCell style={{paddingLeft: '0px'}}>\n                                    <Typography style={{marginLeft: '1rem'}}>Сб</Typography>\n                                </TableCell>\n                                <TableCell style={{paddingLeft: '0px'}}>\n                                    <Typography style={{marginLeft: '1rem'}}>Вс</Typography>\n                                </TableCell>\n                            </TableRow>\n                            <TableRow>\n                                {cells.slice(0, 7).map((day: any) => {\n                                    return (\n                                        <TableCell style={{paddingLeft: '0px'}} key={Math.random()}>\n                                            {day === 'empty' ? <div/> : dayCardMobile(new Date(day).toDateString())}\n                                        </TableCell>\n                                    )\n                                })}\n                            </TableRow>\n                            <TableRow>\n                                {cells.slice(7, 14).map((day: any) => {\n                                    return (\n                                        <TableCell style={{paddingLeft: '0px'}} key={Math.random()}>\n                                            {day === 'empty' ? <div/> : dayCardMobile(new Date(day).toDateString())}\n                                        </TableCell>\n                                    )\n                                })}\n                            </TableRow>\n                            <TableRow>\n                                {cells.slice(14, 21).map((day: any) => {\n                                    return (\n                                        <TableCell style={{paddingLeft: '0px'}} key={Math.random()}>\n                                            {day === 'empty' ? <div/> : dayCardMobile(new Date(day).toDateString())}\n                                        </TableCell>\n                                    )\n                                })}\n                            </TableRow>\n                            <TableRow>\n                                {cells.slice(21, 28).map((day: any) => {\n                                    return (\n                                        <TableCell style={{paddingLeft: '0px'}} key={Math.random()}>\n                                            {day === 'empty' ? <div/> : dayCardMobile(new Date(day).toDateString())}\n                                        </TableCell>\n                                    )\n                                })}\n                            </TableRow>\n                            <TableRow>\n                                {cells.slice(28, 35).map((day: any) => {\n                                    return (\n                                        <TableCell style={{paddingLeft: '0px'}} key={Math.random()}>\n                                            {day === 'empty' ? <div/> : dayCardMobile(new Date(day).toDateString())}\n                                        </TableCell>\n                                    )\n                                })}\n                            </TableRow>\n                            <TableRow>\n                                {cells.slice(35, 42).map((day: any) => {\n                                    return (\n                                        <TableCell style={{paddingLeft: '0px'}} key={Math.random()}>\n                                            {day === 'empty' ? <div/> : dayCardMobile(new Date(day).toDateString())}\n                                        </TableCell>\n                                    )\n                                })}\n                            </TableRow>\n                        </TableBody>\n                    </Table>\n                );\n            };\n\n\n            return (\n                <CalendarBody/>\n            )\n        };\n\n        return (\n            <div>\n                <div className=\"top\" style={{marginTop: '5rem'}}>\n                    <CalendarMenuMobileVersion/>\n                    <CalendarBodyMobileVersion/>\n                </div>\n\n                <div style={{minWidth: '1216px', overflow: 'auto'}} className=\"topBarMax\">\n                    {calendarMenuFullVersion}\n\n                    {this.state.isDataConfirmed ? swipeableViews : LoadingComponent}\n                </div>\n                {this.state.openSnackbar ? <SnackbarComponent variant=\"success\" message=\"Задание добавлено\"/> : null}\n            </div>\n        )\n    }\n}\n","import HelpPage from \"./pages/HelpPage\";\nimport StartPage from \"./pages/StartPage\";\nimport AccountPage from \"./pages/AccountPage\";\nimport SchedulePage from \"./pages/SchedulePage\";\nimport CalendarPage from \"./pages/CalendarPage\";\n\nexport const pagesForMenus =  {\n    pages:\n        [\n            {path: '/', buttonText: 'Главная', isDataConfirmed: false,  component: StartPage, icon: 'home'},\n            {path: '/help', buttonText: 'Помощь', isDataConfirmed: false, component: HelpPage, icon: 'live_help'},\n            {path: '/account', buttonText: 'Аккаунт', isDataConfirmed: true, component: AccountPage, icon: 'person'},\n            {path: '/schedule', buttonText: 'Расписание', isDataConfirmed: true, component: SchedulePage, icon: 'event'},\n            {path: '/calendar', buttonText: 'Календарь', isDataConfirmed: true, component: CalendarPage, icon: 'view_module'},\n        ]\n};\n","import React from 'react'\nimport {\n    Button, CircularProgress,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    TextField, Typography\n} from \"@material-ui/core\";\nimport Http from \"../../serverApi/http\";\nimport {DataStorage} from \"../../serverApi/dataStorage\";\nimport {LocalStorage} from \"../../serverApi/localStorage\";\nimport {MeetingRoom} from \"@material-ui/icons\";\n\n\ninterface DialogLoginFormProps {\n    mobile: boolean\n    isLoginSuccess: any;\n}\n\ninterface DialogLoginFormState {\n    openDialogWindow: boolean,\n    email: string,\n    password: string,\n    isLoading: boolean\n    loginState: string\n}\n\nexport class DialogLoginForm extends React.Component<DialogLoginFormProps, DialogLoginFormState> {\n\n    state = {\n        openDialogWindow: false,\n        email: '',\n        password: '',\n        isLoading: false,\n        loginState: ''\n    };\n\n    public handleOpenLoginDialog = () => {\n        this.setState({\n            openDialogWindow: true\n        })\n    };\n\n    public handleClose = () => {\n        this.setState({\n            openDialogWindow: false,\n\n        })\n    };\n\n    public login = () => {\n        this.setState({\n            isLoading: true\n        });\n        const http = new Http();\n        const data = {\n            email: this.state.email,\n            password: this.state.password,\n        };\n        http.loginForToken(data, '/auth')\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    if (result.token === undefined){\n                        this.setState({\n                            loginState: 'Email или пароль введены неверно'\n                        })\n                    } else {\n                        this.setState({\n                            loginState: 'Вы успешно авторизованы. Сейчас Вы будете перенаправлены'\n                        }, ()=>{\n                            const storage = new DataStorage(new LocalStorage());\n                            storage.add(result.token);\n                            http.loginWithToken(result.token, '/user')\n                                .then(res => res.json())\n                                .then (\n                                    (result)=>{\n                                        // КОНЕЧНЫЕ ДАННЫЕ\n                                        this.setState({\n                                            openDialogWindow: false\n                                        });\n                                        this.props.isLoginSuccess(result)\n\n                                    }, (error) => {\n                                        console.log(error)\n                                    }\n                                )\n                        })\n                    }\n                    this.setState({\n                        isLoading: false\n                    })\n                },\n                (error) => {\n                    console.log(error)\n                }\n            );\n    };\n\n    public handleEmailChange = (event: any) => {\n        this.setState({\n            email: event.target.value\n        })\n    };\n\n    public handlePasswordChange = (event: any) => {\n        this.setState({\n            password: event.target.value\n        })\n    };\n\n    public render() {\n        return (\n            <div>\n\n                {this.props.mobile === true ?\n                    <div onClick={this.handleOpenLoginDialog} style={{height: '2rem', width: '7rem'}}>\n                        <Typography variant=\"button\"><MeetingRoom/>&nbsp;&nbsp;Вход</Typography>\n                    </div>\n                    :\n                    <Button color=\"secondary\" onClick={this.handleOpenLoginDialog}>\n                        <MeetingRoom/>&nbsp;&nbsp;Вход\n                    </Button>}\n\n                <Dialog open={this.state.openDialogWindow} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\">\n                    <DialogTitle id=\"form-dialog-title\">Вход</DialogTitle>\n                    <div style={{marginLeft: 'auto', marginRight: 'auto'}}>\n                        {this.state.isLoading ? <CircularProgress/> : null}\n                    </div>\n                    <DialogContent>\n                        <DialogContentText>\n                            Введите Email и пароль\n                        </DialogContentText>\n\n                        <Typography variant=\"button\">{this.state.loginState}</Typography>\n\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"login\"\n                            label={<Typography>Email <span style={{color: 'red'}}>*</span></Typography>}\n                            type=\"email\"\n                            fullWidth\n                            onChange={this.handleEmailChange}\n                        />\n                        <TextField\n                            margin=\"dense\"\n                            id=\"pass\"\n                            label={<Typography>Пароль <span style={{color: 'red'}}>*</span></Typography>}\n                            type=\"password\"\n                            fullWidth\n                            onChange={this.handlePasswordChange}\n                        />\n                    </DialogContent>\n\n                    <DialogActions>\n\n                        <Button onClick={this.login} color=\"primary\">\n                            Войти\n                        </Button>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            Отмена\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport {\n    Button, CircularProgress,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    TextField, Typography\n} from \"@material-ui/core\";\nimport Http from \"../../serverApi/http\";\nimport {DataStorage} from \"../../serverApi/dataStorage\";\nimport {LocalStorage} from \"../../serverApi/localStorage\";\nimport {PersonAdd} from \"@material-ui/icons\";\n\ninterface DialogRegisterFormProps {\n    mobile: boolean\n    isLoginSuccess: any;\n}\n\ninterface DialogRegisterFormState {\n    openDialogWindow: boolean,\n    email: string,\n    password: string,\n    confirmPassword: string,\n    isLoading: boolean,\n    registrationState: string\n}\n\nexport class DialogRegisterForm extends React.Component<DialogRegisterFormProps, DialogRegisterFormState> {\n\n    state = {\n        openDialogWindow: false,\n        email: '',\n        password: '',\n        confirmPassword: '',\n        isLoading: false,\n        registrationState: ''\n    };\n\n    public handleOpenLoginDialog = () => {\n        this.setState({\n            openDialogWindow: true\n        })\n    };\n\n\n    public handleClose = () => {\n\n        this.setState({\n            openDialogWindow: false,\n\n        })\n    };\n\n    public login = () => {\n        this.setState({\n            isLoading: true\n        });\n        const http = new Http();\n        const data = {\n            email: this.state.email,\n            password: this.state.password,\n            confirmPassword: this.state.confirmPassword\n        };\n        http.loginForToken(data, '/registration')\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isLoading: false\n                    });\n                    if (result === 'Passwords Not Confirmed') {\n                        console.log(result);\n                        this.setState({\n                            registrationState: 'Введенные пароли не совпадают'\n                        })\n                    }\n\n                    if (result.token !== undefined) {\n                        this.setState({\n                            registrationState: 'Вы успешно зарегистрированы. Сейчас Вы будете перенаправлены'\n                        }, () => {\n                            const storage = new DataStorage(new LocalStorage());\n                            storage.add(result.token);\n                            http.loginWithToken(result.token, '/user')\n                                .then(res => res.json())\n                                .then(\n                                    (result) => {\n                                        // КОНЕЧНЫЕ ДАННЫЕ\n                                        this.setState({\n                                            openDialogWindow: false\n                                        });\n                                        this.props.isLoginSuccess(result)\n\n                                    }, (error) => {\n                                        console.log(error)\n                                    }\n                                )\n                        })\n                    }\n\n                    if (result === 'This email already registered') {\n                        this.setState({\n                            registrationState: 'Этот Email уже занят'\n                        })\n                    }\n\n                    if (result === '8 symbols') {\n                        this.setState({\n                            registrationState: 'Длина пароля должна быть не менее 8 символов'\n                        })\n                    }\n                },\n                (error) => {\n                    console.log(error)\n                }\n            );\n    };\n\n    public handleEmailChange = (event: any) => {\n        this.setState({\n            email: event.target.value\n        })\n    };\n\n    public handlePasswordChange = (event: any) => {\n        this.setState({\n            password: event.target.value\n        })\n    };\n\n    public handleConfirmPasswordChange = (event: any) => {\n        this.setState({\n            confirmPassword: event.target.value\n        })\n    };\n\n    public render() {\n        return (\n            <div>\n\n                {this.props.mobile === true ?\n                    <div onClick={this.handleOpenLoginDialog} style={{height: '2rem', width: '7rem'}}>\n                        <PersonAdd/>&nbsp;&nbsp;<Typography variant=\"button\">Регистрация</Typography>\n                    </div>\n                    :\n                    <Button color=\"secondary\" onClick={this.handleOpenLoginDialog}>\n                        <PersonAdd/>&nbsp;&nbsp;Регистрация\n                    </Button>}\n\n                <Dialog open={this.state.openDialogWindow} onClose={this.handleClose}\n                        aria-labelledby=\"form-dialog-title\">\n                    <DialogTitle id=\"form-dialog-title\">Регистрация</DialogTitle>\n                    <div style={{marginLeft: 'auto', marginRight: 'auto'}}>\n                        {this.state.isLoading ? <CircularProgress/> : null}\n                    </div>\n                    <DialogContent>\n                        <DialogContentText>\n                            Для регистрации необходимо ввести свой email и пароль. Введенные пароли должны совпадать\n                        </DialogContentText>\n\n                        <Typography variant=\"button\">{this.state.registrationState}</Typography>\n\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"login\"\n                            label={<Typography>Email <span style={{color: 'red'}}>*</span></Typography>}\n                            type=\"email\"\n                            fullWidth\n                            onChange={this.handleEmailChange}\n                        />\n                        <TextField\n                            margin=\"dense\"\n                            id=\"pass\"\n                            label={<Typography>Пароль <span style={{color: 'red'}}>*</span></Typography>}\n                            type=\"password\"\n                            fullWidth\n                            onChange={this.handlePasswordChange}\n                        />\n                        <TextField\n                            margin=\"dense\"\n                            id=\"confirmPass\"\n                            label={<Typography>Повторите пароль <span style={{color: 'red'}}>*</span></Typography>}\n                            type=\"password\"\n                            fullWidth\n                            onChange={this.handleConfirmPasswordChange}\n                        />\n                    </DialogContent>\n\n                    <DialogActions>\n                        <Button onClick={this.login} color=\"primary\">\n                            Зарегистрироваться\n                        </Button>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            Отмена\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        )\n    }\n}\n","import {Switch, Route, Link, NavLink, Redirect} from 'react-router-dom'\nimport React from 'react'\nimport {AppBar, Button, CircularProgress, Container, Icon, Menu, Toolbar, Typography} from \"@material-ui/core\";\nimport {MuiThemeProvider} from '@material-ui/core/styles';\nimport {theme} from \"../Theme\";\nimport MenuIcon from '@material-ui/icons/Menu';\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport {pagesForMenus} from \"../AppPagesList\";\nimport {DialogLoginForm} from \"./Dialogs/DialogLoginForm\";\nimport {DialogRegisterForm} from \"./Dialogs/DialogRegisterForm\";\nimport {DataStorage} from \"../serverApi/dataStorage\";\nimport {LocalStorage} from \"../serverApi/localStorage\";\nimport Http from \"../serverApi/http\";\nimport {Input} from \"@material-ui/icons\";\nimport StartPage from \"../pages/StartPage\";\n\n\ninterface pageData {\n    path: string;\n    buttonText: string;\n    isDataConfirmed: boolean;\n    component: any,\n    icon: any\n}\n\ninterface MainState {\n    menuEl: any,\n    mobileOpenDialogLoginForm: any,\n    isDataConfirmed: any,\n    data: any,\n}\n\nexport default class Main extends React.Component {\n\n    public storage = new DataStorage(new LocalStorage());\n\n    public state: MainState = {\n        menuEl: null,\n        mobileOpenDialogLoginForm: false,\n        isDataConfirmed: null, // флаг становится true только в том случае, если пришли данные по токену. Флаг прокидывается в детей и внутри проходят запросы\n        data: null,\n    };\n\n    // вспомогательное для меню\n    public handleClick = (evt: React.MouseEvent<HTMLButtonElement>) => {\n        this.setState({\n            menuEl: evt.currentTarget\n        })\n    };\n\n    // открытие - закрытие меню на мобильной версии\n    public handleClose = () => {\n        this.setState({\n            menuEl: null\n        })\n    };\n\n    // поднимается через пропсы с форм регистрации и логина\n    public isLoginSuccess = (data: any) => {\n        this.setState({\n            data: data\n        }, () => {\n            this.setState({\n                isDataConfirmed: true\n            })\n        })\n    };\n\n    // обработчик кнопки выхода\n    public handleExitButton = () => {\n        this.storage.logOut();\n        this.setState({\n            isDataConfirmed: false,\n            data: null\n        })\n    };\n\n    // событие изменения страницы - проверка данных\n    public changePage = () => {\n        const storage = new DataStorage(new LocalStorage());\n        const http = new Http();\n        if (storage.getUserData !== null) {\n            http.loginWithToken(storage.getUserData, '/user')\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        if (result.email !== undefined) {\n                            this.setState({\n                                data: result\n                            }, () => {\n                                this.setState({\n                                    isDataConfirmed: true\n                                })\n                            })\n                        } else {\n                            this.setState({\n                                isDataConfirmed: false\n                            }, () => {\n                                storage.logOut()\n                            })\n                        }\n                    }, (error) => {\n                        console.log(error)\n                    }\n                );\n        } else {\n            this.setState({\n                isDataConfirmed: false\n            })\n        }\n    }\n\n    componentDidMount(): void {\n        const storage = new DataStorage(new LocalStorage());\n        const http = new Http();\n        if (storage.getUserData !== null) {\n            http.loginWithToken(storage.getUserData, '/user')\n                .then(res => res.json())\n                .then(\n                    (result) => {\n                        if (result.email !== undefined) {\n                            this.setState({\n                                data: result\n                            }, () => {\n                                this.setState({\n                                    isDataConfirmed: true\n                                })\n                            })\n                        } else {\n                            this.setState({\n                                isDataConfirmed: false\n                            }, () => {\n                                storage.logOut()\n                            })\n                        }\n                    }, (error) => {\n                        console.log(error)\n                    }\n                );\n        } else {\n            this.setState({\n                isDataConfirmed: false\n            })\n        }\n\n    }\n\n    public render() {\n\n        const isDataConfirmedMobileMenu = (\n            <AppBar>\n                <Toolbar className=\"topBarMin\">\n                    <Button color=\"secondary\" aria-controls=\"customized-menu\" aria-haspopup=\"true\"\n                            onClick={this.handleClick}>\n                        <MenuIcon/>\n                    </Button>\n                    <Menu\n                        id=\"customized-menu\" anchorEl={this.state.menuEl} keepMounted\n                        open={Boolean(this.state.menuEl)} onClose={this.handleClose}\n                        style={{marginTop: '2rem'}}>\n                        {/* ОТДЕЛЬНО ВОЗВРАЩАЕТСЯ КНОПКА ВХОДА */}\n                        <div>\n                            {pagesForMenus.pages.map((dataPage: pageData) => {\n                                    return (\n                                        <div key={dataPage.buttonText + 'logged'}  onClick={this.changePage} style={{width: '180px'}}>\n                                            <NavLink to={dataPage.path} style={{color: \"black\"}}\n                                                     activeStyle={{color: \"black\", fontWeight: \"bold\"}}>\n                                                <MenuItem onClick={this.handleClose}>\n                                                    <Icon>{dataPage.icon}</Icon>&nbsp;&nbsp;\n\n                                                    <Typography\n                                                        variant=\"button\">{dataPage.buttonText}</Typography>\n                                                </MenuItem>\n                                            </NavLink>\n                                        </div>\n                                    )\n\n                                }\n                            )}\n                            <MenuItem onClick={this.handleExitButton}>\n                                <Input/>&nbsp;&nbsp;Выйти\n                            </MenuItem>\n                        </div>\n                    </Menu>\n                    {this.state.data === null ? null :\n                        <Typography style={{marginLeft: 'auto'}}\n                                    variant=\"subtitle2\">Привет, {this.state.data.email}</Typography>}\n                </Toolbar>\n            </AppBar>\n        )\n\n        const isDataNotConfirmedMobileMenu = (\n            <AppBar>\n                <Toolbar className=\"topBarMin\">\n                    <Button color=\"secondary\" aria-controls=\"customized-menu\" aria-haspopup=\"true\"\n                            onClick={this.handleClick}>\n                        <MenuIcon/>\n                    </Button>\n                    <Menu\n                        id=\"customized-menu\" anchorEl={this.state.menuEl} keepMounted\n                        open={Boolean(this.state.menuEl)} onClose={this.handleClose}\n                        style={{marginTop: '2rem'}}>\n                        {pagesForMenus.pages.map((dataPage: pageData) => {\n                            if (dataPage.isDataConfirmed === false){\n                                return (\n                                    <div key={dataPage.buttonText}  onClick={this.changePage} style={{width: '180px'}}>\n                                        <NavLink to={dataPage.path} style={{color: \"black\"}}\n                                                 activeStyle={{color: \"black\", fontWeight: \"bold\"}}>\n                                            <MenuItem onClick={this.handleClose}>\n                                                <Icon>{dataPage.icon}</Icon>&nbsp;&nbsp;\n\n                                                <Typography\n                                                    variant=\"button\">{dataPage.buttonText}</Typography>\n                                            </MenuItem>\n                                        </NavLink>\n                                    </div>\n                                )\n                            }\n\n                            }\n                        )}\n                        {/* ОТДЕЛЬНО ВОЗВРАЩАЕТСЯ КНОПКА ВХОДА */}\n\n                        <div>\n                            <MenuItem>\n                                <DialogLoginForm mobile={true} isLoginSuccess={this.isLoginSuccess}/>\n                            </MenuItem>\n                        </div>\n                        <div>\n                            <MenuItem>\n                                <DialogRegisterForm mobile={true} isLoginSuccess={this.isLoginSuccess}/>\n                            </MenuItem>\n                        </div>\n\n                    </Menu>\n                </Toolbar>\n            </AppBar>\n        );\n\n\n        const isLoadingComponent = (\n            <MuiThemeProvider theme={theme}>\n                <AppBar>\n                    <Toolbar style={{textAlign: 'right'}}>\n                        <CircularProgress color=\"inherit\"/>\n                    </Toolbar>\n                </AppBar>\n            </MuiThemeProvider>\n        );\n\n        const isDataConfirmed = (\n            <Switch>\n                <MuiThemeProvider theme={theme}>\n                    {/* МЕНЮ В МОБИЛЬНОЙ ВЕРСИИ */}\n\n                    {isDataConfirmedMobileMenu}\n\n                    {/* МЕНЮ В ПОЛНОЙ ВЕРСИИ */}\n                    <AppBar>\n                        <Toolbar className=\"topBarMax\" style={{textAlign: 'right'}}>\n                            {/* ОТДЕЛЬНО ВОЗВРАЩАЕТСЯ КНОПКА ВХОДА */}\n\n                            {pagesForMenus.pages.map((dataPage: pageData) => {\n                                return (\n                                    <div key={dataPage.buttonText + 'logged'}>\n                                        <Link to={dataPage.path}>\n                                            <Button color=\"secondary\"  onClick={this.changePage}>\n                                                <Icon>{dataPage.icon}</Icon>&nbsp;&nbsp;{dataPage.buttonText}\n                                            </Button>\n                                        </Link>\n                                    </div>\n                                )\n                            })}\n                            <Button onClick={this.handleExitButton} color=\"secondary\">\n                                <Input/>&nbsp;&nbsp;ВЫХОД\n                            </Button>\n                            &nbsp;\n                            {this.state.data === null ? null :\n                                <Typography style={{marginLeft: 'auto'}}\n                                            variant=\"subtitle2\">Привет, {this.state.data.email}</Typography>}\n                        </Toolbar>\n                    </AppBar>\n\n                    {/*{ ТЕЛО ВСЕЙ СТРАНИЦЫ }*/}\n                    <Container>\n                        <div style={{marginTop: '5rem'}}>\n                            {pagesForMenus.pages.map((dataPage: pageData) => {\n                                return (\n                                    <div key={dataPage.buttonText}>\n                                        <Route exact path={dataPage.path} component={dataPage.component}/>\n                                    </div>\n                                )\n                            })}\n                            <Redirect to=\"/calendar\"/>\n                        </div>\n                    </Container>\n                </MuiThemeProvider>\n                <StartPage/>\n            </Switch>\n        );\n\n        const isDataNotConfrimed = (\n            <Switch>\n                <MuiThemeProvider theme={theme}>\n                        {/* МЕНЮ В МОБИЛЬНОЙ ВЕРСИИ */}\n\n                        {isDataNotConfirmedMobileMenu}\n                        {/* МЕНЮ В ПОЛНОЙ ВЕРСИИ */}\n                        <AppBar>\n                            <Toolbar className=\"topBarMax\" style={{textAlign: 'right'}}>\n                                {/* ОТДЕЛЬНО ВОЗВРАЩАЕТСЯ КНОПКА ВХОДА */}\n\n                                {pagesForMenus.pages.map((dataPage: pageData) => {\n                                    if (dataPage.isDataConfirmed === false) {\n                                        return (\n                                            <div key={dataPage.buttonText}>\n                                                <Link to={dataPage.path}>\n                                                    <Button color=\"secondary\" onClick={this.changePage}>\n                                                        <Icon>{dataPage.icon}</Icon>&nbsp;&nbsp;{dataPage.buttonText}\n                                                    </Button>\n                                                </Link>\n                                            </div>\n                                        )\n                                    }\n                                })}\n\n                                <DialogLoginForm mobile={false} isLoginSuccess={this.isLoginSuccess}/>\n                                <DialogRegisterForm mobile={false} isLoginSuccess={this.isLoginSuccess}/>\n\n                            </Toolbar>\n                        </AppBar>\n\n                        {/* ТЕЛО ВСЕЙ СТРАНИЦЫ */}\n                        <Container>\n                            <div style={{marginTop: '5rem'}}>\n                                {pagesForMenus.pages.map((dataPage: pageData) => {\n                                    if (dataPage.isDataConfirmed === false){\n                                        return (\n                                            <div key={dataPage.buttonText}>\n                                                <Route exact path={dataPage.path} component={dataPage.component}/>\n                                            </div>\n                                        )\n                                    }\n                                })}\n                                <Redirect to=\"/\"/>\n                            </div>\n                        </Container>\n                </MuiThemeProvider>\n            </Switch>\n        );\n\n        // ВОЗВРАЩАЕТСЯ ЕСЛИ ОЖИДАНИЕ ЗАПРОСА\n        if (this.state.isDataConfirmed === null) {\n            return (isLoadingComponent)\n        }\n        // ВОЗВРАЩАЕТСЯ ЕСЛИ ДАННЫЕ НЕ ПРИШЛИ\n        if (!this.state.isDataConfirmed) {\n            return (isDataNotConfrimed)\n        } else {\n            return (isDataConfirmed)\n        }\n\n    }\n};\n","import React from 'react';\nimport './App.css';\nimport {BrowserRouter} from \"react-router-dom\";\nimport Main from \"./components/Main\";\n\nconst App: React.FC = () => {\n    return (\n        <BrowserRouter>\n            <Main/>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}