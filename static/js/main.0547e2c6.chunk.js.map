{"version":3,"sources":["Theme.ts","pages/AppPagesList.ts","AppConstants.tsx","serverApi/http.ts","components/Dialogs/DialogLoginForm.tsx","components/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","palette","common","black","white","background","paper","default","primary","light","main","dark","contrastText","secondary","error","text","disabled","hint","pagesForMenus","pages","path","buttonText","isLogged","component","serverApi","Http","url","data","fetch","this","method","headers","Content-Type","body","JSON","stringify","DialogLoginForm","_React$Component","_getPrototypeOf2","_this","Object","classCallCheck","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","open","email","password","handleOpenLoginDialog","setState","handleClose","login","http","then","res","json","result","console","log","handleEmailChange","event","target","value","handlePasswordChange","inherits","createClass","key","react_default","a","createElement","Typography","variant","onClick","Dialog","onClose","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","TextField","autoFocus","margin","label","type","fullWidth","onChange","DialogActions","Button","color","React","Component","Main","menuEl","mobileOpenDialogLoginForm","handleClick","evt","currentTarget","dialogLoginFormHandler","_this2","react_router","MuiThemeProvider","AppBar","Toolbar","className","aria-controls","aria-haspopup","Menu_default","Menu","anchorEl","keepMounted","Boolean","style","marginTop","MenuItem","DialogLoginForm_DialogLoginForm","map","dataPage","react_router_dom","to","activeStyle","fontWeight","textAlign","exact","App","Main_Main","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0547e2c6.chunk.js","sourcesContent":["import {createMuiTheme} from \"@material-ui/core\";\n\nexport const theme = createMuiTheme({\n    \"palette\": {\n        \"common\": {\n            \"black\": \"#000\",\n            \"white\": \"#fff\"\n        },\n        \"background\": {\n            \"paper\": \"rgba(255, 255, 255, 1)\",\n            \"default\": \"#fafafa\"\n        },\n        \"primary\": {\n            \"light\": \"#40c4ff\",\n            \"main\": \"#039be5\",\n            \"dark\": \"rgba(74, 144, 226, 1)\",\n            \"contrastText\": \"#fff\"\n        },\n        \"secondary\": {\n            \"light\": \"#4ffcff\",\n            \"main\": \"#fff\",\n            \"dark\": \"#22c5bb\",\n            \"contrastText\": \"#fff\"\n        },\n        \"error\": {\n            \"light\": \"#2327e5\",\n            \"main\": \"#001df4\",\n            \"dark\": \"#0b18d3\",\n            \"contrastText\": \"#fff\"\n        },\n        \"text\": {\n            \"primary\": \"rgba(0, 0, 0, 0.87)\",\n            \"secondary\": \"rgba(0, 0, 0, 0.54)\",\n            \"disabled\": \"rgba(0, 0, 0, 0.38)\",\n            \"hint\": \"rgba(0, 0, 0, 0.38)\"\n        }\n    }\n});\n","import StartPage from \"./StartPage\";\nimport RegisterPage from \"./RegisterPage\";\n\nexport const pagesForMenus =  {\n    pages:\n        [\n            {path: null, buttonText: 'Вход', isLogged: false, component: null},\n            {path: null, buttonText: 'Регистрация', isLogged: false, component: null},\n            {path: '/help', buttonText: 'Помощь', isLogged: false, component: null}\n        ]\n};\n","export const serverApi = 'http://localhost:7777';\n","import {serverApi} from \"../AppConstants\";\n\ninterface loginData {\n    email: string;\n    password: string\n}\n\n\nexport default class Http {\n\n    public url = serverApi;\n\n    public login (data: loginData, path: string) {\n        return fetch(this.url + path, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        });\n    }\n}\n","import React from 'react'\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    TextField, Typography\n} from \"@material-ui/core\";\nimport Http from \"../../serverApi/http\";\n\nexport class DialogLoginForm extends React.Component {\n\n    state = {\n        open: false,\n        email: '',\n        password: ''\n    };\n\n    public handleOpenLoginDialog = () => {\n        this.setState({\n            open: true\n        })\n    }\n\n    public handleClose = () => {\n        this.setState({\n            open: false\n        })\n    };\n\n    public login = () => {\n        const http = new Http();\n        const data = {\n            email: this.state.email,\n            password: this.state.password\n        };\n        http.login(data, '/auth')\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    console.log(result)\n                },\n                (error) => {\n                    console.log(error)\n                }\n            );\n\n\n    };\n\n    public handleEmailChange = (event:any) => {\n        console.log(event.target.value)\n        this.setState({\n            email: event.target.value\n        })\n    };\n\n    public handlePasswordChange = (event: any) => {\n        this.setState({\n            password: event.target.value\n        })\n    };\n\n    public render() {\n        return (\n            <div>\n\n                <Typography variant=\"button\" onClick={this.handleOpenLoginDialog}>\n                    Вход\n                </Typography>\n\n                <Dialog open={this.state.open} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\">\n                    <DialogTitle id=\"form-dialog-title\">Вход</DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>\n                            Введите логин (email) и пароль\n                        </DialogContentText>\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"login\"\n                            label=\"Email\"\n                            type=\"email\"\n                            fullWidth\n                            onChange={this.handleEmailChange}\n                        />\n                        <TextField\n                            margin=\"dense\"\n                            id=\"pass\"\n                            label=\"Пароль\"\n                            type=\"password\"\n                            fullWidth\n                            onChange={this.handlePasswordChange}\n                        />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.login} color=\"primary\">\n                            Войти\n                        </Button>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            Отмена\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        )\n    }\n}\n","import {Switch, Route, Link, NavLink} from 'react-router-dom'\nimport React from 'react'\nimport {AppBar, Button, Menu, Toolbar, Typography} from \"@material-ui/core\";\nimport {MuiThemeProvider} from '@material-ui/core/styles';\nimport {theme} from \"../Theme\";\nimport MenuIcon from '@material-ui/icons/Menu';\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport {pagesForMenus} from \"../pages/AppPagesList\";\nimport {DialogLoginForm} from \"./Dialogs/DialogLoginForm\";\n\n\ninterface pageData {\n    path: string | null;\n    buttonText: string;\n    isLogged: boolean\n    component: any\n}\n\nexport default class Main extends React.Component {\n\n    public state = {\n        menuEl: null,\n        mobileOpenDialogLoginForm: false\n    };\n\n\n    public handleClick = (evt: React.MouseEvent<HTMLButtonElement>) => {\n        this.setState({\n            menuEl: evt.currentTarget\n        })\n    };\n\n    public handleClose = () => {\n        this.setState({\n            menuEl: null\n        })\n    };\n\n    public dialogLoginFormHandler = () => {\n        this.handleClose()\n        // @ts-ignore\n        const dialogLoginForm = new DialogLoginForm()\n        dialogLoginForm.setState({open: true})\n    };\n\n\n    public render() {\n        return (\n            <Switch>\n                <MuiThemeProvider theme={theme}>\n\n                    <div>\n\n                        {/* МЕНЮ В МОБИЛЬНОЙ ВЕРСИИ */}\n                        <AppBar>\n                            <Toolbar className=\"topBarMin\">\n                                <Button color=\"secondary\" aria-controls=\"customized-menu\" aria-haspopup=\"true\"\n                                        onClick={this.handleClick}>\n                                    <MenuIcon/>\n                                </Button>\n                                <Menu\n                                    id=\"customized-menu\" anchorEl={this.state.menuEl} keepMounted\n                                    open={Boolean(this.state.menuEl)} onClose={this.handleClose}\n                                    style={{marginTop: '2rem'}}>\n                                    {/* ОТДЕЛЬНО ВОЗВРАЩАЕТСЯ КНОПКА ВХОДА */}\n                                    <div>\n                                        <MenuItem>\n                                           <DialogLoginForm/>\n                                        </MenuItem>\n                                    </div>\n                                    {pagesForMenus.pages.map((dataPage: pageData) => {\n                                            if (dataPage.path !== null) {\n                                                return (\n                                                    <div key={dataPage.buttonText}>\n                                                        <NavLink to={dataPage.path} style={{color: \"black\"}}\n                                                                 activeStyle={{color: \"black\", fontWeight: \"bold\"}}>\n                                                            <MenuItem onClick={this.handleClose}>\n                                                                <Typography variant=\"button\">{dataPage.buttonText}</Typography>\n                                                            </MenuItem>\n                                                        </NavLink>\n                                                    </div>\n                                                )\n                                            } else {\n                                                if (dataPage.buttonText === 'Вход') {\n                                                    return null\n                                                }\n                                                return (\n                                                    <div key={dataPage.buttonText}>\n                                                        <MenuItem onClick={this.handleClose}>\n                                                            <Typography variant=\"button\">{dataPage.buttonText}</Typography>\n                                                        </MenuItem>\n                                                    </div>\n                                                )\n                                            }\n                                        }\n                                    )}\n\n                                </Menu>\n                            </Toolbar>\n                        </AppBar>\n\n                        {/* МЕНЮ В ПОЛНОЙ ВЕРСИИ */}\n                        <AppBar>\n                            <Toolbar className=\"topBarMax\" style={{textAlign: 'right'}}>\n                                {/* ОТДЕЛЬНО ВОЗВРАЩАЕТСЯ КНОПКА ВХОДА */}\n                                    <DialogLoginForm/>\n                                {pagesForMenus.pages.map((dataPage: pageData) => {\n                                    if (dataPage.path !== null) {\n                                        return (\n                                            <div key={dataPage.buttonText}>\n                                                <Link to={dataPage.path}>\n                                                    <Button color=\"secondary\">\n                                                        {dataPage.buttonText}\n                                                    </Button>\n                                                </Link>\n                                            </div>\n                                        )\n                                    } else {\n                                        if (dataPage.buttonText === 'Вход') {\n                                            return null\n                                        }\n                                        return (\n                                            <div key={dataPage.buttonText}>\n                                                <Button color=\"secondary\">\n                                                    {dataPage.buttonText}\n                                                </Button>\n                                            </div>\n                                        )\n                                    }\n                                })}\n\n                            </Toolbar>\n                        </AppBar>\n\n                        {/*{ ТЕЛО ВСЕЙ СТРАНИЦЫ }*/}\n                        <div style={{marginTop: '5rem'}}>\n\n\n                            {pagesForMenus.pages.map((dataPage: pageData) => {\n                                if (dataPage.path !== null) {\n                                    return (\n                                        <div key={dataPage.buttonText}>\n                                            <Route exact path={dataPage.path} component={dataPage.component}/>\n                                        </div>\n                                    )\n                                } else {\n                                    return null\n                                }\n                            })}\n                        </div>\n                    </div>\n                </MuiThemeProvider>\n            </Switch>\n        )\n    }\n};\n","import React from 'react';\nimport './App.css';\nimport {BrowserRouter} from \"react-router-dom\";\nimport Main from \"./components/Main\";\n\nconst App: React.FC = () => {\n    return (\n        <BrowserRouter>\n            <Main/>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}